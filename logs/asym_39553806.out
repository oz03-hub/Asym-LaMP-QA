Keeping ['ae', 'lp', 'sc'] in profile
Temp data file saved at data/processed/TEMP_ae_processed_test.json.
	Running Ranking: ['python', 'retrieval/rank_dataset.py', '--model_name', 'facebook/contriever-msmarco', '--input_dataset_addr', 'data/processed/TEMP_ae_processed_test.json', '--output_dataset_addr', 'data/processed/TEMP_ae_processed_test.json', '--batch_size', '4']

  0%|          | 0/401 [00:00<?, ?it/s]
  0%|          | 1/401 [00:00<04:48,  1.39it/s]
  0%|          | 2/401 [00:00<02:58,  2.24it/s]
  1%|          | 3/401 [00:03<08:52,  1.34s/it]
  1%|          | 4/401 [00:04<09:05,  1.37s/it]
  1%|          | 5/401 [00:06<09:13,  1.40s/it]
  1%|▏         | 6/401 [00:07<09:20,  1.42s/it]
  2%|▏         | 7/401 [00:09<09:27,  1.44s/it]
  2%|▏         | 8/401 [00:10<09:23,  1.43s/it]
  2%|▏         | 9/401 [00:12<09:25,  1.44s/it]
  2%|▏         | 10/401 [00:12<07:29,  1.15s/it]
  3%|▎         | 11/401 [00:14<08:31,  1.31s/it]
  3%|▎         | 13/401 [00:15<07:03,  1.09s/it]
  3%|▎         | 14/401 [00:19<10:43,  1.66s/it]
  4%|▎         | 15/401 [00:19<08:06,  1.26s/it]
  4%|▍         | 17/401 [00:19<04:58,  1.29it/s]
  4%|▍         | 18/401 [00:21<06:17,  1.01it/s]
  5%|▍         | 19/401 [00:23<07:22,  1.16s/it]
  5%|▍         | 20/401 [00:27<12:22,  1.95s/it]
  5%|▌         | 21/401 [00:27<09:21,  1.48s/it]
  5%|▌         | 22/401 [00:31<13:58,  2.21s/it]
  6%|▌         | 23/401 [00:33<12:56,  2.05s/it]
  6%|▌         | 24/401 [00:37<16:48,  2.68s/it]
  6%|▌         | 25/401 [00:37<12:03,  1.92s/it]
  6%|▋         | 26/401 [00:37<08:51,  1.42s/it]
  7%|▋         | 27/401 [00:41<13:53,  2.23s/it]
  7%|▋         | 28/401 [00:42<10:15,  1.65s/it]
  7%|▋         | 29/401 [00:42<07:22,  1.19s/it]
  7%|▋         | 30/401 [00:43<07:35,  1.23s/it]
  8%|▊         | 31/401 [00:44<07:22,  1.20s/it]
  8%|▊         | 32/401 [00:44<05:29,  1.12it/s]
  8%|▊         | 33/401 [00:45<05:55,  1.04it/s]
  8%|▊         | 34/401 [00:47<07:45,  1.27s/it]
  9%|▊         | 35/401 [00:48<05:36,  1.09it/s]
  9%|▉         | 37/401 [00:48<03:35,  1.69it/s]
 10%|▉         | 39/401 [00:49<03:38,  1.66it/s]
 10%|█         | 41/401 [00:51<03:50,  1.56it/s]
 10%|█         | 42/401 [00:51<03:21,  1.78it/s]
 11%|█         | 43/401 [00:51<02:58,  2.00it/s]
 11%|█         | 44/401 [00:52<03:39,  1.63it/s]
 11%|█▏        | 46/401 [00:53<02:44,  2.16it/s]
 12%|█▏        | 47/401 [00:55<04:49,  1.22it/s]
 12%|█▏        | 48/401 [00:55<04:14,  1.39it/s]
 12%|█▏        | 49/401 [00:55<03:41,  1.59it/s]
 12%|█▏        | 50/401 [00:56<03:55,  1.49it/s]
 13%|█▎        | 51/401 [00:57<03:29,  1.67it/s]
 13%|█▎        | 53/401 [00:57<02:37,  2.21it/s]
 13%|█▎        | 54/401 [00:57<02:14,  2.58it/s]
 14%|█▎        | 55/401 [01:00<05:42,  1.01it/s]
 14%|█▍        | 56/401 [01:01<06:11,  1.08s/it]
 14%|█▍        | 57/401 [01:02<05:59,  1.04s/it]
 14%|█▍        | 58/401 [01:03<04:27,  1.28it/s]
 15%|█▍        | 59/401 [01:05<07:39,  1.34s/it]
 15%|█▍        | 60/401 [01:06<06:30,  1.15s/it]
 15%|█▌        | 61/401 [01:06<05:18,  1.07it/s]
 15%|█▌        | 62/401 [01:07<04:14,  1.33it/s]
 16%|█▌        | 63/401 [01:07<03:47,  1.48it/s]
 16%|█▌        | 64/401 [01:08<03:27,  1.63it/s]
 16%|█▌        | 65/401 [01:08<03:14,  1.73it/s]
 16%|█▋        | 66/401 [01:09<04:25,  1.26it/s]
 17%|█▋        | 67/401 [01:10<03:32,  1.57it/s]
 17%|█▋        | 68/401 [01:10<02:49,  1.97it/s]
 17%|█▋        | 69/401 [01:10<02:08,  2.58it/s]
 17%|█▋        | 70/401 [01:11<03:16,  1.68it/s]
 18%|█▊        | 71/401 [01:11<02:51,  1.92it/s]
 18%|█▊        | 72/401 [01:12<03:36,  1.52it/s]
 18%|█▊        | 73/401 [01:13<03:02,  1.79it/s]
 18%|█▊        | 74/401 [01:14<03:42,  1.47it/s]
 19%|█▊        | 75/401 [01:15<04:11,  1.30it/s]
 19%|█▉        | 76/401 [01:16<04:29,  1.21it/s]
 19%|█▉        | 77/401 [01:17<04:43,  1.14it/s]
 19%|█▉        | 78/401 [01:17<03:32,  1.52it/s]
 20%|█▉        | 79/401 [01:18<04:01,  1.33it/s]
 20%|█▉        | 80/401 [01:19<04:21,  1.23it/s]
 20%|██        | 81/401 [01:19<04:15,  1.25it/s]
 20%|██        | 82/401 [01:20<04:31,  1.18it/s]
 21%|██        | 83/401 [01:21<04:43,  1.12it/s]
 21%|██        | 84/401 [01:22<04:50,  1.09it/s]
 21%|██        | 85/401 [01:23<03:58,  1.33it/s]
 21%|██▏       | 86/401 [01:24<04:17,  1.22it/s]
 22%|██▏       | 87/401 [01:26<07:19,  1.40s/it]
 22%|██▏       | 88/401 [01:27<06:38,  1.27s/it]
 22%|██▏       | 89/401 [01:29<06:40,  1.28s/it]
 22%|██▏       | 90/401 [01:29<04:58,  1.04it/s]
 23%|██▎       | 91/401 [01:29<03:42,  1.39it/s]
 23%|██▎       | 92/401 [01:30<04:05,  1.26it/s]
 23%|██▎       | 93/401 [01:30<03:10,  1.62it/s]
 23%|██▎       | 94/401 [01:32<05:16,  1.03s/it]
 24%|██▎       | 95/401 [01:34<05:39,  1.11s/it]
 24%|██▍       | 96/401 [01:35<05:26,  1.07s/it]
 24%|██▍       | 97/401 [01:36<05:16,  1.04s/it]
 24%|██▍       | 98/401 [01:36<04:16,  1.18it/s]
 25%|██▍       | 99/401 [01:36<03:14,  1.55it/s]
 25%|██▍       | 100/401 [01:36<02:41,  1.86it/s]
 25%|██▌       | 101/401 [01:37<03:02,  1.64it/s]
 25%|██▌       | 102/401 [01:37<02:18,  2.15it/s]
 26%|██▌       | 103/401 [01:38<02:14,  2.22it/s]
 26%|██▌       | 104/401 [01:39<02:59,  1.65it/s]
 26%|██▌       | 105/401 [01:40<03:31,  1.40it/s]
 27%|██▋       | 107/401 [01:40<02:30,  1.95it/s]
 27%|██▋       | 108/401 [01:40<02:03,  2.36it/s]
 27%|██▋       | 109/401 [01:41<02:45,  1.77it/s]
 27%|██▋       | 110/401 [01:41<02:08,  2.27it/s]
 28%|██▊       | 111/401 [01:42<02:49,  1.71it/s]
 28%|██▊       | 112/401 [01:43<03:20,  1.44it/s]
 28%|██▊       | 113/401 [01:44<03:16,  1.46it/s]
 28%|██▊       | 114/401 [01:45<03:09,  1.51it/s]
 29%|██▊       | 115/401 [01:45<02:33,  1.86it/s]
 29%|██▉       | 116/401 [01:46<03:08,  1.51it/s]
 29%|██▉       | 117/401 [01:46<02:52,  1.64it/s]
 29%|██▉       | 118/401 [01:47<02:17,  2.06it/s]
 30%|██▉       | 119/401 [01:48<03:16,  1.44it/s]
 30%|██▉       | 120/401 [01:48<02:33,  1.83it/s]
 30%|███       | 121/401 [01:48<02:04,  2.24it/s]
 30%|███       | 122/401 [01:49<02:17,  2.02it/s]
 31%|███       | 123/401 [01:50<03:24,  1.36it/s]
 31%|███       | 124/401 [01:51<04:10,  1.10it/s]
 31%|███       | 125/401 [01:53<04:43,  1.03s/it]
 31%|███▏      | 126/401 [01:53<03:36,  1.27it/s]
 32%|███▏      | 127/401 [01:54<04:18,  1.06it/s]
 32%|███▏      | 128/401 [01:55<04:47,  1.05s/it]
 32%|███▏      | 129/401 [01:56<04:38,  1.02s/it]
 32%|███▏      | 130/401 [01:58<05:00,  1.11s/it]
 33%|███▎      | 131/401 [01:59<04:32,  1.01s/it]
 33%|███▎      | 132/401 [01:59<03:31,  1.27it/s]
 33%|███▎      | 133/401 [02:02<06:08,  1.38s/it]
 33%|███▎      | 134/401 [02:03<05:35,  1.26s/it]
 34%|███▎      | 135/401 [02:03<05:13,  1.18s/it]
 34%|███▍      | 136/401 [02:04<04:55,  1.12s/it]
 34%|███▍      | 137/401 [02:05<03:38,  1.21it/s]
 34%|███▍      | 138/401 [02:06<03:48,  1.15it/s]
 35%|███▍      | 139/401 [02:06<03:39,  1.19it/s]
 35%|███▍      | 140/401 [02:07<02:50,  1.53it/s]
 35%|███▌      | 141/401 [02:08<04:14,  1.02it/s]
 35%|███▌      | 142/401 [02:10<04:39,  1.08s/it]
 36%|███▌      | 143/401 [02:10<03:47,  1.13it/s]
 36%|███▌      | 144/401 [02:11<03:53,  1.10it/s]
 36%|███▌      | 145/401 [02:11<03:03,  1.39it/s]
 36%|███▋      | 146/401 [02:12<03:22,  1.26it/s]
 37%|███▋      | 147/401 [02:13<03:34,  1.18it/s]
 37%|███▋      | 148/401 [02:14<03:00,  1.40it/s]
 37%|███▋      | 149/401 [02:15<03:17,  1.27it/s]
 37%|███▋      | 150/401 [02:16<03:31,  1.19it/s]
 38%|███▊      | 151/401 [02:17<04:06,  1.02it/s]
 38%|███▊      | 152/401 [02:18<04:03,  1.02it/s]
 38%|███▊      | 153/401 [02:18<03:22,  1.23it/s]
 38%|███▊      | 154/401 [02:19<02:56,  1.40it/s]
 39%|███▊      | 155/401 [02:20<03:38,  1.12it/s]
 39%|███▉      | 156/401 [02:21<04:09,  1.02s/it]
 39%|███▉      | 157/401 [02:23<04:29,  1.10s/it]
 40%|███▉      | 159/401 [02:24<03:19,  1.21it/s]
 40%|███▉      | 160/401 [02:24<02:53,  1.39it/s]
 40%|████      | 162/401 [02:25<02:42,  1.47it/s]
 41%|████      | 163/401 [02:26<02:49,  1.40it/s]
 41%|████      | 164/401 [02:27<02:52,  1.37it/s]
 41%|████      | 165/401 [02:28<03:07,  1.26it/s]
 41%|████▏     | 166/401 [02:29<03:18,  1.19it/s]
 42%|████▏     | 167/401 [02:29<02:32,  1.54it/s]
 42%|████▏     | 168/401 [02:30<02:52,  1.35it/s]
 42%|████▏     | 169/401 [02:31<03:06,  1.25it/s]
 42%|████▏     | 170/401 [02:32<03:16,  1.17it/s]
 43%|████▎     | 171/401 [02:33<03:23,  1.13it/s]
 43%|████▎     | 172/401 [02:33<02:52,  1.33it/s]
 43%|████▎     | 173/401 [02:34<03:07,  1.22it/s]
 43%|████▎     | 174/401 [02:35<03:18,  1.14it/s]
 44%|████▎     | 175/401 [02:36<03:23,  1.11it/s]
 44%|████▍     | 176/401 [02:37<03:27,  1.08it/s]
 44%|████▍     | 177/401 [02:39<03:53,  1.04s/it]
 44%|████▍     | 178/401 [02:40<03:46,  1.02s/it]
 45%|████▍     | 179/401 [02:40<03:41,  1.00it/s]
 45%|████▍     | 180/401 [02:41<03:39,  1.01it/s]
 45%|████▌     | 181/401 [02:42<03:36,  1.01it/s]
 45%|████▌     | 182/401 [02:43<03:35,  1.02it/s]
 46%|████▌     | 183/401 [02:47<06:26,  1.77s/it]
 46%|████▌     | 184/401 [02:51<08:21,  2.31s/it]
 46%|████▌     | 185/401 [02:54<09:45,  2.71s/it]
 46%|████▋     | 186/401 [02:58<10:41,  2.98s/it]
 47%|████▋     | 187/401 [03:01<11:19,  3.18s/it]
 47%|████▋     | 188/401 [03:02<08:07,  2.29s/it]
 47%|████▋     | 189/401 [03:05<09:33,  2.71s/it]
 47%|████▋     | 190/401 [03:09<10:28,  2.98s/it]
 48%|████▊     | 191/401 [03:11<09:11,  2.63s/it]
 48%|████▊     | 192/401 [03:13<08:17,  2.38s/it]
 48%|████▊     | 193/401 [03:13<05:58,  1.72s/it]
 48%|████▊     | 194/401 [03:13<04:26,  1.29s/it]
 49%|████▊     | 195/401 [03:17<06:50,  1.99s/it]
 49%|████▉     | 196/401 [03:18<06:35,  1.93s/it]
 49%|████▉     | 197/401 [03:21<06:39,  1.96s/it]
 49%|████▉     | 198/401 [03:24<08:16,  2.45s/it]
 50%|████▉     | 199/401 [03:26<07:35,  2.26s/it]
 50%|████▉     | 200/401 [03:28<07:06,  2.12s/it]
 50%|█████     | 201/401 [03:30<06:47,  2.04s/it]
 50%|█████     | 202/401 [03:31<06:31,  1.97s/it]
 51%|█████     | 203/401 [03:33<06:21,  1.93s/it]
 51%|█████     | 204/401 [03:35<06:12,  1.89s/it]
 51%|█████     | 205/401 [03:35<04:27,  1.37s/it]
 51%|█████▏    | 206/401 [03:37<04:53,  1.50s/it]
 52%|█████▏    | 207/401 [03:39<05:11,  1.61s/it]
 52%|█████▏    | 208/401 [03:41<05:20,  1.66s/it]
 52%|█████▏    | 209/401 [03:41<04:06,  1.28s/it]
 52%|█████▏    | 210/401 [03:43<04:35,  1.44s/it]
 53%|█████▎    | 211/401 [03:44<03:56,  1.24s/it]
 53%|█████▎    | 212/401 [03:44<03:17,  1.04s/it]
 53%|█████▎    | 213/401 [03:45<03:01,  1.03it/s]
 53%|█████▎    | 214/401 [03:47<03:48,  1.22s/it]
 54%|█████▎    | 215/401 [03:47<03:13,  1.04s/it]
 54%|█████▍    | 216/401 [03:49<03:27,  1.12s/it]
 54%|█████▍    | 218/401 [03:49<02:19,  1.31it/s]
 55%|█████▍    | 219/401 [03:50<02:12,  1.37it/s]
 55%|█████▍    | 220/401 [03:51<02:06,  1.43it/s]
 55%|█████▌    | 221/401 [03:53<03:45,  1.25s/it]
 55%|█████▌    | 222/401 [03:54<03:12,  1.08s/it]
 56%|█████▌    | 223/401 [03:54<02:23,  1.24it/s]
 56%|█████▌    | 224/401 [03:54<01:59,  1.48it/s]
 56%|█████▌    | 225/401 [03:55<01:31,  1.93it/s]
 56%|█████▋    | 226/401 [03:55<01:10,  2.48it/s]
 57%|█████▋    | 227/401 [03:55<01:00,  2.89it/s]
 57%|█████▋    | 228/401 [03:56<01:16,  2.27it/s]
 57%|█████▋    | 229/401 [03:56<01:02,  2.76it/s]
 57%|█████▋    | 230/401 [03:57<02:04,  1.37it/s]
 58%|█████▊    | 231/401 [03:58<01:35,  1.78it/s]
 58%|█████▊    | 232/401 [03:58<01:35,  1.77it/s]
 58%|█████▊    | 234/401 [04:02<03:13,  1.16s/it]
 59%|█████▊    | 235/401 [04:02<02:38,  1.05it/s]
 59%|█████▉    | 236/401 [04:02<02:02,  1.35it/s]
 59%|█████▉    | 237/401 [04:03<01:53,  1.44it/s]
 59%|█████▉    | 238/401 [04:03<01:42,  1.59it/s]
 60%|█████▉    | 239/401 [04:04<01:41,  1.60it/s]
 60%|█████▉    | 240/401 [04:04<01:20,  2.00it/s]
 60%|██████    | 242/401 [04:04<00:52,  3.04it/s]
 61%|██████    | 243/401 [04:05<01:08,  2.31it/s]
 61%|██████    | 244/401 [04:06<01:05,  2.39it/s]
 61%|██████    | 245/401 [04:06<00:52,  2.94it/s]
 61%|██████▏   | 246/401 [04:06<01:04,  2.40it/s]
 62%|██████▏   | 247/401 [04:07<01:13,  2.10it/s]
 62%|██████▏   | 248/401 [04:07<00:56,  2.71it/s]
 62%|██████▏   | 249/401 [04:08<01:43,  1.46it/s]
 63%|██████▎   | 251/401 [04:09<01:07,  2.22it/s]
 63%|██████▎   | 252/401 [04:09<00:55,  2.70it/s]
 63%|██████▎   | 254/401 [04:09<00:43,  3.40it/s]
 64%|██████▎   | 255/401 [04:11<01:27,  1.66it/s]
 64%|██████▍   | 256/401 [04:11<01:16,  1.88it/s]
 64%|██████▍   | 257/401 [04:12<01:09,  2.09it/s]
 64%|██████▍   | 258/401 [04:12<01:03,  2.27it/s]
 65%|██████▍   | 259/401 [04:12<00:57,  2.46it/s]
 65%|██████▌   | 261/401 [04:13<00:53,  2.61it/s]
 65%|██████▌   | 262/401 [04:13<00:51,  2.72it/s]
 66%|██████▌   | 263/401 [04:14<00:49,  2.79it/s]
 66%|██████▌   | 264/401 [04:14<00:43,  3.17it/s]
 66%|██████▌   | 265/401 [04:14<00:43,  3.13it/s]
 66%|██████▋   | 266/401 [04:14<00:43,  3.09it/s]
 67%|██████▋   | 267/401 [04:15<00:37,  3.62it/s]
 67%|██████▋   | 268/401 [04:15<00:33,  4.01it/s]
 67%|██████▋   | 269/401 [04:15<00:45,  2.89it/s]
 67%|██████▋   | 270/401 [04:16<00:55,  2.38it/s]
 68%|██████▊   | 272/401 [04:16<00:35,  3.69it/s]
 68%|██████▊   | 273/401 [04:16<00:30,  4.15it/s]
 68%|██████▊   | 274/401 [04:16<00:26,  4.78it/s]
 69%|██████▊   | 275/401 [04:17<00:23,  5.34it/s]
 69%|██████▉   | 276/401 [04:17<00:22,  5.60it/s]
 69%|██████▉   | 277/401 [04:17<00:34,  3.65it/s]
 69%|██████▉   | 278/401 [04:17<00:29,  4.21it/s]
 70%|██████▉   | 279/401 [04:17<00:24,  4.90it/s]
 70%|██████▉   | 280/401 [04:18<00:31,  3.89it/s]
 70%|███████   | 281/401 [04:18<00:26,  4.56it/s]
 70%|███████   | 282/401 [04:18<00:22,  5.33it/s]
 71%|███████   | 283/401 [04:19<00:35,  3.35it/s]
 71%|███████   | 284/401 [04:19<00:35,  3.30it/s]
 71%|███████   | 285/401 [04:19<00:31,  3.65it/s]
 71%|███████▏  | 286/401 [04:20<00:33,  3.47it/s]
 72%|███████▏  | 287/401 [04:20<00:33,  3.38it/s]
 72%|███████▏  | 288/401 [04:20<00:28,  4.00it/s]
 72%|███████▏  | 289/401 [04:20<00:26,  4.20it/s]
 73%|███████▎  | 291/401 [04:21<00:26,  4.22it/s]
 73%|███████▎  | 292/401 [04:22<00:58,  1.87it/s]
 73%|███████▎  | 293/401 [04:23<01:09,  1.55it/s]
 73%|███████▎  | 294/401 [04:26<02:18,  1.30s/it]
 74%|███████▎  | 295/401 [04:26<01:42,  1.03it/s]
 74%|███████▍  | 296/401 [04:27<01:40,  1.04it/s]
 74%|███████▍  | 297/401 [04:27<01:15,  1.37it/s]
 74%|███████▍  | 298/401 [04:28<01:04,  1.61it/s]
 75%|███████▍  | 299/401 [04:29<01:28,  1.16it/s]
 75%|███████▍  | 300/401 [04:30<01:26,  1.17it/s]
 75%|███████▌  | 301/401 [04:30<01:04,  1.55it/s]
 75%|███████▌  | 302/401 [04:30<00:48,  2.05it/s]
 76%|███████▌  | 303/401 [04:31<00:58,  1.68it/s]
 76%|███████▌  | 304/401 [04:32<00:59,  1.62it/s]
 76%|███████▌  | 305/401 [04:33<01:13,  1.31it/s]
 76%|███████▋  | 306/401 [04:34<01:14,  1.28it/s]
 77%|███████▋  | 307/401 [04:35<01:18,  1.19it/s]
 77%|███████▋  | 308/401 [04:35<01:06,  1.39it/s]
 77%|███████▋  | 309/401 [04:36<01:03,  1.45it/s]
 77%|███████▋  | 310/401 [04:36<00:54,  1.66it/s]
 78%|███████▊  | 311/401 [04:37<01:00,  1.49it/s]
 78%|███████▊  | 312/401 [04:37<00:51,  1.71it/s]
 78%|███████▊  | 313/401 [04:37<00:40,  2.16it/s]
 78%|███████▊  | 314/401 [04:38<00:38,  2.24it/s]
 79%|███████▊  | 315/401 [04:38<00:32,  2.61it/s]
 79%|███████▉  | 316/401 [04:38<00:27,  3.15it/s]
 79%|███████▉  | 317/401 [04:40<00:54,  1.53it/s]
 79%|███████▉  | 318/401 [04:40<00:50,  1.64it/s]
 80%|███████▉  | 319/401 [04:41<00:41,  1.97it/s]
 80%|███████▉  | 320/401 [04:41<00:40,  2.01it/s]
 80%|████████  | 321/401 [04:41<00:39,  2.05it/s]
 80%|████████  | 322/401 [04:42<00:38,  2.06it/s]
 81%|████████  | 323/401 [04:45<01:46,  1.36s/it]
 81%|████████  | 324/401 [04:49<02:31,  1.96s/it]
 81%|████████  | 325/401 [04:52<03:01,  2.39s/it]
 81%|████████▏ | 326/401 [04:53<02:26,  1.96s/it]
 82%|████████▏ | 327/401 [04:54<02:00,  1.63s/it]
 82%|████████▏ | 328/401 [04:54<01:34,  1.29s/it]
 82%|████████▏ | 329/401 [04:56<01:40,  1.40s/it]
 82%|████████▏ | 330/401 [04:59<02:22,  2.01s/it]
 83%|████████▎ | 331/401 [05:00<01:58,  1.70s/it]
 83%|████████▎ | 332/401 [05:04<02:33,  2.22s/it]
 83%|████████▎ | 333/401 [05:07<02:54,  2.57s/it]
 83%|████████▎ | 334/401 [05:08<02:07,  1.90s/it]
 84%|████████▎ | 335/401 [05:11<02:35,  2.35s/it]
 84%|████████▍ | 336/401 [05:14<02:53,  2.67s/it]
 84%|████████▍ | 337/401 [05:16<02:21,  2.20s/it]
 84%|████████▍ | 338/401 [05:16<01:47,  1.70s/it]
 85%|████████▍ | 339/401 [05:17<01:24,  1.36s/it]
 85%|████████▍ | 340/401 [05:17<01:00,  1.00it/s]
 85%|████████▌ | 341/401 [05:17<00:43,  1.37it/s]
 85%|████████▌ | 342/401 [05:17<00:35,  1.65it/s]
 86%|████████▌ | 343/401 [05:18<00:33,  1.73it/s]
 86%|████████▌ | 344/401 [05:18<00:28,  2.00it/s]
 86%|████████▌ | 345/401 [05:20<00:44,  1.27it/s]
 86%|████████▋ | 346/401 [05:20<00:36,  1.49it/s]
 87%|████████▋ | 347/401 [05:20<00:31,  1.74it/s]
 87%|████████▋ | 348/401 [05:21<00:27,  1.89it/s]
 87%|████████▋ | 349/401 [05:21<00:23,  2.25it/s]
 87%|████████▋ | 350/401 [05:24<01:02,  1.23s/it]
 88%|████████▊ | 351/401 [05:27<01:34,  1.88s/it]
 88%|████████▊ | 352/401 [05:28<01:07,  1.38s/it]
 88%|████████▊ | 353/401 [05:31<01:37,  2.02s/it]
 89%|████████▊ | 355/401 [05:32<00:54,  1.19s/it]
 89%|████████▉ | 356/401 [05:35<01:14,  1.66s/it]
 89%|████████▉ | 357/401 [05:35<01:02,  1.41s/it]
 89%|████████▉ | 358/401 [05:37<00:57,  1.34s/it]
 90%|████████▉ | 359/401 [05:37<00:51,  1.23s/it]
 90%|████████▉ | 360/401 [05:38<00:47,  1.15s/it]
 90%|█████████ | 361/401 [05:39<00:38,  1.05it/s]
 90%|█████████ | 362/401 [05:39<00:29,  1.33it/s]
 91%|█████████ | 363/401 [05:39<00:23,  1.62it/s]
 91%|█████████ | 364/401 [05:40<00:18,  2.05it/s]
 91%|█████████ | 365/401 [05:41<00:30,  1.16it/s]
 91%|█████████▏| 366/401 [05:42<00:23,  1.49it/s]
 92%|█████████▏| 367/401 [05:42<00:21,  1.61it/s]
 92%|█████████▏| 368/401 [05:42<00:15,  2.13it/s]
 92%|█████████▏| 369/401 [05:42<00:13,  2.43it/s]
 92%|█████████▏| 370/401 [05:44<00:24,  1.25it/s]
 93%|█████████▎| 371/401 [05:46<00:32,  1.08s/it]
 93%|█████████▎| 372/401 [05:46<00:23,  1.25it/s]
 93%|█████████▎| 373/401 [05:48<00:30,  1.08s/it]
 93%|█████████▎| 374/401 [05:50<00:34,  1.28s/it]
 94%|█████████▎| 375/401 [05:51<00:36,  1.41s/it]
 94%|█████████▍| 376/401 [05:54<00:47,  1.91s/it]
 94%|█████████▍| 377/401 [05:55<00:35,  1.46s/it]
 94%|█████████▍| 378/401 [05:58<00:45,  1.97s/it]
 95%|█████████▍| 379/401 [06:01<00:52,  2.40s/it]
 95%|█████████▍| 380/401 [06:03<00:46,  2.20s/it]
 95%|█████████▌| 382/401 [06:06<00:36,  1.90s/it]
 96%|█████████▌| 383/401 [06:09<00:39,  2.20s/it]
 96%|█████████▌| 384/401 [06:12<00:38,  2.24s/it]
 96%|█████████▌| 385/401 [06:15<00:40,  2.56s/it]
 96%|█████████▋| 386/401 [06:16<00:31,  2.08s/it]
 97%|█████████▋| 387/401 [06:17<00:25,  1.86s/it]
 97%|█████████▋| 388/401 [06:18<00:21,  1.64s/it]
 97%|█████████▋| 389/401 [06:19<00:15,  1.31s/it]
 97%|█████████▋| 390/401 [06:19<00:11,  1.09s/it]
 98%|█████████▊| 391/401 [06:20<00:08,  1.20it/s]
 98%|█████████▊| 392/401 [06:21<00:08,  1.08it/s]
 98%|█████████▊| 393/401 [06:21<00:05,  1.41it/s]
 98%|█████████▊| 394/401 [06:21<00:04,  1.74it/s]
 99%|█████████▊| 395/401 [06:21<00:03,  1.99it/s]
 99%|█████████▉| 396/401 [06:25<00:07,  1.41s/it]
 99%|█████████▉| 397/401 [06:25<00:04,  1.07s/it]
 99%|█████████▉| 398/401 [06:29<00:05,  1.81s/it]
100%|█████████▉| 399/401 [06:32<00:04,  2.30s/it]
100%|█████████▉| 400/401 [06:32<00:01,  1.67s/it]
100%|██████████| 401/401 [06:33<00:00,  1.21s/it]
100%|██████████| 401/401 [06:33<00:00,  1.02it/s]
	Running baseline: ['python', 'baselines.py', '--model_addr', 'Qwen/Qwen2.5-7B-Instruct', '--inputs_addr', 'data/processed/TEMP_ae_processed_test.json', '--output_addr', 'data/out/rag/full_profile/ae_rag_full_profile_test_2_output.json', '--temperature', '0.0', '--top_p', '0.95', '--max_tokens', '4096', '--num_generated_outputs', '1', '--num_contexts', '2', '--max_retries', '5', '--cache_dir', '/work/pi_hzamani_umass_edu/ozel_cache/', '--rag']
INFO 07-07 16:24:07 config.py:510] This model supports multiple tasks: {'score', 'embed', 'generate', 'classify', 'reward'}. Defaulting to 'generate'.
INFO 07-07 16:24:07 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-7B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-7B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768, download_dir='/work/pi_hzamani_umass_edu/ozel_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-7B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-07 16:24:09 selector.py:120] Using Flash Attention backend.
INFO 07-07 16:24:09 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-7B-Instruct...
INFO 07-07 16:24:09 weight_utils.py:251] Using model weights format ['*.safetensors']

Loading safetensors checkpoint shards:   0% Completed | 0/4 [00:00<?, ?it/s]

Loading safetensors checkpoint shards:  25% Completed | 1/4 [00:00<00:02,  1.23it/s]

Loading safetensors checkpoint shards:  50% Completed | 2/4 [00:01<00:01,  1.16it/s]

Loading safetensors checkpoint shards:  75% Completed | 3/4 [00:02<00:00,  1.18it/s]

Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:03<00:00,  1.22it/s]

Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:03<00:00,  1.21it/s]

INFO 07-07 16:24:13 model_runner.py:1099] Loading model weights took 14.2487 GB
INFO 07-07 16:24:15 worker.py:241] Memory profiling takes 2.10 seconds
INFO 07-07 16:24:15 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.90) = 71.33GiB
INFO 07-07 16:24:15 worker.py:241] model weights take 14.25GiB; non_torch_memory takes 0.14GiB; PyTorch activation peak memory takes 4.35GiB; the rest of the memory reserved for KV Cache is 52.59GiB.
INFO 07-07 16:24:15 gpu_executor.py:76] # GPU blocks: 61542, # CPU blocks: 4681
INFO 07-07 16:24:15 gpu_executor.py:80] Maximum concurrency for 32768 tokens per request: 30.05x
INFO 07-07 16:24:18 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.

Capturing CUDA graph shapes:   0%|          | 0/35 [00:00<?, ?it/s]
Capturing CUDA graph shapes:   3%|▎         | 1/35 [00:00<00:10,  3.13it/s]
Capturing CUDA graph shapes:   6%|▌         | 2/35 [00:00<00:09,  3.37it/s]
Capturing CUDA graph shapes:   9%|▊         | 3/35 [00:00<00:09,  3.24it/s]
Capturing CUDA graph shapes:  11%|█▏        | 4/35 [00:01<00:09,  3.29it/s]
Capturing CUDA graph shapes:  14%|█▍        | 5/35 [00:01<00:08,  3.40it/s]
Capturing CUDA graph shapes:  17%|█▋        | 6/35 [00:01<00:08,  3.47it/s]
Capturing CUDA graph shapes:  20%|██        | 7/35 [00:02<00:08,  3.40it/s]
Capturing CUDA graph shapes:  23%|██▎       | 8/35 [00:02<00:07,  3.44it/s]
Capturing CUDA graph shapes:  26%|██▌       | 9/35 [00:02<00:07,  3.36it/s]
Capturing CUDA graph shapes:  29%|██▊       | 10/35 [00:02<00:07,  3.33it/s]
Capturing CUDA graph shapes:  31%|███▏      | 11/35 [00:03<00:07,  3.41it/s]
Capturing CUDA graph shapes:  34%|███▍      | 12/35 [00:03<00:06,  3.47it/s]
Capturing CUDA graph shapes:  37%|███▋      | 13/35 [00:03<00:06,  3.53it/s]
Capturing CUDA graph shapes:  40%|████      | 14/35 [00:04<00:06,  3.41it/s]
Capturing CUDA graph shapes:  43%|████▎     | 15/35 [00:04<00:05,  3.47it/s]
Capturing CUDA graph shapes:  46%|████▌     | 16/35 [00:04<00:05,  3.53it/s]
Capturing CUDA graph shapes:  49%|████▊     | 17/35 [00:04<00:05,  3.59it/s]
Capturing CUDA graph shapes:  51%|█████▏    | 18/35 [00:05<00:04,  3.53it/s]
Capturing CUDA graph shapes:  54%|█████▍    | 19/35 [00:05<00:04,  3.57it/s]
Capturing CUDA graph shapes:  57%|█████▋    | 20/35 [00:05<00:04,  3.63it/s]
Capturing CUDA graph shapes:  60%|██████    | 21/35 [00:06<00:03,  3.68it/s]
Capturing CUDA graph shapes:  63%|██████▎   | 22/35 [00:06<00:03,  3.71it/s]
Capturing CUDA graph shapes:  66%|██████▌   | 23/35 [00:06<00:03,  3.61it/s]
Capturing CUDA graph shapes:  69%|██████▊   | 24/35 [00:06<00:03,  3.62it/s]
Capturing CUDA graph shapes:  71%|███████▏  | 25/35 [00:07<00:02,  3.68it/s]
Capturing CUDA graph shapes:  74%|███████▍  | 26/35 [00:07<00:02,  3.71it/s]
Capturing CUDA graph shapes:  77%|███████▋  | 27/35 [00:07<00:02,  3.76it/s]
Capturing CUDA graph shapes:  80%|████████  | 28/35 [00:07<00:01,  3.77it/s]
Capturing CUDA graph shapes:  83%|████████▎ | 29/35 [00:08<00:01,  3.81it/s]
Capturing CUDA graph shapes:  86%|████████▌ | 30/35 [00:08<00:01,  3.52it/s]
Capturing CUDA graph shapes:  89%|████████▊ | 31/35 [00:08<00:01,  3.56it/s]
Capturing CUDA graph shapes:  91%|█████████▏| 32/35 [00:09<00:00,  3.65it/s]
Capturing CUDA graph shapes:  94%|█████████▍| 33/35 [00:09<00:00,  3.64it/s]
Capturing CUDA graph shapes:  97%|█████████▋| 34/35 [00:09<00:00,  3.70it/s]
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:09<00:00,  3.72it/s]
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:09<00:00,  3.56it/s]
INFO 07-07 16:24:28 model_runner.py:1535] Graph capturing finished in 10 secs, took 0.22 GiB
INFO 07-07 16:24:28 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 15.07 seconds
RAG ON
EXAMPLE PROMPT
<|im_start|>system
You are a helpful assistant designed to generate personalized responses to user questions. Your task is to answer a user's question from a post in a personalized way by considering this user's past post questions and detailed descriptions of these questions.
# Your input:
    - The user's current question from a post.
    - The user's past post questions and detailed descriptions of these questions.
# Your task: Answer the user's current question in a personalized way by considering this user's past post questions and detailed descriptions of these questions, to learn about the user's preferences.
# Your output: You should generate personalized answer to the user's current question by considering this user's past post questions and detailed descriptions of these questions to learn about user's preferences. Your output should be a valid json object in ```json ``` block that contains the following fields:
    - personalized_answer: contains the personalized answer to the user's current question considering the this user's past post questions and detailed descriptions of these questions to learn about user's preferences.
<|im_end|>
<|im_start|>user

# Past post questions and detailed descriptions of these questions:
Writing rule which states that two causes for the same superpower is bad writing I've read somewhere that there is this writing rule stating that, for some superpower, it would be less believable if two completely different settings are present in order to obtain the same superpower. In the article, I remember it mentioned in the movie Spiderman (which I've not watched), the protagonist and another character gain the power through different means.What's this rule and does it have a name?

Is 'Sold Count' a good term I am writing a technical document, and in it I want to refer to the number of units sold for each product. I want to make it concise, and 'sold count' comes to mind. Does this term sound right? Are there better alternatives?
# Current post question:
Are the two music notes a reference?
<|im_end|>
<|im_start|>assistant

<|im_start|>system
You are a helpful assistant designed to generate personalized responses to user questions. Your task is to answer a user's question from a post in a personalized way by considering this user's past post questions and detailed descriptions of these questions.
# Your input:
    - The user's current question from a post.
    - The user's past post questions and detailed descriptions of these questions.
# Your task: Answer the user's current question in a personalized way by considering this user's past post questions and detailed descriptions of these questions, to learn about the user's preferences.
# Your output: You should generate personalized answer to the user's current question by considering this user's past post questions and detailed descriptions of these questions to learn about user's preferences. Your output should be a valid json object in ```json ``` block that contains the following fields:
    - personalized_answer: contains the personalized answer to the user's current question considering the this user's past post questions and detailed descriptions of these questions to learn about user's preferences.
<|im_end|>
<|im_start|>user

# Past post questions and detailed descriptions of these questions:
How to trick the reader into thinking they're following a redshirt instead of the protagonist? I'm currently planning a "magical girl" story, and I thought of an interesting way to start it, rather than launching straight into the backstory. It opens with a woman in her mid-thirties, complete with ponytail of death, walking through a city market while being stalked by a shadowy monster.What I want readers to expect is that the woman is either going to be killed by the monster, or saved from it in the nick of time by the heroine. What actually happens is that when the monster finally attacks, the woman transforms into a magical girl, beats the everloving crap out of the monster, and then destroys it with a magical laser beam. Surprise! She is the heroine.I want to try and preserve this surprise as best I can, and make the readers think they're following a redshirt or one-off character instead of the protagonist. Not referring to her by name until after the reveal will help, but it's probably not enough. What else can I do to achieve this?(I'm aware of answers on other questions to the effect of "don't trick your readers". In my case, this is supposed to be a pleasant surprise, so I feel like it's okay.)

How should my script refer to a character who's currently disguised as another character? I've recently resumed writing a series of scripts for an anime I've been planning. One of the characters has the ability to shape-shift, and there are several scenes in which she initially appears disguised as another character, before shape-shifting back into her normal self.So far, when writing these scenes, I've referred to the character using the name of the person she's disguised as, and only switched back to her real name after she transforms back again. However, the top answers to these questions suggest that I shouldn't do that; scripts are production documents, and it's imperative that the crew know exactly who's supposed to be in each scene, hence I should always refer to characters by their real names.But in the case of a character who's disguised as another character, how do I do this while also making it clear that they're pretending to be someone else right now?
# Current post question:
How come Neiru hasn't revived her sister yet?
<|im_end|>
<|im_start|>assistant

<|im_start|>system
You are a helpful assistant designed to generate personalized responses to user questions. Your task is to answer a user's question from a post in a personalized way by considering this user's past post questions and detailed descriptions of these questions.
# Your input:
    - The user's current question from a post.
    - The user's past post questions and detailed descriptions of these questions.
# Your task: Answer the user's current question in a personalized way by considering this user's past post questions and detailed descriptions of these questions, to learn about the user's preferences.
# Your output: You should generate personalized answer to the user's current question by considering this user's past post questions and detailed descriptions of these questions to learn about user's preferences. Your output should be a valid json object in ```json ``` block that contains the following fields:
    - personalized_answer: contains the personalized answer to the user's current question considering the this user's past post questions and detailed descriptions of these questions to learn about user's preferences.
<|im_end|>
<|im_start|>user

# Past post questions and detailed descriptions of these questions:
are what we translate as "adjectives", "nouns", etc, the same kind of words in no indo-european languages? This question comes from questions in japanese SE. Keiyōshi 形容詞 are translated as adjectives. Meishi 名詞 are translated as nouns. But are they really the same kind of words that we mean with nouns, adjectives, etc. in English? I've already found 3 examples that arises a lot of doubts in me if they are the same thing. The first is a japanese word that I can't remember right now but that I've seen used as a noun, adjective or verb. May be there are words like these in English or Spanish, but I'm not sure if they are the same. For example the word paddle can be a verb, a noun or an adjective in English. The second is japanese words that they see as a noun and that we see as adjectives. The word "next" for japaneses is a clear noun. They know that it can be used as an adjective, but when giving an example of when it is used as a noun (what it really is according to japanese), I got this "when is the next?" that is a sentence that could come in a conversation between 2 persons about events , and one of them ask the other "when is the next (event)?" . wouldnt it be for english speakers, still an adjective because it modifies an implicit noun (event)? And the third is the word "suki" and similar words, that they see as a verb and it's translated as "to like" but it is used next to the verb desu (to be) So my question is, are what we translate as adjectives, verbs, etc, from other non indoeuropean languages, really what we understand as verbs, adjectives, etc?

Did Maradona ever score a goal with his right foot? I was hearing one of Pele's declaration stating Maradona couldn't score goals with his right foot. I thought he was talking in general, but then I started to think about goals made by him with his right foot and I couldn't remember any. I made a little research about this and I couldn't find any goal scored by him with his right foot, even though I clearly didn't watch all 300+ goals he made in his career (I'm not sure if all of them were recorded on TV by the way).I also remembered he used to kick the ball to the center of the field with his left foot even when he was in the right side of the field, giving the pass with a "Rabona" instead of with his right foot, because he was too much of a left-footed player. So, did he ever score a goal with his right foot, or did he never score one this way?
# Current post question:
Was Saitama sweating with worry when he saw Garou in this scene?
<|im_end|>
<|im_start|>assistant

None

Processed prompts:   0%|          | 0/401 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts:   0%|          | 1/401 [00:12<1:24:00, 12.60s/it, est. speed input: 64.28 toks/s, output: 6.59 toks/s]
Processed prompts:   0%|          | 2/401 [00:13<36:59,  5.56s/it, est. speed input: 91.11 toks/s, output: 13.67 toks/s] 
Processed prompts:   1%|          | 3/401 [00:13<20:46,  3.13s/it, est. speed input: 119.31 toks/s, output: 21.07 toks/s]
Processed prompts:   1%|▏         | 6/401 [00:13<07:09,  1.09s/it, est. speed input: 231.32 toks/s, output: 43.66 toks/s]
Processed prompts:   2%|▏         | 8/401 [00:13<04:34,  1.43it/s, est. speed input: 287.15 toks/s, output: 58.49 toks/s]
Processed prompts:   2%|▏         | 10/401 [00:13<03:09,  2.07it/s, est. speed input: 370.30 toks/s, output: 73.16 toks/s]
Processed prompts:   3%|▎         | 12/401 [00:14<02:21,  2.76it/s, est. speed input: 440.27 toks/s, output: 87.36 toks/s]
Processed prompts:   3%|▎         | 14/401 [00:14<01:45,  3.68it/s, est. speed input: 494.75 toks/s, output: 102.01 toks/s]
Processed prompts:   4%|▍         | 16/401 [00:14<01:19,  4.86it/s, est. speed input: 549.92 toks/s, output: 116.98 toks/s]
Processed prompts:   4%|▍         | 18/401 [00:14<01:05,  5.84it/s, est. speed input: 640.49 toks/s, output: 131.32 toks/s]
Processed prompts:   6%|▌         | 25/401 [00:15<00:35, 10.50it/s, est. speed input: 951.30 toks/s, output: 183.49 toks/s]
Processed prompts:   8%|▊         | 31/401 [00:15<00:27, 13.32it/s, est. speed input: 1145.38 toks/s, output: 227.55 toks/s]
Processed prompts:   8%|▊         | 33/401 [00:15<00:27, 13.28it/s, est. speed input: 1197.91 toks/s, output: 241.21 toks/s]
Processed prompts:   9%|▊         | 35/401 [00:15<00:26, 13.56it/s, est. speed input: 1265.24 toks/s, output: 255.16 toks/s]
Processed prompts:   9%|▉         | 38/401 [00:15<00:24, 15.00it/s, est. speed input: 1387.72 toks/s, output: 276.83 toks/s]
Processed prompts:  10%|▉         | 40/401 [00:15<00:24, 14.46it/s, est. speed input: 1460.61 toks/s, output: 290.29 toks/s]
Processed prompts:  11%|█         | 44/401 [00:16<00:26, 13.44it/s, est. speed input: 1564.95 toks/s, output: 316.22 toks/s]
Processed prompts:  12%|█▏        | 49/401 [00:16<00:20, 17.29it/s, est. speed input: 1705.25 toks/s, output: 352.68 toks/s]
Processed prompts:  13%|█▎        | 51/401 [00:16<00:24, 14.40it/s, est. speed input: 1761.22 toks/s, output: 363.49 toks/s]
Processed prompts:  14%|█▎        | 55/401 [00:16<00:23, 14.54it/s, est. speed input: 1855.69 toks/s, output: 389.44 toks/s]
Processed prompts:  15%|█▍        | 60/401 [00:17<00:19, 17.81it/s, est. speed input: 1990.57 toks/s, output: 424.91 toks/s]
Processed prompts:  18%|█▊        | 71/401 [00:17<00:17, 19.34it/s, est. speed input: 2289.80 toks/s, output: 497.16 toks/s]
Processed prompts:  18%|█▊        | 74/401 [00:17<00:16, 19.24it/s, est. speed input: 2375.33 toks/s, output: 515.88 toks/s]
Processed prompts:  19%|█▉        | 77/401 [00:17<00:17, 18.02it/s, est. speed input: 2470.21 toks/s, output: 532.99 toks/s]
Processed prompts:  20%|█▉        | 80/401 [00:18<00:16, 19.14it/s, est. speed input: 2561.28 toks/s, output: 552.46 toks/s]
Processed prompts:  21%|██        | 83/401 [00:18<00:17, 18.30it/s, est. speed input: 2635.14 toks/s, output: 569.84 toks/s]
Processed prompts:  22%|██▏       | 90/401 [00:18<00:16, 18.64it/s, est. speed input: 2790.71 toks/s, output: 611.97 toks/s]
Processed prompts:  23%|██▎       | 94/401 [00:18<00:16, 18.08it/s, est. speed input: 2860.90 toks/s, output: 634.53 toks/s]
Processed prompts:  24%|██▍       | 97/401 [00:19<00:17, 17.70it/s, est. speed input: 2984.47 toks/s, output: 651.19 toks/s]
Processed prompts:  26%|██▌       | 103/401 [00:19<00:16, 18.18it/s, est. speed input: 3110.00 toks/s, output: 685.69 toks/s]
Processed prompts:  27%|██▋       | 108/401 [00:19<00:16, 17.58it/s, est. speed input: 3171.28 toks/s, output: 712.65 toks/s]
Processed prompts:  28%|██▊       | 113/401 [00:19<00:14, 19.59it/s, est. speed input: 3291.11 toks/s, output: 743.32 toks/s]
Processed prompts:  29%|██▉       | 116/401 [00:20<00:15, 17.90it/s, est. speed input: 3396.15 toks/s, output: 757.60 toks/s]
Processed prompts:  30%|██▉       | 120/401 [00:20<00:15, 18.40it/s, est. speed input: 3500.52 toks/s, output: 779.84 toks/s]
Processed prompts:  32%|███▏      | 128/401 [00:20<00:14, 19.11it/s, est. speed input: 3633.48 toks/s, output: 823.59 toks/s]
Processed prompts:  34%|███▎      | 135/401 [00:21<00:14, 18.22it/s, est. speed input: 3767.39 toks/s, output: 858.43 toks/s]
Processed prompts:  35%|███▌      | 141/401 [00:21<00:13, 18.82it/s, est. speed input: 3920.38 toks/s, output: 890.07 toks/s]
Processed prompts:  36%|███▌      | 143/401 [00:21<00:14, 17.95it/s, est. speed input: 3936.54 toks/s, output: 898.52 toks/s]
Processed prompts:  37%|███▋      | 148/401 [00:21<00:13, 19.39it/s, est. speed input: 4052.71 toks/s, output: 925.99 toks/s]
Processed prompts:  39%|███▉      | 157/401 [00:21<00:08, 28.95it/s, est. speed input: 4298.28 toks/s, output: 987.26 toks/s]
Processed prompts:  41%|████▏     | 166/401 [00:22<00:06, 38.19it/s, est. speed input: 4536.55 toks/s, output: 1049.25 toks/s]
Processed prompts:  44%|████▎     | 175/401 [00:22<00:04, 46.68it/s, est. speed input: 4798.05 toks/s, output: 1111.94 toks/s]
Processed prompts:  46%|████▌     | 183/401 [00:22<00:04, 52.15it/s, est. speed input: 4968.48 toks/s, output: 1167.60 toks/s]
Processed prompts:  48%|████▊     | 191/401 [00:22<00:03, 57.17it/s, est. speed input: 5188.57 toks/s, output: 1223.73 toks/s]
Processed prompts:  49%|████▉     | 198/401 [00:22<00:03, 59.07it/s, est. speed input: 5386.29 toks/s, output: 1272.89 toks/s]
Processed prompts:  52%|█████▏    | 209/401 [00:22<00:02, 70.62it/s, est. speed input: 5693.32 toks/s, output: 1354.39 toks/s]
Processed prompts:  55%|█████▍    | 220/401 [00:22<00:02, 80.52it/s, est. speed input: 6060.53 toks/s, output: 1436.56 toks/s]
Processed prompts:  57%|█████▋    | 229/401 [00:22<00:02, 65.68it/s, est. speed input: 6353.32 toks/s, output: 1497.70 toks/s]
Processed prompts:  59%|█████▉    | 237/401 [00:23<00:03, 50.57it/s, est. speed input: 6539.73 toks/s, output: 1548.31 toks/s]
Processed prompts:  62%|██████▏   | 248/401 [00:23<00:03, 50.54it/s, est. speed input: 6837.68 toks/s, output: 1618.49 toks/s]
Processed prompts:  63%|██████▎   | 254/401 [00:23<00:05, 25.96it/s, est. speed input: 6827.67 toks/s, output: 1624.70 toks/s]
Processed prompts:  65%|██████▍   | 259/401 [00:24<00:07, 18.96it/s, est. speed input: 6833.22 toks/s, output: 1621.43 toks/s]
Processed prompts:  66%|██████▌   | 263/401 [00:24<00:06, 20.06it/s, est. speed input: 6911.40 toks/s, output: 1635.35 toks/s]
Processed prompts:  67%|██████▋   | 267/401 [00:24<00:06, 21.95it/s, est. speed input: 6989.63 toks/s, output: 1648.11 toks/s]
Processed prompts:  68%|██████▊   | 271/401 [00:25<00:06, 21.33it/s, est. speed input: 7046.30 toks/s, output: 1654.07 toks/s]
Processed prompts:  69%|██████▉   | 278/401 [00:25<00:04, 28.39it/s, est. speed input: 7203.11 toks/s, output: 1685.88 toks/s]
Processed prompts:  70%|███████   | 282/401 [00:25<00:03, 30.40it/s, est. speed input: 7274.44 toks/s, output: 1700.90 toks/s]
Processed prompts:  72%|███████▏  | 287/401 [00:25<00:03, 32.73it/s, est. speed input: 7364.51 toks/s, output: 1719.82 toks/s]
Processed prompts:  73%|███████▎  | 292/401 [00:25<00:03, 34.82it/s, est. speed input: 7428.40 toks/s, output: 1739.61 toks/s]
Processed prompts:  74%|███████▍  | 298/401 [00:25<00:02, 38.79it/s, est. speed input: 7538.75 toks/s, output: 1764.38 toks/s]
Processed prompts:  76%|███████▌  | 305/401 [00:25<00:02, 38.25it/s, est. speed input: 7645.53 toks/s, output: 1793.21 toks/s]
Processed prompts:  78%|███████▊  | 312/401 [00:25<00:02, 43.76it/s, est. speed input: 7792.80 toks/s, output: 1827.51 toks/s]
Processed prompts:  80%|███████▉  | 320/401 [00:25<00:01, 50.74it/s, est. speed input: 7968.46 toks/s, output: 1868.02 toks/s]
Processed prompts:  82%|████████▏ | 330/401 [00:26<00:01, 61.45it/s, est. speed input: 8213.69 toks/s, output: 1922.68 toks/s]
Processed prompts:  84%|████████▍ | 337/401 [00:26<00:01, 63.16it/s, est. speed input: 8456.67 toks/s, output: 1959.31 toks/s]
Processed prompts:  87%|████████▋ | 348/401 [00:26<00:00, 68.75it/s, est. speed input: 8692.56 toks/s, output: 2022.27 toks/s]
Processed prompts:  90%|████████▉ | 360/401 [00:26<00:00, 79.66it/s, est. speed input: 8987.69 toks/s, output: 2096.79 toks/s]
Processed prompts:  93%|█████████▎| 371/401 [00:26<00:00, 73.28it/s, est. speed input: 9256.30 toks/s, output: 2164.34 toks/s]
Processed prompts:  95%|█████████▍| 379/401 [00:26<00:00, 58.12it/s, est. speed input: 9443.77 toks/s, output: 2210.52 toks/s]
Processed prompts:  96%|█████████▋| 386/401 [00:26<00:00, 60.57it/s, est. speed input: 9614.36 toks/s, output: 2257.95 toks/s]
Processed prompts:  98%|█████████▊| 393/401 [00:27<00:00, 49.60it/s, est. speed input: 9722.86 toks/s, output: 2300.03 toks/s]
Processed prompts: 100%|█████████▉| 399/401 [00:28<00:00, 13.44it/s, est. speed input: 9450.68 toks/s, output: 2245.79 toks/s]
Processed prompts: 100%|██████████| 401/401 [00:30<00:00, 13.33it/s, est. speed input: 9049.25 toks/s, output: 2169.08 toks/s]
{  "personalized_answer": "The formatting styles you see in Hebrew/Aramaic texts on Sefaria are often used to enhance readability and provide additional context. For example, the bold and big text (like <big><strong>ר' אהרן</strong></big>) is typically used to highlight names or important phrases. The small parenthesized sections (like <small>(תהלים ק\"ד, כ\"ד)</small>) are often references to other texts or sources. The quotes (like ' and ") are used to denote direct speech or specific references. The brackets and parentheses (like [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.] and (כֹּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.) are used to include additional information or notes. The italics and hyphens are used for emphasis and to separate words, respectively. While these modern formatting elements can be removed to make the text more natural, they do provide important context and are part of the original source material. If you want to remove them, you can do so, but it's important to understand that these elements are there for a reason. As for the font, the earliest Hebrew texts were written in the Paleo-Hebrew alphabet, which is a direct descendant of the Phoenician alphabet. Over time, this evolved into the Aramaic alphabet and eventually into the square script used in modern Hebrew. The font you see on Sefaria is likely the square script, which is the most common script used for Hebrew texts today. If you're interested in the original or earlier scripts, you might want to look into Paleo-Hebrew or Aramaic scripts."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:05<00:00,  5.01s/it, est. speed input: 653.02 toks/s, output: 81.63 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:05<00:00,  5.01s/it, est. speed input: 653.02 toks/s, output: 81.63 toks/s]
{  "personalized_answer": "The formatting styles you see in Hebrew/Aramaic texts from Sefaria are often used to enhance readability and provide additional context. For example, the bold and big text (like <big><strong>ר' אהרן</strong></big>) is typically used to highlight names or important phrases. The small parenthesized sections (like <small>(תהלים ק\"ד, כ\"ד)</small>) often indicate references to other texts or sources. The quotes (like ' and ") are used to denote direct speech or specific phrases. The brackets and parentheses (like [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.] and (כֹּל חָכְמָה מֵיהוָה וִעָמְוָה הִיא לְעוֹלָמִים) are used to include additional information or to clarify the text. The italics and hyphens are used for stylistic or editorial purposes. While these modern formatting elements can be removed or changed to make the text more natural, they do not represent the original text's script or font. The earliest Hebrew texts were written in the Paleo-Hebrew alphabet, which evolved into the modern Hebrew square script. The Samaritan script is a direct descendant of Paleo-Hebrew, and the Aramaic script developed later. The Torah, as we know it today, was likely written in the Paleo-Hebrew script, but over time, the square script became the standard. If you want to remove these modern elements, you can do so, but it's important to understand that they serve to clarify and enhance the text for modern readers."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.18s/it, est. speed input: 783.33 toks/s, output: 80.92 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.18s/it, est. speed input: 783.33 toks/s, output: 80.92 toks/s]
{  "personalized_answer": "The formatting styles you're seeing in Hebrew/Aramaic texts on Sefaria are primarily modern additions to make the texts more readable and accessible to contemporary readers. For example, the bold and big text (like <big><strong>ר' אהרן</strong></big>) is likely used to highlight names or important phrases. The small parenthesized sections (like <small>(תהלים ק\"ד, כ\"ד)</small>) and the brackets [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.] are used to provide references or additional information. The quotes (like ' and ") are modern additions to denote speech or quotations. The use of parentheses and brackets is often to include additional commentary or references. The hyphens between words are likely used for clarity or to separate words that might otherwise run together. The italics are used for emphasis or to denote foreign words or names. While these modern additions can be helpful, if you want to remove them to make the text more 'natural' and closer to the original, you can do so. However, it's important to note that some of these elements, like the references and commentary, are part of the scholarly tradition and can provide valuable context. If you want to remove them, you can use a text editor or script to strip out these elements, but be aware that you might lose some of the scholarly insights and context."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.60s/it, est. speed input: 711.59 toks/s, output: 81.12 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.60s/it, est. speed input: 711.59 toks/s, output: 81.12 toks/s]
{  "personalized_answer": "The formatting styles you're seeing in the Hebrew/Aramaic texts on Sefaria are modern additions that help with readability and provide context. The bold and italics are used to highlight specific names, phrases, or important sections. The large and small text sizes, such as <big><strong>ר' אהרן</strong></big>, are used to emphasize key figures or terms. Quotes, like ' and ", are used to denote speech or specific references. Parentheses and brackets, such as (תהלים ק\"ד, כ\"ד) and [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.], are used to provide additional information or references. Hyphens between words are used to clarify the meaning or pronunciation of certain terms. These modern additions are not part of the original texts and can be removed or changed to make the text more natural and closer to the original. For the earliest Hebrew texts, the script would have been Paleo-Hebrew, which is a direct descendant of the Phoenician alphabet. The Samaritan script and Aramaic script came later. The Torah, if written in its earliest form, would likely have been in Paleo-Hebrew. However, the exact script used for the Torah is a matter of tradition and interpretation, with some believing it to be Ktav Ashurith, the block script seen in modern Torah scrolls. To remove or change these modern additions, you can use text processing tools or scripts that identify and remove these formatting styles, making the text cleaner and more aligned with the original script."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.85s/it, est. speed input: 675.07 toks/s, output: 81.50 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.85s/it, est. speed input: 675.07 toks/s, output: 81.50 toks/s]
{  "personalized_answer": "The formatting styles you're seeing in Hebrew/Aramaic texts on Sefaria are modern additions meant to enhance readability and provide context. The bold and italics are used for emphasis, such as highlighting names or important phrases. The big text, like <big><strong>ר' אהרן</strong></big>, is often used to denote important figures or titles. The quotes, like ' and ", are used to indicate speech or quotations. The small parenthesized sections, like <small>(תהלים ק\"ד, כ\"ד)</small>, are references to other texts or passages. The brackets and parentheses, like [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.] and (כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.), are used to include additional information or citations. The hyphens between words are used for clarity, especially in cases where words run together. These elements are not part of the original texts and can be removed or modified to make the text more natural. As for the script of the earliest Hebrew texts, they were likely written in Paleo-Hebrew, which is a direct descendant of the Phoenician alphabet. The square script you see in modern Torah scrolls, known as Ktav Ashurith, is a later development that evolved from Aramaic script. So, while the original texts would have been written in Paleo-Hebrew, the script you see on Sefaria is a more modern adaptation."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:07<00:00,  7.43s/it, est. speed input: 440.21 toks/s, output: 82.88 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:07<00:00,  7.43s/it, est. speed input: 440.21 toks/s, output: 82.88 toks/s]
{  "personalized_answer": "The formatting styles you see in Hebrew/Aramaic texts from Sefaria are primarily there for readability and to provide context. The small parentheses and quotes, like 'הקדמה:' and <small>(תהלים ק\"ד, כ\"ד)</small>, are used to denote footnotes, references, or additional information. The bold text, such as <big><strong>ר' אהרן</strong></big>, highlights important names or terms. The brackets and parentheses, like [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.] and (בן אריאל), are used to indicate editorial notes, translations, or clarifications. The italics and hyphens are often used for stylistic or typographical reasons. While these elements can be seen as 'modern' or 'English' additions, they are not part of the original texts and can be removed or changed to make the text more natural. If you want a cleaner version of the text, you can strip out these formatting elements, keeping only the core text. For example, the original text without these modern additions would look more like: \n\nהקדמה: ואמו\"ר הצדיקים הקדושים, כי מן זמן התגלות הבעל שם טוב הקדוש התחיל התנוצצות המשיח, והענין בודאי הוא אמת לאמתו, על פי מה דאיתא בספר הקדוש תולדות יעקב יוסף פ' וישב רל\"ג ע\"א, ומובא לקמן בספר זה בפרשת לך אות ב', כי סוד המשיח הוא סוד הדעת, וע\"ש בהגה ג', וזה מובן על פי פשוטו גם כן, כי כן כתב הרמב\"ם בפרק ט' מהלכות תשובה הלכה ב', וזה לשונו, ומפני זה נתאוו כל ישראל נביאיהם וחכמיהם לימות המשיח וכו', לפי שבאותן הימים תרבה הדעה והחכמה והאמת, שנאמר (ישעיהו י\"א:ט׳) כי מלאה האם דעה את ה' וכו' ע\"ש, ולקמן פ' שמות אות ט"ז העתקתי מס' תולדות יעקב יוסף סוף פ' וישלח, שזה היה ענין גאולת מצרים, מה שנתגלה הדעת על ידי משה רבינו עליו השלום, ובגאולה העתידה יתגלה הדעת ביתר שאת ויתר עוז, כי זה הדעת שנתגלה במצרים נקרא דעת דנוקבא, ובגאולה העתידה במהרה בימינו יתגלה דעת דדכורא ע\"ש היטב."}
[rank0]:[W707 16:25:27.165327149 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
Experiment complete! Output can be found at data/out/rag/full_profile/ae_rag_full_profile_test_2_output.json
Cleaned temporary files.
Keeping ['ae', 'lp', 'sc'] in profile
Temp data file saved at data/processed/TEMP_lp_processed_test.json.
	Running Ranking: ['python', 'retrieval/rank_dataset.py', '--model_name', 'facebook/contriever-msmarco', '--input_dataset_addr', 'data/processed/TEMP_lp_processed_test.json', '--output_dataset_addr', 'data/processed/TEMP_lp_processed_test.json', '--batch_size', '4']

  0%|          | 0/526 [00:00<?, ?it/s]
  0%|          | 1/526 [00:00<02:27,  3.55it/s]
  1%|          | 3/526 [00:00<01:17,  6.71it/s]
  1%|          | 5/526 [00:00<00:55,  9.47it/s]
  1%|▏         | 7/526 [00:00<00:43, 11.87it/s]
  2%|▏         | 9/526 [00:01<01:44,  4.95it/s]
  2%|▏         | 11/526 [00:01<01:19,  6.51it/s]
  2%|▏         | 13/526 [00:02<01:31,  5.58it/s]
  3%|▎         | 15/526 [00:02<01:16,  6.65it/s]
  3%|▎         | 16/526 [00:02<01:19,  6.44it/s]
  3%|▎         | 18/526 [00:02<01:02,  8.09it/s]
  4%|▍         | 20/526 [00:03<01:18,  6.49it/s]
  4%|▍         | 21/526 [00:04<02:53,  2.91it/s]
  4%|▍         | 22/526 [00:04<02:59,  2.80it/s]
  4%|▍         | 23/526 [00:05<03:43,  2.25it/s]
  5%|▍         | 24/526 [00:06<04:19,  1.93it/s]
  5%|▍         | 25/526 [00:07<05:30,  1.51it/s]
  5%|▍         | 26/526 [00:07<04:41,  1.78it/s]
  5%|▌         | 27/526 [00:07<03:42,  2.24it/s]
  5%|▌         | 28/526 [00:07<03:36,  2.30it/s]
  6%|▌         | 30/526 [00:09<04:48,  1.72it/s]
  6%|▌         | 31/526 [00:09<04:40,  1.76it/s]
  6%|▌         | 32/526 [00:10<03:59,  2.06it/s]
  6%|▋         | 33/526 [00:11<05:46,  1.42it/s]
  6%|▋         | 34/526 [00:12<06:00,  1.37it/s]
  7%|▋         | 35/526 [00:13<06:37,  1.24it/s]
  7%|▋         | 36/526 [00:13<05:08,  1.59it/s]
  7%|▋         | 37/526 [00:13<04:27,  1.83it/s]
  7%|▋         | 39/526 [00:13<02:36,  3.10it/s]
  8%|▊         | 40/526 [00:14<02:20,  3.45it/s]
  8%|▊         | 42/526 [00:14<01:47,  4.50it/s]
  8%|▊         | 43/526 [00:15<02:26,  3.30it/s]
  9%|▊         | 45/526 [00:15<01:44,  4.61it/s]
  9%|▊         | 46/526 [00:15<01:51,  4.31it/s]
  9%|▉         | 47/526 [00:15<02:07,  3.75it/s]
  9%|▉         | 48/526 [00:16<02:43,  2.93it/s]
 10%|▉         | 50/526 [00:16<02:06,  3.75it/s]
 10%|▉         | 52/526 [00:16<01:37,  4.89it/s]
 10%|█         | 53/526 [00:18<03:27,  2.28it/s]
 10%|█         | 54/526 [00:21<08:51,  1.13s/it]
 11%|█         | 56/526 [00:21<05:29,  1.43it/s]
 11%|█         | 58/526 [00:22<04:28,  1.75it/s]
 11%|█         | 59/526 [00:23<04:45,  1.63it/s]
 11%|█▏        | 60/526 [00:24<05:07,  1.52it/s]
 12%|█▏        | 61/526 [00:24<05:02,  1.54it/s]
 12%|█▏        | 62/526 [00:25<06:03,  1.28it/s]
 12%|█▏        | 63/526 [00:27<07:26,  1.04it/s]
 12%|█▏        | 64/526 [00:27<06:02,  1.27it/s]
 12%|█▏        | 65/526 [00:27<04:36,  1.67it/s]
 13%|█▎        | 66/526 [00:28<03:53,  1.97it/s]
 13%|█▎        | 67/526 [00:28<03:43,  2.05it/s]
 13%|█▎        | 68/526 [00:29<04:46,  1.60it/s]
 13%|█▎        | 69/526 [00:29<03:39,  2.09it/s]
 13%|█▎        | 70/526 [00:31<05:52,  1.29it/s]
 13%|█▎        | 71/526 [00:31<06:02,  1.25it/s]
 14%|█▎        | 72/526 [00:32<05:36,  1.35it/s]
 14%|█▍        | 73/526 [00:33<06:24,  1.18it/s]
 14%|█▍        | 74/526 [00:35<07:45,  1.03s/it]
 14%|█▍        | 75/526 [00:35<05:47,  1.30it/s]
 14%|█▍        | 76/526 [00:35<04:19,  1.74it/s]
 15%|█▍        | 77/526 [00:36<05:25,  1.38it/s]
 15%|█▍        | 78/526 [00:37<07:01,  1.06it/s]
 15%|█▌        | 79/526 [00:37<05:11,  1.44it/s]
 15%|█▌        | 80/526 [00:38<04:13,  1.76it/s]
 16%|█▌        | 82/526 [00:39<04:26,  1.67it/s]
 16%|█▌        | 84/526 [00:40<04:14,  1.74it/s]
 16%|█▌        | 85/526 [00:42<06:09,  1.19it/s]
 16%|█▋        | 86/526 [00:42<05:14,  1.40it/s]
 17%|█▋        | 87/526 [00:43<05:45,  1.27it/s]
 17%|█▋        | 88/526 [00:43<04:48,  1.52it/s]
 17%|█▋        | 89/526 [00:44<04:07,  1.76it/s]
 17%|█▋        | 90/526 [00:44<03:40,  1.98it/s]
 17%|█▋        | 91/526 [00:45<03:28,  2.09it/s]
 17%|█▋        | 92/526 [00:45<02:44,  2.65it/s]
 18%|█▊        | 93/526 [00:45<02:08,  3.37it/s]
 18%|█▊        | 95/526 [00:45<01:27,  4.95it/s]
 18%|█▊        | 96/526 [00:45<01:56,  3.68it/s]
 18%|█▊        | 97/526 [00:46<02:41,  2.65it/s]
 19%|█▊        | 98/526 [00:49<07:53,  1.11s/it]
 19%|█▉        | 99/526 [00:52<12:06,  1.70s/it]
 19%|█▉        | 101/526 [00:53<07:26,  1.05s/it]
 19%|█▉        | 102/526 [00:53<06:22,  1.11it/s]
 20%|█▉        | 103/526 [00:54<05:52,  1.20it/s]
 20%|█▉        | 104/526 [00:55<06:47,  1.04it/s]
 20%|██        | 106/526 [00:56<04:38,  1.51it/s]
 21%|██        | 108/526 [00:56<03:27,  2.01it/s]
 21%|██        | 109/526 [00:57<03:12,  2.17it/s]
 21%|██        | 110/526 [00:58<04:08,  1.67it/s]
 21%|██        | 111/526 [00:58<03:49,  1.81it/s]
 21%|██▏       | 112/526 [00:59<03:37,  1.90it/s]
 21%|██▏       | 113/526 [00:59<02:49,  2.44it/s]
 22%|██▏       | 114/526 [00:59<02:19,  2.96it/s]
 22%|██▏       | 115/526 [00:59<01:55,  3.57it/s]
 22%|██▏       | 117/526 [01:00<03:05,  2.20it/s]
 22%|██▏       | 118/526 [01:02<04:25,  1.54it/s]
 23%|██▎       | 119/526 [01:02<03:50,  1.77it/s]
 23%|██▎       | 120/526 [01:03<04:37,  1.46it/s]
 23%|██▎       | 121/526 [01:03<03:45,  1.80it/s]
 23%|██▎       | 122/526 [01:04<05:07,  1.31it/s]
 23%|██▎       | 123/526 [01:05<05:45,  1.17it/s]
 24%|██▎       | 124/526 [01:07<06:36,  1.01it/s]
 24%|██▍       | 125/526 [01:07<04:55,  1.36it/s]
 24%|██▍       | 127/526 [01:07<03:06,  2.13it/s]
 24%|██▍       | 128/526 [01:07<02:37,  2.53it/s]
 25%|██▍       | 129/526 [01:08<02:35,  2.56it/s]
 25%|██▍       | 130/526 [01:08<02:34,  2.56it/s]
 25%|██▍       | 131/526 [01:08<02:16,  2.90it/s]
 25%|██▌       | 132/526 [01:08<01:53,  3.48it/s]
 25%|██▌       | 133/526 [01:09<01:38,  3.97it/s]
 26%|██▌       | 135/526 [01:09<01:28,  4.40it/s]
 26%|██▌       | 136/526 [01:09<01:38,  3.98it/s]
 26%|██▌       | 138/526 [01:10<01:20,  4.85it/s]
 26%|██▋       | 139/526 [01:10<01:30,  4.29it/s]
 27%|██▋       | 140/526 [01:10<01:22,  4.66it/s]
 27%|██▋       | 141/526 [01:10<01:21,  4.74it/s]
 27%|██▋       | 142/526 [01:11<01:15,  5.10it/s]
 27%|██▋       | 143/526 [01:11<01:58,  3.24it/s]
 27%|██▋       | 144/526 [01:11<01:40,  3.82it/s]
 28%|██▊       | 145/526 [01:12<03:27,  1.84it/s]
 28%|██▊       | 146/526 [01:13<03:01,  2.09it/s]
 28%|██▊       | 147/526 [01:13<02:50,  2.22it/s]
 28%|██▊       | 149/526 [01:14<02:09,  2.92it/s]
 29%|██▊       | 150/526 [01:14<01:49,  3.42it/s]
 29%|██▊       | 151/526 [01:14<01:35,  3.92it/s]
 29%|██▉       | 152/526 [01:14<01:26,  4.35it/s]
 29%|██▉       | 154/526 [01:15<02:16,  2.73it/s]
 29%|██▉       | 155/526 [01:16<03:04,  2.02it/s]
 30%|██▉       | 156/526 [01:17<03:50,  1.60it/s]
 30%|██▉       | 157/526 [01:17<03:28,  1.77it/s]
 30%|███       | 159/526 [01:18<02:06,  2.90it/s]
 30%|███       | 160/526 [01:19<03:37,  1.68it/s]
 31%|███       | 161/526 [01:19<03:08,  1.94it/s]
 31%|███       | 162/526 [01:21<05:29,  1.10it/s]
 31%|███       | 164/526 [01:22<03:37,  1.66it/s]
 32%|███▏      | 166/526 [01:22<02:28,  2.42it/s]
 32%|███▏      | 167/526 [01:22<02:21,  2.54it/s]
 32%|███▏      | 168/526 [01:23<03:31,  1.70it/s]
 32%|███▏      | 169/526 [01:24<03:05,  1.92it/s]
 33%|███▎      | 171/526 [01:26<04:19,  1.37it/s]
 33%|███▎      | 172/526 [01:26<03:33,  1.66it/s]
 33%|███▎      | 173/526 [01:26<03:07,  1.89it/s]
 33%|███▎      | 174/526 [01:27<02:52,  2.04it/s]
 33%|███▎      | 175/526 [01:27<02:18,  2.54it/s]
 33%|███▎      | 176/526 [01:28<03:10,  1.84it/s]
 34%|███▎      | 177/526 [01:28<02:28,  2.36it/s]
 34%|███▍      | 178/526 [01:28<01:58,  2.94it/s]
 34%|███▍      | 179/526 [01:28<01:38,  3.52it/s]
 34%|███▍      | 180/526 [01:29<03:18,  1.75it/s]
 34%|███▍      | 181/526 [01:30<02:33,  2.24it/s]
 35%|███▍      | 182/526 [01:31<04:16,  1.34it/s]
 35%|███▍      | 183/526 [01:31<03:12,  1.79it/s]
 35%|███▍      | 184/526 [01:32<03:11,  1.78it/s]
 35%|███▌      | 186/526 [01:34<04:06,  1.38it/s]
 36%|███▌      | 187/526 [01:34<03:40,  1.54it/s]
 36%|███▌      | 188/526 [01:34<03:23,  1.66it/s]
 36%|███▌      | 190/526 [01:35<02:10,  2.58it/s]
 36%|███▋      | 191/526 [01:35<01:53,  2.96it/s]
 37%|███▋      | 192/526 [01:35<01:37,  3.42it/s]
 37%|███▋      | 193/526 [01:35<01:21,  4.10it/s]
 37%|███▋      | 194/526 [01:35<01:10,  4.74it/s]
 37%|███▋      | 195/526 [01:36<02:47,  1.97it/s]
 37%|███▋      | 196/526 [01:38<03:54,  1.41it/s]
 37%|███▋      | 197/526 [01:38<03:10,  1.73it/s]
 38%|███▊      | 198/526 [01:38<02:51,  1.91it/s]
 38%|███▊      | 199/526 [01:40<05:10,  1.05it/s]
 38%|███▊      | 200/526 [01:40<04:01,  1.35it/s]
 38%|███▊      | 201/526 [01:41<04:10,  1.30it/s]
 38%|███▊      | 202/526 [01:42<03:17,  1.64it/s]
 39%|███▊      | 203/526 [01:42<03:36,  1.49it/s]
 39%|███▉      | 205/526 [01:43<02:06,  2.54it/s]
 39%|███▉      | 206/526 [01:43<01:47,  2.99it/s]
 39%|███▉      | 207/526 [01:43<01:37,  3.28it/s]
 40%|███▉      | 210/526 [01:43<00:53,  5.93it/s]
 40%|████      | 212/526 [01:44<01:40,  3.13it/s]
 41%|████      | 214/526 [01:45<01:19,  3.91it/s]
 41%|████      | 215/526 [01:45<01:42,  3.04it/s]
 41%|████      | 216/526 [01:46<01:42,  3.02it/s]
 41%|████▏     | 217/526 [01:46<02:29,  2.07it/s]
 41%|████▏     | 218/526 [01:47<03:08,  1.64it/s]
 42%|████▏     | 219/526 [01:48<03:20,  1.53it/s]
 42%|████▏     | 220/526 [01:48<02:34,  1.98it/s]
 42%|████▏     | 222/526 [01:49<01:36,  3.15it/s]
 42%|████▏     | 223/526 [01:50<02:25,  2.08it/s]
 43%|████▎     | 224/526 [01:50<02:01,  2.48it/s]
 43%|████▎     | 225/526 [01:50<01:59,  2.52it/s]
 43%|████▎     | 227/526 [01:51<01:38,  3.05it/s]
 43%|████▎     | 228/526 [01:51<01:23,  3.56it/s]
 44%|████▎     | 229/526 [01:51<01:32,  3.20it/s]
 44%|████▎     | 230/526 [01:51<01:23,  3.55it/s]
 44%|████▍     | 231/526 [01:52<02:19,  2.11it/s]
 44%|████▍     | 232/526 [01:52<01:48,  2.70it/s]
 44%|████▍     | 233/526 [01:53<01:32,  3.18it/s]
 44%|████▍     | 234/526 [01:54<02:51,  1.71it/s]
 45%|████▍     | 235/526 [01:54<02:42,  1.80it/s]
 45%|████▍     | 236/526 [01:54<02:06,  2.29it/s]
 45%|████▌     | 237/526 [01:55<01:59,  2.42it/s]
 45%|████▌     | 238/526 [01:55<01:40,  2.86it/s]
 46%|████▌     | 240/526 [01:55<01:03,  4.48it/s]
 46%|████▌     | 241/526 [01:56<01:59,  2.38it/s]
 46%|████▌     | 243/526 [01:57<01:41,  2.78it/s]
 46%|████▋     | 244/526 [01:57<01:45,  2.68it/s]
 47%|████▋     | 245/526 [01:58<02:27,  1.91it/s]
 47%|████▋     | 246/526 [01:58<02:10,  2.15it/s]
 47%|████▋     | 247/526 [01:59<01:47,  2.59it/s]
 47%|████▋     | 248/526 [01:59<02:06,  2.19it/s]
 47%|████▋     | 249/526 [02:00<02:47,  1.66it/s]
 48%|████▊     | 250/526 [02:00<02:10,  2.11it/s]
 48%|████▊     | 251/526 [02:01<02:46,  1.65it/s]
 48%|████▊     | 252/526 [02:02<02:24,  1.90it/s]
 48%|████▊     | 253/526 [02:02<01:55,  2.36it/s]
 48%|████▊     | 255/526 [02:03<02:07,  2.13it/s]
 49%|████▊     | 256/526 [02:03<01:52,  2.39it/s]
 49%|████▉     | 257/526 [02:04<02:51,  1.57it/s]
 49%|████▉     | 258/526 [02:05<03:14,  1.38it/s]
 49%|████▉     | 259/526 [02:05<02:29,  1.79it/s]
 49%|████▉     | 260/526 [02:06<01:57,  2.27it/s]
 50%|████▉     | 261/526 [02:06<02:02,  2.17it/s]
 50%|████▉     | 262/526 [02:06<01:34,  2.79it/s]
 50%|█████     | 263/526 [02:07<02:20,  1.87it/s]
 50%|█████     | 264/526 [02:08<02:43,  1.60it/s]
 50%|█████     | 265/526 [02:08<02:05,  2.07it/s]
 51%|█████     | 266/526 [02:09<02:15,  1.91it/s]
 51%|█████     | 267/526 [02:09<02:23,  1.81it/s]
 51%|█████     | 268/526 [02:10<01:50,  2.32it/s]
 51%|█████     | 269/526 [02:10<01:34,  2.73it/s]
 51%|█████▏    | 270/526 [02:10<01:46,  2.40it/s]
 52%|█████▏    | 271/526 [02:10<01:28,  2.88it/s]
 52%|█████▏    | 272/526 [02:11<01:42,  2.49it/s]
 52%|█████▏    | 273/526 [02:12<02:26,  1.73it/s]
 52%|█████▏    | 274/526 [02:12<02:12,  1.90it/s]
 52%|█████▏    | 275/526 [02:16<05:34,  1.33s/it]
 52%|█████▏    | 276/526 [02:16<04:07,  1.01it/s]
 53%|█████▎    | 277/526 [02:16<03:07,  1.33it/s]
 53%|█████▎    | 278/526 [02:17<03:04,  1.34it/s]
 53%|█████▎    | 279/526 [02:20<06:04,  1.48s/it]
 53%|█████▎    | 280/526 [02:23<08:07,  1.98s/it]
 53%|█████▎    | 281/526 [02:26<09:34,  2.34s/it]
 54%|█████▎    | 282/526 [02:29<10:33,  2.60s/it]
 54%|█████▍    | 283/526 [02:33<11:13,  2.77s/it]
 54%|█████▍    | 284/526 [02:36<11:40,  2.89s/it]
 54%|█████▍    | 285/526 [02:36<08:39,  2.16s/it]
 54%|█████▍    | 286/526 [02:37<07:02,  1.76s/it]
 55%|█████▍    | 287/526 [02:37<05:07,  1.29s/it]
 55%|█████▍    | 288/526 [02:38<03:51,  1.03it/s]
 55%|█████▍    | 289/526 [02:38<02:54,  1.36it/s]
 55%|█████▌    | 291/526 [02:39<02:31,  1.55it/s]
 56%|█████▌    | 292/526 [02:39<02:05,  1.87it/s]
 56%|█████▌    | 293/526 [02:40<02:15,  1.72it/s]
 56%|█████▌    | 294/526 [02:40<01:57,  1.97it/s]
 56%|█████▌    | 295/526 [02:40<01:44,  2.21it/s]
 56%|█████▋    | 296/526 [02:41<01:35,  2.40it/s]
 57%|█████▋    | 298/526 [02:44<03:37,  1.05it/s]
 57%|█████▋    | 299/526 [02:47<05:34,  1.48s/it]
 57%|█████▋    | 300/526 [02:48<05:33,  1.47s/it]
 57%|█████▋    | 301/526 [02:49<05:04,  1.36s/it]
 57%|█████▋    | 302/526 [02:51<05:08,  1.38s/it]
 58%|█████▊    | 303/526 [02:52<05:12,  1.40s/it]
 58%|█████▊    | 304/526 [02:53<04:01,  1.09s/it]
 58%|█████▊    | 305/526 [02:54<04:25,  1.20s/it]
 58%|█████▊    | 306/526 [02:56<04:37,  1.26s/it]
 58%|█████▊    | 307/526 [02:57<04:50,  1.33s/it]
 59%|█████▊    | 308/526 [02:59<04:58,  1.37s/it]
 59%|█████▊    | 309/526 [02:59<03:45,  1.04s/it]
 59%|█████▉    | 310/526 [03:00<03:37,  1.01s/it]
 59%|█████▉    | 311/526 [03:00<02:46,  1.29it/s]
 59%|█████▉    | 312/526 [03:01<03:32,  1.01it/s]
 60%|█████▉    | 313/526 [03:03<04:03,  1.14s/it]
 60%|█████▉    | 314/526 [03:05<04:34,  1.29s/it]
 60%|█████▉    | 315/526 [03:08<06:30,  1.85s/it]
 60%|██████    | 316/526 [03:08<04:39,  1.33s/it]
 60%|██████    | 317/526 [03:09<04:08,  1.19s/it]
 60%|██████    | 318/526 [03:10<03:45,  1.09s/it]
 61%|██████    | 319/526 [03:10<03:00,  1.15it/s]
 61%|██████    | 320/526 [03:10<02:14,  1.53it/s]
 61%|██████    | 321/526 [03:12<03:17,  1.04it/s]
 61%|██████    | 322/526 [03:12<02:39,  1.28it/s]
 61%|██████▏   | 323/526 [03:12<02:04,  1.63it/s]
 62%|██████▏   | 324/526 [03:13<01:42,  1.98it/s]
 62%|██████▏   | 325/526 [03:13<01:27,  2.30it/s]
 62%|██████▏   | 326/526 [03:13<01:08,  2.91it/s]
 62%|██████▏   | 327/526 [03:13<01:07,  2.93it/s]
 62%|██████▏   | 328/526 [03:13<00:57,  3.47it/s]
 63%|██████▎   | 330/526 [03:14<00:37,  5.28it/s]
 63%|██████▎   | 331/526 [03:14<00:40,  4.84it/s]
 63%|██████▎   | 332/526 [03:14<00:57,  3.37it/s]
 63%|██████▎   | 333/526 [03:15<00:52,  3.67it/s]
 63%|██████▎   | 334/526 [03:16<01:47,  1.78it/s]
 64%|██████▎   | 335/526 [03:17<01:47,  1.78it/s]
 64%|██████▍   | 336/526 [03:18<02:27,  1.29it/s]
 64%|██████▍   | 337/526 [03:19<02:25,  1.30it/s]
 64%|██████▍   | 338/526 [03:19<02:16,  1.38it/s]
 64%|██████▍   | 339/526 [03:20<01:59,  1.57it/s]
 65%|██████▍   | 340/526 [03:23<04:20,  1.40s/it]
 65%|██████▍   | 341/526 [03:23<03:09,  1.02s/it]
 65%|██████▌   | 342/526 [03:23<02:38,  1.16it/s]
 65%|██████▌   | 343/526 [03:24<02:36,  1.17it/s]
 66%|██████▌   | 345/526 [03:31<06:09,  2.04s/it]
 66%|██████▌   | 346/526 [03:34<06:59,  2.33s/it]
 66%|██████▌   | 347/526 [03:41<10:21,  3.47s/it]
 66%|██████▌   | 348/526 [03:42<08:18,  2.80s/it]
 66%|██████▋   | 349/526 [03:43<06:20,  2.15s/it]
 67%|██████▋   | 350/526 [03:49<10:15,  3.50s/it]
 67%|██████▋   | 351/526 [03:53<09:57,  3.41s/it]
 67%|██████▋   | 352/526 [03:53<07:12,  2.49s/it]
 67%|██████▋   | 353/526 [03:53<05:12,  1.80s/it]
 67%|██████▋   | 355/526 [03:54<03:09,  1.11s/it]
 68%|██████▊   | 356/526 [03:54<02:27,  1.16it/s]
 68%|██████▊   | 357/526 [03:54<02:14,  1.26it/s]
 68%|██████▊   | 358/526 [03:55<02:03,  1.36it/s]
 68%|██████▊   | 359/526 [03:55<01:41,  1.65it/s]
 68%|██████▊   | 360/526 [03:55<01:17,  2.13it/s]
 69%|██████▊   | 361/526 [03:56<01:06,  2.48it/s]
 69%|██████▉   | 363/526 [03:56<01:02,  2.62it/s]
 69%|██████▉   | 364/526 [03:56<00:54,  2.96it/s]
 69%|██████▉   | 365/526 [03:57<01:06,  2.43it/s]
 70%|██████▉   | 366/526 [03:59<02:01,  1.31it/s]
 70%|██████▉   | 367/526 [03:59<01:33,  1.70it/s]
 70%|██████▉   | 368/526 [03:59<01:13,  2.15it/s]
 70%|███████   | 369/526 [03:59<01:11,  2.20it/s]
 70%|███████   | 370/526 [04:06<05:57,  2.29s/it]
 71%|███████   | 371/526 [04:13<09:21,  3.62s/it]
 71%|███████   | 372/526 [04:20<11:36,  4.53s/it]
 71%|███████   | 374/526 [04:20<06:18,  2.49s/it]
 71%|███████▏  | 375/526 [04:27<08:56,  3.55s/it]
 71%|███████▏  | 376/526 [04:27<06:38,  2.66s/it]
 72%|███████▏  | 377/526 [04:27<05:12,  2.10s/it]
 72%|███████▏  | 379/526 [04:28<03:10,  1.29s/it]
 72%|███████▏  | 380/526 [04:28<02:32,  1.04s/it]
 72%|███████▏  | 381/526 [04:35<05:57,  2.46s/it]
 73%|███████▎  | 382/526 [04:35<04:38,  1.93s/it]
 73%|███████▎  | 383/526 [04:36<03:37,  1.52s/it]
 73%|███████▎  | 384/526 [04:42<07:01,  2.97s/it]
 73%|███████▎  | 385/526 [04:49<09:32,  4.06s/it]
 73%|███████▎  | 386/526 [04:50<07:23,  3.17s/it]
 74%|███████▎  | 387/526 [04:50<05:21,  2.31s/it]
 74%|███████▍  | 388/526 [04:51<04:00,  1.74s/it]
 74%|███████▍  | 389/526 [04:51<03:13,  1.41s/it]
 74%|███████▍  | 390/526 [04:52<02:39,  1.18s/it]
 74%|███████▍  | 391/526 [04:52<01:57,  1.15it/s]
 75%|███████▍  | 392/526 [04:52<01:26,  1.55it/s]
 75%|███████▍  | 393/526 [04:53<01:24,  1.58it/s]
 75%|███████▍  | 394/526 [04:53<01:03,  2.08it/s]
 75%|███████▌  | 396/526 [04:53<00:39,  3.28it/s]
 75%|███████▌  | 397/526 [04:53<00:33,  3.79it/s]
 76%|███████▌  | 398/526 [04:54<00:33,  3.77it/s]
 76%|███████▌  | 399/526 [05:00<04:20,  2.05s/it]
 76%|███████▌  | 400/526 [05:01<03:10,  1.51s/it]
 76%|███████▌  | 401/526 [05:07<06:19,  3.04s/it]
 76%|███████▋  | 402/526 [05:08<04:44,  2.30s/it]
 77%|███████▋  | 403/526 [05:08<03:32,  1.73s/it]
 77%|███████▋  | 404/526 [05:08<02:35,  1.28s/it]
 77%|███████▋  | 405/526 [05:09<01:56,  1.04it/s]
 77%|███████▋  | 406/526 [05:14<04:19,  2.16s/it]
 78%|███████▊  | 408/526 [05:14<02:24,  1.22s/it]
 78%|███████▊  | 409/526 [05:14<02:05,  1.07s/it]
 78%|███████▊  | 410/526 [05:15<01:36,  1.20it/s]
 78%|███████▊  | 411/526 [05:21<04:41,  2.45s/it]
 78%|███████▊  | 412/526 [05:22<03:27,  1.82s/it]
 79%|███████▊  | 414/526 [05:22<01:58,  1.06s/it]
 79%|███████▉  | 415/526 [05:22<01:38,  1.12it/s]
 79%|███████▉  | 417/526 [05:23<01:08,  1.60it/s]
 79%|███████▉  | 418/526 [05:24<01:35,  1.14it/s]
 80%|███████▉  | 419/526 [05:25<01:15,  1.42it/s]
 80%|████████  | 421/526 [05:28<02:04,  1.18s/it]
 80%|████████  | 422/526 [05:28<01:37,  1.07it/s]
 80%|████████  | 423/526 [05:29<01:21,  1.27it/s]
 81%|████████  | 424/526 [05:29<01:03,  1.61it/s]
 81%|████████  | 425/526 [05:29<00:48,  2.07it/s]
 81%|████████  | 426/526 [05:29<00:41,  2.40it/s]
 81%|████████  | 427/526 [05:29<00:33,  2.94it/s]
 81%|████████▏ | 428/526 [05:30<00:26,  3.64it/s]
 82%|████████▏ | 429/526 [05:30<00:22,  4.23it/s]
 82%|████████▏ | 431/526 [05:31<00:34,  2.71it/s]
 82%|████████▏ | 433/526 [05:31<00:25,  3.65it/s]
 83%|████████▎ | 435/526 [05:34<00:59,  1.54it/s]
 83%|████████▎ | 436/526 [05:35<01:03,  1.41it/s]
 83%|████████▎ | 438/526 [05:36<00:56,  1.56it/s]
 83%|████████▎ | 439/526 [05:36<00:59,  1.47it/s]
 84%|████████▎ | 440/526 [05:37<00:58,  1.48it/s]
 84%|████████▍ | 442/526 [05:38<00:42,  1.96it/s]
 84%|████████▍ | 444/526 [05:39<00:52,  1.56it/s]
 85%|████████▍ | 445/526 [05:41<01:09,  1.17it/s]
 85%|████████▍ | 446/526 [05:41<00:57,  1.39it/s]
 85%|████████▍ | 447/526 [05:42<00:50,  1.58it/s]
 85%|████████▌ | 448/526 [05:42<00:40,  1.92it/s]
 86%|████████▌ | 450/526 [05:42<00:25,  2.99it/s]
 86%|████████▌ | 451/526 [05:42<00:21,  3.50it/s]
 86%|████████▌ | 453/526 [05:42<00:14,  4.96it/s]
 86%|████████▋ | 454/526 [05:43<00:20,  3.56it/s]
 87%|████████▋ | 456/526 [05:43<00:15,  4.49it/s]
 87%|████████▋ | 458/526 [05:43<00:13,  5.23it/s]
 87%|████████▋ | 459/526 [05:44<00:13,  5.02it/s]
 87%|████████▋ | 460/526 [05:44<00:18,  3.61it/s]
 88%|████████▊ | 461/526 [05:44<00:15,  4.19it/s]
 88%|████████▊ | 462/526 [05:44<00:14,  4.32it/s]
 88%|████████▊ | 463/526 [05:45<00:17,  3.69it/s]
 88%|████████▊ | 465/526 [05:45<00:13,  4.42it/s]
 89%|████████▊ | 466/526 [05:46<00:15,  3.82it/s]
 89%|████████▉ | 467/526 [05:46<00:18,  3.27it/s]
 89%|████████▉ | 468/526 [05:46<00:15,  3.86it/s]
 89%|████████▉ | 470/526 [05:46<00:10,  5.44it/s]
 90%|████████▉ | 471/526 [05:46<00:09,  6.04it/s]
 90%|████████▉ | 472/526 [05:47<00:12,  4.25it/s]
 90%|█████████ | 474/526 [05:47<00:08,  5.97it/s]
 90%|█████████ | 475/526 [05:48<00:16,  3.12it/s]
 90%|█████████ | 476/526 [05:48<00:16,  2.97it/s]
 91%|█████████ | 478/526 [05:48<00:10,  4.56it/s]
 91%|█████████ | 479/526 [05:49<00:17,  2.74it/s]
 91%|█████████▏| 480/526 [05:50<00:17,  2.66it/s]
 91%|█████████▏| 481/526 [05:51<00:29,  1.51it/s]
 92%|█████████▏| 482/526 [05:51<00:24,  1.77it/s]
 92%|█████████▏| 483/526 [05:52<00:20,  2.12it/s]
 92%|█████████▏| 484/526 [05:52<00:17,  2.47it/s]
 92%|█████████▏| 485/526 [05:52<00:14,  2.80it/s]
 92%|█████████▏| 486/526 [05:52<00:11,  3.36it/s]
 93%|█████████▎| 487/526 [05:52<00:10,  3.73it/s]
 93%|█████████▎| 489/526 [05:53<00:07,  4.84it/s]
 93%|█████████▎| 490/526 [05:53<00:07,  4.87it/s]
 93%|█████████▎| 491/526 [05:54<00:11,  3.09it/s]
 94%|█████████▎| 493/526 [05:57<00:32,  1.01it/s]
 94%|█████████▍| 495/526 [05:58<00:20,  1.48it/s]
 94%|█████████▍| 496/526 [05:58<00:16,  1.77it/s]
 94%|█████████▍| 497/526 [05:59<00:20,  1.45it/s]
 95%|█████████▍| 498/526 [06:01<00:26,  1.07it/s]
 95%|█████████▍| 499/526 [06:02<00:31,  1.18s/it]
 95%|█████████▌| 500/526 [06:03<00:23,  1.11it/s]
 95%|█████████▌| 501/526 [06:03<00:17,  1.41it/s]
 96%|█████████▌| 503/526 [06:03<00:10,  2.24it/s]
 96%|█████████▌| 504/526 [06:03<00:08,  2.48it/s]
 96%|█████████▌| 505/526 [06:04<00:08,  2.36it/s]
 96%|█████████▌| 506/526 [06:04<00:07,  2.70it/s]
 96%|█████████▋| 507/526 [06:04<00:05,  3.27it/s]
 97%|█████████▋| 508/526 [06:05<00:06,  2.88it/s]
 97%|█████████▋| 510/526 [06:06<00:06,  2.30it/s]
 97%|█████████▋| 511/526 [06:06<00:06,  2.15it/s]
 97%|█████████▋| 512/526 [06:06<00:05,  2.56it/s]
 98%|█████████▊| 513/526 [06:07<00:06,  1.97it/s]
 98%|█████████▊| 514/526 [06:08<00:05,  2.16it/s]
 98%|█████████▊| 515/526 [06:08<00:04,  2.23it/s]
 98%|█████████▊| 516/526 [06:08<00:03,  2.77it/s]
 98%|█████████▊| 517/526 [06:09<00:03,  2.66it/s]
 98%|█████████▊| 518/526 [06:09<00:02,  2.89it/s]
 99%|█████████▊| 519/526 [06:09<00:02,  3.47it/s]
 99%|█████████▉| 520/526 [06:10<00:02,  2.02it/s]
 99%|█████████▉| 521/526 [06:10<00:01,  2.63it/s]
 99%|█████████▉| 522/526 [06:13<00:05,  1.27s/it]
 99%|█████████▉| 523/526 [06:17<00:05,  1.90s/it]
100%|█████████▉| 524/526 [06:20<00:04,  2.36s/it]
100%|█████████▉| 525/526 [06:21<00:01,  1.76s/it]
100%|██████████| 526/526 [06:24<00:00,  2.24s/it]
100%|██████████| 526/526 [06:24<00:00,  1.37it/s]
	Running baseline: ['python', 'baselines.py', '--model_addr', 'Qwen/Qwen2.5-7B-Instruct', '--inputs_addr', 'data/processed/TEMP_lp_processed_test.json', '--output_addr', 'data/out/rag/full_profile/lp_rag_full_profile_test_2_output.json', '--temperature', '0.0', '--top_p', '0.95', '--max_tokens', '4096', '--num_generated_outputs', '1', '--num_contexts', '2', '--max_retries', '5', '--cache_dir', '/work/pi_hzamani_umass_edu/ozel_cache/', '--rag']
INFO 07-07 16:32:20 config.py:510] This model supports multiple tasks: {'generate', 'score', 'classify', 'embed', 'reward'}. Defaulting to 'generate'.
INFO 07-07 16:32:20 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-7B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-7B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768, download_dir='/work/pi_hzamani_umass_edu/ozel_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-7B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-07 16:32:21 selector.py:120] Using Flash Attention backend.
INFO 07-07 16:32:22 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-7B-Instruct...
INFO 07-07 16:32:22 weight_utils.py:251] Using model weights format ['*.safetensors']

Loading safetensors checkpoint shards:   0% Completed | 0/4 [00:00<?, ?it/s]

Loading safetensors checkpoint shards:  25% Completed | 1/4 [00:00<00:02,  1.25it/s]

Loading safetensors checkpoint shards:  50% Completed | 2/4 [00:01<00:01,  1.15it/s]

Loading safetensors checkpoint shards:  75% Completed | 3/4 [00:02<00:00,  1.17it/s]

Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:03<00:00,  1.21it/s]

Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:03<00:00,  1.20it/s]

INFO 07-07 16:32:26 model_runner.py:1099] Loading model weights took 14.2487 GB
INFO 07-07 16:32:28 worker.py:241] Memory profiling takes 2.11 seconds
INFO 07-07 16:32:28 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.90) = 71.33GiB
INFO 07-07 16:32:28 worker.py:241] model weights take 14.25GiB; non_torch_memory takes 0.14GiB; PyTorch activation peak memory takes 4.35GiB; the rest of the memory reserved for KV Cache is 52.59GiB.
INFO 07-07 16:32:28 gpu_executor.py:76] # GPU blocks: 61542, # CPU blocks: 4681
INFO 07-07 16:32:28 gpu_executor.py:80] Maximum concurrency for 32768 tokens per request: 30.05x
INFO 07-07 16:32:31 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.

Capturing CUDA graph shapes:   0%|          | 0/35 [00:00<?, ?it/s]
Capturing CUDA graph shapes:   3%|▎         | 1/35 [00:00<00:15,  2.23it/s]
Capturing CUDA graph shapes:   6%|▌         | 2/35 [00:00<00:14,  2.34it/s]
Capturing CUDA graph shapes:   9%|▊         | 3/35 [00:01<00:13,  2.34it/s]
Capturing CUDA graph shapes:  11%|█▏        | 4/35 [00:01<00:13,  2.36it/s]
Capturing CUDA graph shapes:  14%|█▍        | 5/35 [00:02<00:11,  2.50it/s]
Capturing CUDA graph shapes:  17%|█▋        | 6/35 [00:02<00:10,  2.64it/s]
Capturing CUDA graph shapes:  20%|██        | 7/35 [00:02<00:10,  2.78it/s]
Capturing CUDA graph shapes:  23%|██▎       | 8/35 [00:03<00:09,  2.94it/s]
Capturing CUDA graph shapes:  26%|██▌       | 9/35 [00:03<00:08,  2.96it/s]
Capturing CUDA graph shapes:  29%|██▊       | 10/35 [00:03<00:08,  3.09it/s]
Capturing CUDA graph shapes:  31%|███▏      | 11/35 [00:03<00:07,  3.09it/s]
Capturing CUDA graph shapes:  34%|███▍      | 12/35 [00:04<00:07,  3.08it/s]
Capturing CUDA graph shapes:  37%|███▋      | 13/35 [00:04<00:07,  3.11it/s]
Capturing CUDA graph shapes:  40%|████      | 14/35 [00:04<00:06,  3.10it/s]
Capturing CUDA graph shapes:  43%|████▎     | 15/35 [00:05<00:06,  3.08it/s]
Capturing CUDA graph shapes:  46%|████▌     | 16/35 [00:05<00:06,  3.13it/s]
Capturing CUDA graph shapes:  49%|████▊     | 17/35 [00:05<00:05,  3.25it/s]
Capturing CUDA graph shapes:  51%|█████▏    | 18/35 [00:06<00:05,  3.23it/s]
Capturing CUDA graph shapes:  54%|█████▍    | 19/35 [00:06<00:04,  3.25it/s]
Capturing CUDA graph shapes:  57%|█████▋    | 20/35 [00:06<00:04,  3.30it/s]
Capturing CUDA graph shapes:  60%|██████    | 21/35 [00:07<00:04,  3.30it/s]
Capturing CUDA graph shapes:  63%|██████▎   | 22/35 [00:07<00:03,  3.38it/s]
Capturing CUDA graph shapes:  66%|██████▌   | 23/35 [00:07<00:03,  3.34it/s]
Capturing CUDA graph shapes:  69%|██████▊   | 24/35 [00:07<00:03,  3.32it/s]
Capturing CUDA graph shapes:  71%|███████▏  | 25/35 [00:08<00:03,  3.31it/s]
Capturing CUDA graph shapes:  74%|███████▍  | 26/35 [00:08<00:02,  3.35it/s]
Capturing CUDA graph shapes:  77%|███████▋  | 27/35 [00:08<00:02,  3.42it/s]
Capturing CUDA graph shapes:  80%|████████  | 28/35 [00:09<00:02,  3.49it/s]
Capturing CUDA graph shapes:  83%|████████▎ | 29/35 [00:09<00:01,  3.55it/s]
Capturing CUDA graph shapes:  86%|████████▌ | 30/35 [00:09<00:01,  3.49it/s]
Capturing CUDA graph shapes:  89%|████████▊ | 31/35 [00:10<00:01,  3.33it/s]
Capturing CUDA graph shapes:  91%|█████████▏| 32/35 [00:10<00:00,  3.32it/s]
Capturing CUDA graph shapes:  94%|█████████▍| 33/35 [00:10<00:00,  3.35it/s]
Capturing CUDA graph shapes:  97%|█████████▋| 34/35 [00:10<00:00,  3.45it/s]
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:11<00:00,  3.50it/s]
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:11<00:00,  3.14it/s]
INFO 07-07 16:32:42 model_runner.py:1535] Graph capturing finished in 11 secs, took 0.22 GiB
INFO 07-07 16:32:42 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 16.24 seconds
RAG ON
EXAMPLE PROMPT
<|im_start|>system
You are a helpful assistant designed to generate personalized responses to user questions. Your task is to answer a user's question from a post in a personalized way by considering this user's past post questions and detailed descriptions of these questions.
# Your input:
    - The user's current question from a post.
    - The user's past post questions and detailed descriptions of these questions.
# Your task: Answer the user's current question in a personalized way by considering this user's past post questions and detailed descriptions of these questions, to learn about the user's preferences.
# Your output: You should generate personalized answer to the user's current question by considering this user's past post questions and detailed descriptions of these questions to learn about user's preferences. Your output should be a valid json object in ```json ``` block that contains the following fields:
    - personalized_answer: contains the personalized answer to the user's current question considering the this user's past post questions and detailed descriptions of these questions to learn about user's preferences.
<|im_end|>
<|im_start|>user

# Past post questions and detailed descriptions of these questions:
Is investing all your savings into a small number of individual stocks risky? I want to invest 90% of my savings into stock market and split between 4-6 stocks.  How risky is this and is it a bad idea.  I feel like the stock market goes up over time so unless something like 2008 depression happens again there is actually not that much risk?Note that I'm trying to turn this into a form of income and not simply getting decent returns for retirement etc.  I am okay with reasonable risk so I can work less hopefully.

What causes a stock to make an EXTREMELY big move in a short period? Today (8/19/20) I was paper trading a stock REDU.  I was in a short position without a stop loss and stock went from 6.74 to 7.48 or over 10% in a span of less than 30 seconds, faster than I could react to get out.  Is this due to low trade volume and the bid and ask became so wide?  or someone manipulating the market?My question is how can I avoid this scenario in the future.  Would a stop loss work to get me out? or avoid these types of stocks in general.
# Current post question:
Is cycling on this 35mph road too dangerous?
<|im_end|>
<|im_start|>assistant

<|im_start|>system
You are a helpful assistant designed to generate personalized responses to user questions. Your task is to answer a user's question from a post in a personalized way by considering this user's past post questions and detailed descriptions of these questions.
# Your input:
    - The user's current question from a post.
    - The user's past post questions and detailed descriptions of these questions.
# Your task: Answer the user's current question in a personalized way by considering this user's past post questions and detailed descriptions of these questions, to learn about the user's preferences.
# Your output: You should generate personalized answer to the user's current question by considering this user's past post questions and detailed descriptions of these questions to learn about user's preferences. Your output should be a valid json object in ```json ``` block that contains the following fields:
    - personalized_answer: contains the personalized answer to the user's current question considering the this user's past post questions and detailed descriptions of these questions to learn about user's preferences.
<|im_end|>
<|im_start|>user

# Past post questions and detailed descriptions of these questions:
How to tackle the bibliographic work as an entering PhD student? I'll be starting my PhD in the next fall. I already looked over the internet for advice for a beginner, even read two books on the subjects. Still, there is one point I haven't seen discussed as I wanted, it's the time and the way the student should be investing in catching up on his field and his specific topic, I'm speaking about the bibliographic part. For sure a student needs a lot of (continuous) input, but at the end he'll be solely judged on his output. From my previous research project, I'm not really confident in my way of balancing between going through articles/textbook material and trying to solve my own problematics. To be honest, it sometimes feels like a sneaky way of procrastinating: I'd tell myself that I'm still not ready to tackle my problem and that I need to make a little "detour" by existing works; and when it's done I don't feel more at ease to answer my questions. Or is it a normal aspect of research?In my specific case, I'll be working on a quite new subject (string theory) when I only had advanced lecture of quantum field theory and general relativity; so I'm thinking about going through the canonical textbook on the subject during the summer, do most of the exercises and derivations in there (which already represents hundreds of hours invested), maybe revising some mathematical tools I need to be really familiar with. Once I'll have a general idea of the topic I'll jump to the main articles in relation to my thesis. I also know that I will be using numerical tools (Monte Carlo methods) and will need to get conformable with that. So far I only have a superficial knowledge and use of the tool.Does it seem like a good use of my time? I already know that time and willpower are limited resources in grad school and I really don't want my desire to do well to burn me out from the beginning.

Why does the minor pentatonic scale sounds "oriental" to me? I've been training my minor pentatonic scale on guitar for a while (mostly playing it in A with the first position) and it always sounded somewhat oriental to me, in the sense of the musical airs you'd find in music to set the plot in Orient, musical clichés. I am not sure to be really clear in trying to share this impression, but I, then, read that in Orient they used to split the octave in 5 tones, and not 7 as we did in Europe, would it be because the pentatonic as only five notes (by definition) that my sub
# Current post question:
Shimano crankset is near end of life, can I use a Tiagra 4700 replacement?
<|im_end|>
<|im_start|>assistant

<|im_start|>system
You are a helpful assistant designed to generate personalized responses to user questions. Your task is to answer a user's question from a post in a personalized way by considering this user's past post questions and detailed descriptions of these questions.
# Your input:
    - The user's current question from a post.
    - The user's past post questions and detailed descriptions of these questions.
# Your task: Answer the user's current question in a personalized way by considering this user's past post questions and detailed descriptions of these questions, to learn about the user's preferences.
# Your output: You should generate personalized answer to the user's current question by considering this user's past post questions and detailed descriptions of these questions to learn about user's preferences. Your output should be a valid json object in ```json ``` block that contains the following fields:
    - personalized_answer: contains the personalized answer to the user's current question considering the this user's past post questions and detailed descriptions of these questions to learn about user's preferences.
<|im_end|>
<|im_start|>user

# Past post questions and detailed descriptions of these questions:
How to improve finger style guitar playing I am a competent, but not amazing, guitar player who is very comfortable with the usual chords as well as basic fingerpicking patterns. I would like to take it to the next level and be able to improvise and play something along the lines of (though not initially as complicated as) this by James Taylor: 
                
             - starting at about 2:40. Another example of something that I would love to do is 
                
            . As opposed to learning a particular song, which is fine, I am more interested in learning general techniques that I can improvise with when I am playing around on the guitar.What resources/tutorials/lessons would you recommend that can help me play interesting things like in these videos? 

What does "her mama leaned hard" in this Emmylou Harris Song mean? I was listening to the song "Red Dirt Girl" by Emmylou Harris, and didn't understand one of the lyrics: "her mama leaned hard." What does this mean?Her daddy turned mean and her mama leaned hardGot in trouble with a boy from townI did find one definition from this blog, but it doesn't seem to be what I am looking for: "To lean hard you must get under God’s feet and submit to His plans and purposes, even if you do not see them fully or understand them at all. Leaning means shifting all the weight of the burden from your shoulders to His."
# Current post question:
Repair Marin Hawk Hill (cracked frame) or get new bike?
<|im_end|>
<|im_start|>assistant

None

Processed prompts:   0%|          | 0/526 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts:   0%|          | 1/526 [00:12<1:45:31, 12.06s/it, est. speed input: 62.10 toks/s, output: 8.04 toks/s]
Processed prompts:   0%|          | 2/526 [00:12<44:33,  5.10s/it, est. speed input: 89.82 toks/s, output: 16.19 toks/s] 
Processed prompts:   1%|          | 4/526 [00:12<17:01,  1.96s/it, est. speed input: 154.14 toks/s, output: 32.58 toks/s]
Processed prompts:   1%|          | 5/526 [00:12<12:11,  1.40s/it, est. speed input: 205.98 toks/s, output: 40.53 toks/s]
Processed prompts:   1%|          | 6/526 [00:12<08:46,  1.01s/it, est. speed input: 230.00 toks/s, output: 48.60 toks/s]
Processed prompts:   2%|▏         | 8/526 [00:12<04:57,  1.74it/s, est. speed input: 304.84 toks/s, output: 64.93 toks/s]
Processed prompts:   2%|▏         | 13/526 [00:13<02:07,  4.03it/s, est. speed input: 555.91 toks/s, output: 105.78 toks/s]
Processed prompts:   3%|▎         | 17/526 [00:13<01:28,  5.73it/s, est. speed input: 696.66 toks/s, output: 137.04 toks/s]
Processed prompts:   4%|▍         | 20/526 [00:13<01:10,  7.18it/s, est. speed input: 770.73 toks/s, output: 160.76 toks/s]
Processed prompts:   4%|▍         | 22/526 [00:13<01:01,  8.21it/s, est. speed input: 860.50 toks/s, output: 176.59 toks/s]
Processed prompts:   5%|▍         | 24/526 [00:13<00:53,  9.40it/s, est. speed input: 919.30 toks/s, output: 192.32 toks/s]
Processed prompts:   5%|▌         | 27/526 [00:14<00:45, 10.87it/s, est. speed input: 1000.14 toks/s, output: 215.32 toks/s]
Processed prompts:   6%|▌         | 29/526 [00:14<00:43, 11.36it/s, est. speed input: 1056.13 toks/s, output: 230.18 toks/s]
Processed prompts:   7%|▋         | 35/526 [00:14<00:32, 14.95it/s, est. speed input: 1247.56 toks/s, output: 277.01 toks/s]
Processed prompts:   8%|▊         | 40/526 [00:14<00:30, 15.94it/s, est. speed input: 1424.42 toks/s, output: 314.44 toks/s]
Processed prompts:   8%|▊         | 43/526 [00:14<00:28, 16.89it/s, est. speed input: 1518.83 toks/s, output: 336.97 toks/s]
Processed prompts:   9%|▉         | 47/526 [00:15<00:28, 16.91it/s, est. speed input: 1645.01 toks/s, output: 365.56 toks/s]
Processed prompts:  10%|▉         | 50/526 [00:15<00:29, 16.39it/s, est. speed input: 1728.08 toks/s, output: 386.19 toks/s]
Processed prompts:  10%|█         | 53/526 [00:15<00:26, 18.12it/s, est. speed input: 1819.03 toks/s, output: 408.71 toks/s]
Processed prompts:  10%|█         | 55/526 [00:15<00:26, 18.05it/s, est. speed input: 1878.86 toks/s, output: 422.81 toks/s]
Processed prompts:  11%|█         | 57/526 [00:15<00:27, 17.17it/s, est. speed input: 1935.45 toks/s, output: 436.12 toks/s]
Processed prompts:  12%|█▏        | 61/526 [00:16<00:28, 16.13it/s, est. speed input: 2027.50 toks/s, output: 462.29 toks/s]
Processed prompts:  13%|█▎        | 66/526 [00:16<00:24, 18.97it/s, est. speed input: 2146.20 toks/s, output: 498.39 toks/s]
Processed prompts:  13%|█▎        | 70/526 [00:16<00:26, 17.47it/s, est. speed input: 2233.65 toks/s, output: 523.39 toks/s]
Processed prompts:  14%|█▍        | 76/526 [00:16<00:24, 18.73it/s, est. speed input: 2396.16 toks/s, output: 563.62 toks/s]
Processed prompts:  15%|█▌        | 80/526 [00:16<00:24, 18.44it/s, est. speed input: 2492.87 toks/s, output: 588.99 toks/s]
Processed prompts:  16%|█▌        | 83/526 [00:17<00:24, 18.08it/s, est. speed input: 2608.58 toks/s, output: 607.69 toks/s]
Processed prompts:  17%|█▋        | 88/526 [00:17<00:20, 21.77it/s, est. speed input: 2734.36 toks/s, output: 644.01 toks/s]
Processed prompts:  17%|█▋        | 91/526 [00:17<00:21, 20.24it/s, est. speed input: 2804.72 toks/s, output: 662.06 toks/s]
Processed prompts:  18%|█▊        | 96/526 [00:17<00:18, 23.62it/s, est. speed input: 2954.41 toks/s, output: 697.68 toks/s]
Processed prompts:  20%|█▉        | 103/526 [00:17<00:18, 22.53it/s, est. speed input: 3161.66 toks/s, output: 741.78 toks/s]
Processed prompts:  21%|██        | 109/526 [00:18<00:17, 24.32it/s, est. speed input: 3306.23 toks/s, output: 781.88 toks/s]
Processed prompts:  21%|██▏       | 113/526 [00:18<00:18, 21.89it/s, est. speed input: 3416.50 toks/s, output: 803.92 toks/s]
Processed prompts:  23%|██▎       | 119/526 [00:18<00:16, 25.17it/s, est. speed input: 3584.84 toks/s, output: 844.74 toks/s]
Processed prompts:  23%|██▎       | 122/526 [00:18<00:18, 22.36it/s, est. speed input: 3642.60 toks/s, output: 859.97 toks/s]
Processed prompts:  25%|██▍       | 129/526 [00:19<00:18, 21.18it/s, est. speed input: 3824.31 toks/s, output: 899.59 toks/s]
Processed prompts:  26%|██▌       | 136/526 [00:19<00:18, 20.61it/s, est. speed input: 3953.90 toks/s, output: 938.47 toks/s]
Processed prompts:  27%|██▋       | 140/526 [00:19<00:17, 22.37it/s, est. speed input: 4025.61 toks/s, output: 964.05 toks/s]
Processed prompts:  27%|██▋       | 143/526 [00:19<00:18, 20.47it/s, est. speed input: 4062.32 toks/s, output: 978.11 toks/s]
Processed prompts:  28%|██▊       | 147/526 [00:19<00:16, 22.76it/s, est. speed input: 4152.27 toks/s, output: 1003.62 toks/s]
Processed prompts:  29%|██▊       | 150/526 [00:20<00:17, 20.96it/s, est. speed input: 4221.51 toks/s, output: 1018.16 toks/s]
Processed prompts:  30%|██▉       | 156/526 [00:20<00:16, 22.41it/s, est. speed input: 4335.52 toks/s, output: 1053.11 toks/s]
Processed prompts:  30%|███       | 159/526 [00:20<00:17, 20.75it/s, est. speed input: 4392.97 toks/s, output: 1067.16 toks/s]
Processed prompts:  31%|███       | 163/526 [00:20<00:17, 20.94it/s, est. speed input: 4464.78 toks/s, output: 1088.66 toks/s]
Processed prompts:  32%|███▏      | 166/526 [00:20<00:18, 19.87it/s, est. speed input: 4511.53 toks/s, output: 1102.81 toks/s]
Processed prompts:  32%|███▏      | 169/526 [00:21<00:16, 21.65it/s, est. speed input: 4568.26 toks/s, output: 1120.77 toks/s]
Processed prompts:  33%|███▎      | 173/526 [00:21<00:16, 21.92it/s, est. speed input: 4642.33 toks/s, output: 1142.38 toks/s]
Processed prompts:  34%|███▍      | 178/526 [00:21<00:14, 23.51it/s, est. speed input: 4739.72 toks/s, output: 1171.08 toks/s]
Processed prompts:  34%|███▍      | 181/526 [00:21<00:14, 23.98it/s, est. speed input: 4795.02 toks/s, output: 1188.00 toks/s]
Processed prompts:  35%|███▌      | 185/526 [00:21<00:16, 20.80it/s, est. speed input: 4836.36 toks/s, output: 1205.24 toks/s]
Processed prompts:  36%|███▌      | 189/526 [00:22<00:18, 18.32it/s, est. speed input: 4890.32 toks/s, output: 1220.68 toks/s]
Processed prompts:  37%|███▋      | 192/526 [00:22<00:17, 19.51it/s, est. speed input: 4957.04 toks/s, output: 1236.81 toks/s]
Processed prompts:  37%|███▋      | 195/526 [00:22<00:18, 17.69it/s, est. speed input: 4993.98 toks/s, output: 1247.83 toks/s]
Processed prompts:  38%|███▊      | 198/526 [00:22<00:17, 18.31it/s, est. speed input: 5056.42 toks/s, output: 1262.45 toks/s]
Processed prompts:  39%|███▉      | 206/526 [00:22<00:16, 19.79it/s, est. speed input: 5225.17 toks/s, output: 1302.07 toks/s]
Processed prompts:  40%|███▉      | 210/526 [00:23<00:17, 18.17it/s, est. speed input: 5283.34 toks/s, output: 1316.98 toks/s]
Processed prompts:  40%|████      | 212/526 [00:23<00:19, 16.42it/s, est. speed input: 5305.99 toks/s, output: 1321.75 toks/s]
Processed prompts:  41%|████▏     | 218/526 [00:23<00:14, 20.71it/s, est. speed input: 5415.42 toks/s, output: 1356.90 toks/s]
Processed prompts:  42%|████▏     | 221/526 [00:23<00:16, 18.65it/s, est. speed input: 5463.82 toks/s, output: 1367.11 toks/s]
Processed prompts:  43%|████▎     | 225/526 [00:23<00:14, 21.25it/s, est. speed input: 5519.26 toks/s, output: 1389.89 toks/s]
Processed prompts:  43%|████▎     | 228/526 [00:24<00:14, 20.23it/s, est. speed input: 5563.78 toks/s, output: 1402.73 toks/s]
Processed prompts:  44%|████▍     | 231/526 [00:24<00:18, 15.68it/s, est. speed input: 5567.92 toks/s, output: 1407.40 toks/s]
Processed prompts:  44%|████▍     | 233/526 [00:24<00:20, 14.60it/s, est. speed input: 5593.39 toks/s, output: 1412.56 toks/s]
Processed prompts:  45%|████▍     | 235/526 [00:24<00:21, 13.74it/s, est. speed input: 5593.89 toks/s, output: 1417.79 toks/s]
Processed prompts:  45%|████▌     | 238/526 [00:24<00:23, 12.21it/s, est. speed input: 5615.59 toks/s, output: 1423.66 toks/s]
Processed prompts:  46%|████▌     | 240/526 [00:25<00:23, 12.06it/s, est. speed input: 5618.23 toks/s, output: 1429.60 toks/s]
Processed prompts:  46%|████▌     | 242/526 [00:25<00:25, 11.30it/s, est. speed input: 5622.25 toks/s, output: 1433.46 toks/s]
Processed prompts:  46%|████▋     | 244/526 [00:25<00:28,  9.87it/s, est. speed input: 5616.19 toks/s, output: 1433.99 toks/s]
Processed prompts:  47%|████▋     | 246/526 [00:26<00:35,  7.82it/s, est. speed input: 5578.52 toks/s, output: 1428.15 toks/s]
Processed prompts:  47%|████▋     | 247/526 [00:26<00:39,  7.14it/s, est. speed input: 5566.25 toks/s, output: 1425.34 toks/s]
Processed prompts:  47%|████▋     | 248/526 [00:26<00:39,  6.99it/s, est. speed input: 5562.45 toks/s, output: 1425.18 toks/s]
Processed prompts:  48%|████▊     | 250/526 [00:26<00:38,  7.18it/s, est. speed input: 5565.61 toks/s, output: 1427.60 toks/s]
Processed prompts:  48%|████▊     | 251/526 [00:26<00:37,  7.31it/s, est. speed input: 5569.21 toks/s, output: 1424.81 toks/s]
Processed prompts:  48%|████▊     | 252/526 [00:27<00:50,  5.41it/s, est. speed input: 5523.01 toks/s, output: 1409.97 toks/s]
Processed prompts:  48%|████▊     | 254/526 [00:27<00:39,  6.84it/s, est. speed input: 5524.83 toks/s, output: 1413.51 toks/s]
Processed prompts:  49%|████▊     | 256/526 [00:27<00:34,  7.80it/s, est. speed input: 5523.56 toks/s, output: 1412.97 toks/s]
Processed prompts:  49%|████▉     | 257/526 [00:27<00:36,  7.38it/s, est. speed input: 5514.13 toks/s, output: 1409.50 toks/s]
Processed prompts:  49%|████▉     | 259/526 [00:27<00:32,  8.12it/s, est. speed input: 5525.62 toks/s, output: 1406.98 toks/s]
Processed prompts:  49%|████▉     | 260/526 [00:28<00:37,  7.08it/s, est. speed input: 5507.55 toks/s, output: 1401.05 toks/s]
Processed prompts:  50%|████▉     | 261/526 [00:28<00:42,  6.28it/s, est. speed input: 5480.89 toks/s, output: 1394.27 toks/s]
Processed prompts:  50%|█████     | 263/526 [00:28<00:30,  8.52it/s, est. speed input: 5486.15 toks/s, output: 1395.76 toks/s]
Processed prompts:  50%|█████     | 265/526 [00:28<00:26,  9.67it/s, est. speed input: 5489.34 toks/s, output: 1397.38 toks/s]
Processed prompts:  51%|█████     | 267/526 [00:28<00:26,  9.60it/s, est. speed input: 5494.99 toks/s, output: 1396.61 toks/s]
Processed prompts:  51%|█████▏    | 270/526 [00:28<00:23, 11.01it/s, est. speed input: 5515.27 toks/s, output: 1397.94 toks/s]
Processed prompts:  52%|█████▏    | 274/526 [00:29<00:17, 14.51it/s, est. speed input: 5589.86 toks/s, output: 1409.91 toks/s]
Processed prompts:  53%|█████▎    | 281/526 [00:29<00:10, 22.56it/s, est. speed input: 5700.97 toks/s, output: 1432.91 toks/s]
Processed prompts:  55%|█████▍    | 288/526 [00:29<00:07, 30.90it/s, est. speed input: 5817.13 toks/s, output: 1465.28 toks/s]
Processed prompts:  56%|█████▌    | 292/526 [00:29<00:07, 31.92it/s, est. speed input: 5865.66 toks/s, output: 1477.90 toks/s]
Processed prompts:  57%|█████▋    | 298/526 [00:29<00:06, 37.26it/s, est. speed input: 5977.68 toks/s, output: 1500.94 toks/s]
Processed prompts:  58%|█████▊    | 304/526 [00:29<00:05, 41.57it/s, est. speed input: 6073.51 toks/s, output: 1525.18 toks/s]
Processed prompts:  59%|█████▊    | 309/526 [00:29<00:05, 39.11it/s, est. speed input: 6143.44 toks/s, output: 1541.50 toks/s]
Processed prompts:  61%|██████    | 322/526 [00:30<00:03, 60.29it/s, est. speed input: 6386.74 toks/s, output: 1594.68 toks/s]
Processed prompts:  63%|██████▎   | 329/526 [00:30<00:03, 52.84it/s, est. speed input: 6514.42 toks/s, output: 1621.96 toks/s]
Processed prompts:  64%|██████▎   | 335/526 [00:30<00:03, 54.18it/s, est. speed input: 6647.16 toks/s, output: 1651.52 toks/s]
Processed prompts:  66%|██████▌   | 345/526 [00:30<00:02, 60.74it/s, est. speed input: 6816.67 toks/s, output: 1692.19 toks/s]
Processed prompts:  69%|██████▊   | 361/526 [00:30<00:02, 80.13it/s, est. speed input: 7115.35 toks/s, output: 1768.90 toks/s]
Processed prompts:  71%|███████   | 371/526 [00:30<00:01, 80.57it/s, est. speed input: 7286.82 toks/s, output: 1813.14 toks/s]
Processed prompts:  72%|███████▏  | 380/526 [00:30<00:01, 79.04it/s, est. speed input: 7462.49 toks/s, output: 1850.87 toks/s]
Processed prompts:  74%|███████▍  | 389/526 [00:31<00:03, 43.35it/s, est. speed input: 7536.34 toks/s, output: 1868.90 toks/s]
Processed prompts:  76%|███████▌  | 398/526 [00:31<00:02, 49.73it/s, est. speed input: 7687.44 toks/s, output: 1908.81 toks/s]
Processed prompts:  77%|███████▋  | 407/526 [00:31<00:02, 54.91it/s, est. speed input: 7842.17 toks/s, output: 1945.93 toks/s]
Processed prompts:  79%|███████▉  | 417/526 [00:31<00:01, 61.67it/s, est. speed input: 8023.73 toks/s, output: 1989.30 toks/s]
Processed prompts:  83%|████████▎ | 434/526 [00:31<00:01, 83.18it/s, est. speed input: 8342.87 toks/s, output: 2073.79 toks/s]
Processed prompts:  84%|████████▍ | 444/526 [00:31<00:00, 85.87it/s, est. speed input: 8515.54 toks/s, output: 2123.50 toks/s]
Processed prompts:  86%|████████▋ | 454/526 [00:31<00:00, 84.68it/s, est. speed input: 8719.91 toks/s, output: 2169.00 toks/s]
Processed prompts:  88%|████████▊ | 464/526 [00:32<00:00, 84.62it/s, est. speed input: 8926.82 toks/s, output: 2214.29 toks/s]
Processed prompts:  90%|████████▉ | 473/526 [00:32<00:00, 71.24it/s, est. speed input: 9088.68 toks/s, output: 2259.19 toks/s]
Processed prompts:  91%|█████████▏| 481/526 [00:32<00:00, 52.20it/s, est. speed input: 9183.33 toks/s, output: 2287.07 toks/s]
Processed prompts:  93%|█████████▎| 488/526 [00:32<00:00, 49.36it/s, est. speed input: 9268.87 toks/s, output: 2318.22 toks/s]
Processed prompts:  94%|█████████▍| 494/526 [00:32<00:00, 46.05it/s, est. speed input: 9336.18 toks/s, output: 2340.23 toks/s]
Processed prompts:  95%|█████████▌| 500/526 [00:33<00:00, 42.52it/s, est. speed input: 9424.00 toks/s, output: 2358.13 toks/s]
Processed prompts:  96%|█████████▌| 505/526 [00:33<00:00, 40.76it/s, est. speed input: 9504.84 toks/s, output: 2383.15 toks/s]
Processed prompts:  97%|█████████▋| 510/526 [00:33<00:00, 22.51it/s, est. speed input: 9440.93 toks/s, output: 2378.68 toks/s]
Processed prompts:  98%|█████████▊| 514/526 [00:34<00:00, 17.15it/s, est. speed input: 9410.44 toks/s, output: 2380.40 toks/s]
Processed prompts:  98%|█████████▊| 517/526 [00:34<00:00, 15.01it/s, est. speed input: 9411.81 toks/s, output: 2389.12 toks/s]
Processed prompts:  99%|█████████▉| 520/526 [00:34<00:00, 12.97it/s, est. speed input: 9375.78 toks/s, output: 2394.11 toks/s]
Processed prompts:  99%|█████████▉| 522/526 [00:35<00:00, 10.77it/s, est. speed input: 9341.09 toks/s, output: 2391.21 toks/s]
Processed prompts: 100%|█████████▉| 524/526 [00:35<00:00,  7.34it/s, est. speed input: 9233.47 toks/s, output: 2368.28 toks/s]
Processed prompts: 100%|█████████▉| 525/526 [00:47<00:00,  7.34it/s, est. speed input: 8972.70 toks/s, output: 2306.74 toks/s]
Processed prompts: 100%|██████████| 526/526 [01:18<00:00,  4.75s/it, est. speed input: 4222.39 toks/s, output: 1136.15 toks/s]
Processed prompts: 100%|██████████| 526/526 [01:18<00:00,  6.70it/s, est. speed input: 4222.39 toks/s, output: 1136.15 toks/s]
{  "personalized_answer": "Starting the conversation about rules at your house versus others' can be a delicate balance. You might begin by explaining that different families have different rules, just like how different TV shows have different ways of showing stories. For example, you could say, 'At our house, we have a rule that we don't use big words like "sob" or "screw you," but other families might have different rules. It's important to follow our family's rules because they help keep us safe and happy.' As your toddler grows, you can gradually introduce more complex concepts, such as why certain behaviors are acceptable in one setting but not in another. This approach helps build their understanding of context and respect for different environments, while also reinforcing the importance of following your family's specific rules."}
Invalid JSON
{  "personalized_answer": "To change scenes without changing chapters in your writing, consider using a technique called 'scene breaks.' These can be indicated by using a line of asterisks (*) or a double line break to signify a shift in time, place, or perspective. This method allows you to maintain the flow of your narrative while clearly separating different segments of the story. For example, you could write: 'The sun began to set, casting long shadows across the room
Invalid JSON
None

Processed prompts:   0%|          | 0/2 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts:  50%|█████     | 1/2 [00:01<00:01,  1.76s/it, est. speed input: 263.33 toks/s, output: 79.06 toks/s]
Processed prompts: 100%|██████████| 2/2 [00:02<00:00,  1.08s/it, est. speed input: 473.11 toks/s, output: 139.65 toks/s]
Processed prompts: 100%|██████████| 2/2 [00:02<00:00,  1.18s/it, est. speed input: 473.11 toks/s, output: 139.65 toks/s]
[rank0]:[W707 16:34:06.202536015 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
Experiment complete! Output can be found at data/out/rag/full_profile/lp_rag_full_profile_test_2_output.json
Cleaned temporary files.
Keeping ['ae', 'lp', 'sc'] in profile
Temp data file saved at data/processed/TEMP_sc_processed_test.json.
	Running Ranking: ['python', 'retrieval/rank_dataset.py', '--model_name', 'facebook/contriever-msmarco', '--input_dataset_addr', 'data/processed/TEMP_sc_processed_test.json', '--output_dataset_addr', 'data/processed/TEMP_sc_processed_test.json', '--batch_size', '4']

  0%|          | 0/424 [00:00<?, ?it/s]
  0%|          | 1/424 [00:00<03:00,  2.34it/s]
  0%|          | 2/424 [00:01<05:07,  1.37it/s]
  1%|          | 3/424 [00:01<03:06,  2.26it/s]
  1%|          | 4/424 [00:03<06:35,  1.06it/s]
  1%|          | 5/424 [00:03<04:52,  1.43it/s]
  2%|▏         | 7/424 [00:04<04:08,  1.68it/s]
  2%|▏         | 8/424 [00:05<04:12,  1.65it/s]
  2%|▏         | 9/424 [00:05<03:15,  2.12it/s]
  2%|▏         | 10/424 [00:05<02:52,  2.39it/s]
  3%|▎         | 11/424 [00:05<02:20,  2.94it/s]
  3%|▎         | 12/424 [00:05<02:15,  3.04it/s]
  3%|▎         | 13/424 [00:07<05:10,  1.32it/s]
  3%|▎         | 14/424 [00:07<03:59,  1.71it/s]
  4%|▎         | 15/424 [00:08<03:14,  2.11it/s]
  4%|▍         | 16/424 [00:08<03:26,  1.97it/s]
  4%|▍         | 17/424 [00:08<02:58,  2.28it/s]
  4%|▍         | 18/424 [00:09<02:33,  2.64it/s]
  4%|▍         | 19/424 [00:09<03:01,  2.24it/s]
  5%|▍         | 20/424 [00:09<02:27,  2.74it/s]
  5%|▍         | 21/424 [00:10<01:59,  3.36it/s]
  5%|▌         | 22/424 [00:10<02:41,  2.50it/s]
  5%|▌         | 23/424 [00:12<04:50,  1.38it/s]
  6%|▌         | 24/424 [00:12<04:37,  1.44it/s]
  6%|▌         | 25/424 [00:13<05:04,  1.31it/s]
  6%|▌         | 26/424 [00:14<04:46,  1.39it/s]
  6%|▋         | 27/424 [00:16<06:40,  1.01s/it]
  7%|▋         | 28/424 [00:16<05:53,  1.12it/s]
  7%|▋         | 29/424 [00:16<04:38,  1.42it/s]
  7%|▋         | 30/424 [00:17<03:36,  1.82it/s]
  7%|▋         | 31/424 [00:17<03:43,  1.76it/s]
  8%|▊         | 33/424 [00:17<02:12,  2.96it/s]
  8%|▊         | 34/424 [00:18<02:04,  3.13it/s]
  8%|▊         | 36/424 [00:18<01:23,  4.67it/s]
  9%|▊         | 37/424 [00:19<02:10,  2.96it/s]
  9%|▉         | 38/424 [00:19<02:04,  3.10it/s]
  9%|▉         | 40/424 [00:19<01:34,  4.08it/s]
 10%|▉         | 41/424 [00:19<01:34,  4.06it/s]
 10%|▉         | 42/424 [00:20<02:09,  2.94it/s]
 10%|█         | 43/424 [00:20<01:49,  3.47it/s]
 10%|█         | 44/424 [00:22<04:10,  1.52it/s]
 11%|█         | 45/424 [00:22<04:04,  1.55it/s]
 11%|█         | 46/424 [00:23<03:23,  1.86it/s]
 11%|█         | 47/424 [00:23<03:30,  1.79it/s]
 11%|█▏        | 48/424 [00:24<03:37,  1.73it/s]
 12%|█▏        | 49/424 [00:25<03:40,  1.70it/s]
 12%|█▏        | 51/424 [00:25<02:54,  2.13it/s]
 12%|█▏        | 52/424 [00:26<02:53,  2.14it/s]
 12%|█▎        | 53/424 [00:26<03:05,  1.99it/s]
 13%|█▎        | 54/424 [00:27<03:44,  1.65it/s]
 13%|█▎        | 55/424 [00:27<03:08,  1.95it/s]
 13%|█▎        | 56/424 [00:28<03:18,  1.85it/s]
 14%|█▎        | 58/424 [00:28<01:59,  3.07it/s]
 14%|█▍        | 59/424 [00:30<03:57,  1.54it/s]
 15%|█▍        | 62/424 [00:33<05:15,  1.15it/s]
 15%|█▍        | 63/424 [00:34<04:57,  1.21it/s]
 15%|█▌        | 64/424 [00:34<04:13,  1.42it/s]
 15%|█▌        | 65/424 [00:34<03:21,  1.78it/s]
 16%|█▌        | 66/424 [00:36<05:00,  1.19it/s]
 16%|█▌        | 67/424 [00:36<03:59,  1.49it/s]
 16%|█▌        | 68/424 [00:36<03:48,  1.56it/s]
 16%|█▋        | 69/424 [00:38<05:28,  1.08it/s]
 17%|█▋        | 70/424 [00:38<04:27,  1.32it/s]
 17%|█▋        | 71/424 [00:39<03:45,  1.57it/s]
 17%|█▋        | 72/424 [00:39<03:14,  1.81it/s]
 17%|█▋        | 73/424 [00:39<02:52,  2.03it/s]
 17%|█▋        | 74/424 [00:40<02:35,  2.25it/s]
 18%|█▊        | 75/424 [00:42<05:19,  1.09it/s]
 18%|█▊        | 77/424 [00:42<03:23,  1.70it/s]
 18%|█▊        | 78/424 [00:42<02:44,  2.10it/s]
 19%|█▉        | 80/424 [00:43<01:49,  3.13it/s]
 19%|█▉        | 81/424 [00:43<02:29,  2.30it/s]
 19%|█▉        | 82/424 [00:44<02:58,  1.92it/s]
 20%|█▉        | 83/424 [00:45<03:38,  1.56it/s]
 20%|█▉        | 84/424 [00:45<02:48,  2.01it/s]
 20%|██        | 85/424 [00:46<03:36,  1.57it/s]
 20%|██        | 86/424 [00:47<03:56,  1.43it/s]
 21%|██        | 87/424 [00:48<04:22,  1.28it/s]
 21%|██        | 88/424 [00:48<03:41,  1.52it/s]
 21%|██        | 89/424 [00:49<04:12,  1.32it/s]
 21%|██        | 90/424 [00:50<03:16,  1.70it/s]
 21%|██▏       | 91/424 [00:51<03:58,  1.40it/s]
 22%|██▏       | 92/424 [00:52<04:24,  1.25it/s]
 22%|██▏       | 93/424 [00:52<04:05,  1.35it/s]
 22%|██▏       | 94/424 [00:53<04:26,  1.24it/s]
 22%|██▏       | 95/424 [00:53<03:18,  1.66it/s]
 23%|██▎       | 96/424 [00:54<02:51,  1.92it/s]
 23%|██▎       | 98/424 [00:54<01:45,  3.10it/s]
 23%|██▎       | 99/424 [00:54<01:31,  3.54it/s]
 24%|██▎       | 100/424 [00:55<01:55,  2.79it/s]
 24%|██▍       | 101/424 [00:56<03:22,  1.60it/s]
 24%|██▍       | 102/424 [00:56<02:51,  1.88it/s]
 24%|██▍       | 103/424 [00:56<02:23,  2.24it/s]
 25%|██▍       | 104/424 [00:57<01:57,  2.72it/s]
 25%|██▍       | 105/424 [00:57<02:24,  2.20it/s]
 25%|██▌       | 106/424 [00:57<01:52,  2.82it/s]
 25%|██▌       | 107/424 [00:58<02:21,  2.25it/s]
 26%|██▌       | 109/424 [01:02<05:26,  1.04s/it]
 26%|██▌       | 110/424 [01:03<06:15,  1.20s/it]
 26%|██▌       | 111/424 [01:04<05:19,  1.02s/it]
 26%|██▋       | 112/424 [01:04<04:02,  1.29it/s]
 27%|██▋       | 114/424 [01:04<02:24,  2.15it/s]
 27%|██▋       | 116/424 [01:04<01:40,  3.06it/s]
 28%|██▊       | 118/424 [01:04<01:19,  3.86it/s]
 28%|██▊       | 119/424 [01:05<01:14,  4.07it/s]
 29%|██▊       | 121/424 [01:05<01:01,  4.92it/s]
 29%|██▉       | 122/424 [01:12<07:46,  1.55s/it]
 29%|██▉       | 123/424 [01:18<13:49,  2.76s/it]
 29%|██▉       | 124/424 [01:25<18:49,  3.77s/it]
 29%|██▉       | 125/424 [01:32<22:42,  4.56s/it]
 30%|██▉       | 126/424 [01:39<25:46,  5.19s/it]
 30%|██▉       | 127/424 [01:46<28:00,  5.66s/it]
 30%|███       | 128/424 [01:47<21:20,  4.32s/it]
 30%|███       | 129/424 [01:48<16:24,  3.34s/it]
 31%|███       | 130/424 [01:49<12:53,  2.63s/it]
 31%|███       | 131/424 [01:50<10:26,  2.14s/it]
 31%|███       | 132/424 [01:50<07:59,  1.64s/it]
 31%|███▏      | 133/424 [01:51<06:33,  1.35s/it]
 32%|███▏      | 134/424 [01:51<04:45,  1.02it/s]
 32%|███▏      | 135/424 [01:51<03:34,  1.34it/s]
 32%|███▏      | 136/424 [01:51<02:45,  1.74it/s]
 32%|███▏      | 137/424 [01:51<02:11,  2.18it/s]
 33%|███▎      | 138/424 [01:52<01:46,  2.67it/s]
 33%|███▎      | 139/424 [01:52<01:29,  3.17it/s]
 33%|███▎      | 140/424 [01:52<01:12,  3.92it/s]
 33%|███▎      | 141/424 [01:52<01:05,  4.33it/s]
 33%|███▎      | 142/424 [01:52<01:01,  4.59it/s]
 34%|███▎      | 143/424 [01:52<00:58,  4.81it/s]
 34%|███▍      | 144/424 [01:53<00:56,  4.96it/s]
 34%|███▍      | 145/424 [01:53<00:53,  5.21it/s]
 34%|███▍      | 146/424 [01:53<00:51,  5.37it/s]
 35%|███▍      | 147/424 [01:53<00:51,  5.42it/s]
 35%|███▍      | 148/424 [01:53<00:50,  5.45it/s]
 35%|███▌      | 149/424 [01:54<00:50,  5.48it/s]
 35%|███▌      | 150/424 [01:54<00:50,  5.45it/s]
 36%|███▌      | 151/424 [01:54<00:50,  5.42it/s]
 36%|███▌      | 152/424 [01:54<00:49,  5.47it/s]
 36%|███▌      | 153/424 [01:54<00:49,  5.47it/s]
 36%|███▋      | 154/424 [01:54<00:48,  5.51it/s]
 37%|███▋      | 155/424 [01:55<00:48,  5.52it/s]
 37%|███▋      | 156/424 [01:55<00:48,  5.52it/s]
 37%|███▋      | 157/424 [01:55<00:48,  5.51it/s]
 37%|███▋      | 158/424 [01:55<00:48,  5.48it/s]
 38%|███▊      | 159/424 [01:55<00:48,  5.46it/s]
 38%|███▊      | 160/424 [01:57<02:58,  1.48it/s]
 38%|███▊      | 161/424 [01:57<02:18,  1.90it/s]
 38%|███▊      | 162/424 [01:58<01:51,  2.35it/s]
 38%|███▊      | 163/424 [01:58<01:31,  2.86it/s]
 39%|███▊      | 164/424 [01:58<01:18,  3.31it/s]
 39%|███▉      | 165/424 [01:58<01:08,  3.77it/s]
 39%|███▉      | 166/424 [01:58<00:57,  4.53it/s]
 39%|███▉      | 167/424 [01:58<00:54,  4.73it/s]
 40%|███▉      | 168/424 [01:59<01:02,  4.12it/s]
 40%|███▉      | 169/424 [01:59<01:09,  3.65it/s]
 40%|████      | 170/424 [01:59<01:12,  3.50it/s]
 40%|████      | 171/424 [02:00<01:23,  3.02it/s]
 41%|████      | 172/424 [02:00<01:07,  3.72it/s]
 41%|████      | 174/424 [02:01<01:28,  2.82it/s]
 41%|████▏     | 175/424 [02:01<01:13,  3.40it/s]
 42%|████▏     | 176/424 [02:01<01:04,  3.87it/s]
 42%|████▏     | 177/424 [02:01<00:56,  4.34it/s]
 42%|████▏     | 178/424 [02:02<01:01,  4.03it/s]
 42%|████▏     | 179/424 [02:02<01:00,  4.07it/s]
 42%|████▏     | 180/424 [02:02<01:10,  3.48it/s]
 43%|████▎     | 181/424 [02:02<01:00,  4.05it/s]
 43%|████▎     | 182/424 [02:03<00:57,  4.21it/s]
 43%|████▎     | 183/424 [02:03<00:56,  4.25it/s]
 43%|████▎     | 184/424 [02:03<01:17,  3.08it/s]
 44%|████▎     | 185/424 [02:04<01:38,  2.42it/s]
 44%|████▍     | 186/424 [02:04<01:42,  2.31it/s]
 44%|████▍     | 187/424 [02:05<01:37,  2.43it/s]
 44%|████▍     | 188/424 [02:05<01:35,  2.46it/s]
 45%|████▍     | 189/424 [02:07<02:59,  1.31it/s]
 45%|████▍     | 190/424 [02:11<06:54,  1.77s/it]
 45%|████▌     | 191/424 [02:11<05:15,  1.35s/it]
 45%|████▌     | 192/424 [02:13<05:35,  1.45s/it]
 46%|████▌     | 194/424 [02:13<03:24,  1.13it/s]
 46%|████▌     | 196/424 [02:14<02:29,  1.52it/s]
 46%|████▋     | 197/424 [02:14<02:09,  1.75it/s]
 47%|████▋     | 198/424 [02:15<01:48,  2.08it/s]
 47%|████▋     | 199/424 [02:15<02:04,  1.81it/s]
 47%|████▋     | 200/424 [02:15<01:42,  2.18it/s]
 47%|████▋     | 201/424 [02:17<02:54,  1.27it/s]
 48%|████▊     | 202/424 [02:17<02:16,  1.63it/s]
 48%|████▊     | 203/424 [02:19<03:24,  1.08it/s]
 48%|████▊     | 204/424 [02:22<05:46,  1.58s/it]
 48%|████▊     | 205/424 [02:23<04:38,  1.27s/it]
 49%|████▊     | 206/424 [02:26<06:33,  1.80s/it]
 49%|████▉     | 207/424 [02:26<04:53,  1.35s/it]
 49%|████▉     | 208/424 [02:26<03:45,  1.05s/it]
 49%|████▉     | 209/424 [02:27<02:49,  1.27it/s]
 50%|████▉     | 210/424 [02:27<02:17,  1.55it/s]
 50%|█████     | 212/424 [02:27<01:21,  2.60it/s]
 50%|█████     | 213/424 [02:28<01:29,  2.36it/s]
 50%|█████     | 214/424 [02:28<01:36,  2.17it/s]
 51%|█████     | 215/424 [02:29<01:57,  1.78it/s]
 51%|█████     | 216/424 [02:29<01:33,  2.22it/s]
 51%|█████     | 217/424 [02:29<01:18,  2.62it/s]
 51%|█████▏    | 218/424 [02:30<01:12,  2.84it/s]
 52%|█████▏    | 219/424 [02:30<01:06,  3.06it/s]
 52%|█████▏    | 220/424 [02:31<01:37,  2.08it/s]
 52%|█████▏    | 221/424 [02:31<01:27,  2.32it/s]
 52%|█████▏    | 222/424 [02:31<01:19,  2.53it/s]
 53%|█████▎    | 223/424 [02:32<01:12,  2.79it/s]
 53%|█████▎    | 224/424 [02:32<01:08,  2.92it/s]
 53%|█████▎    | 225/424 [02:34<02:22,  1.40it/s]
 54%|█████▎    | 227/424 [02:34<01:32,  2.13it/s]
 54%|█████▍    | 229/424 [02:34<01:02,  3.10it/s]
 54%|█████▍    | 230/424 [02:37<03:06,  1.04it/s]
 54%|█████▍    | 231/424 [02:38<02:45,  1.17it/s]
 55%|█████▍    | 232/424 [02:38<02:07,  1.50it/s]
 55%|█████▍    | 233/424 [02:40<02:58,  1.07it/s]
 55%|█████▌    | 234/424 [02:47<08:15,  2.61s/it]
 55%|█████▌    | 235/424 [02:47<06:37,  2.10s/it]
 56%|█████▌    | 236/424 [02:48<05:01,  1.60s/it]
 56%|█████▌    | 238/424 [02:48<02:49,  1.10it/s]
 57%|█████▋    | 240/424 [02:50<02:45,  1.11it/s]
 57%|█████▋    | 241/424 [02:51<02:41,  1.13it/s]
 57%|█████▋    | 242/424 [02:51<02:08,  1.42it/s]
 57%|█████▋    | 243/424 [02:51<01:53,  1.60it/s]
 58%|█████▊    | 244/424 [02:52<01:54,  1.57it/s]
 58%|█████▊    | 245/424 [02:52<01:28,  2.02it/s]
 58%|█████▊    | 246/424 [02:52<01:18,  2.26it/s]
 58%|█████▊    | 247/424 [02:54<02:20,  1.26it/s]
 58%|█████▊    | 248/424 [02:54<01:45,  1.67it/s]
 59%|█████▊    | 249/424 [02:54<01:19,  2.20it/s]
 59%|█████▉    | 250/424 [02:55<01:30,  1.92it/s]
 59%|█████▉    | 251/424 [02:55<01:12,  2.40it/s]
 59%|█████▉    | 252/424 [02:55<00:56,  3.06it/s]
 60%|█████▉    | 253/424 [02:55<00:45,  3.79it/s]
 60%|█████▉    | 254/424 [02:55<00:37,  4.58it/s]
 60%|██████    | 255/424 [02:55<00:31,  5.40it/s]
 60%|██████    | 256/424 [02:55<00:27,  6.15it/s]
 61%|██████    | 257/424 [02:56<00:24,  6.80it/s]
 61%|██████    | 258/424 [02:56<00:22,  7.28it/s]
 61%|██████    | 259/424 [02:56<00:30,  5.43it/s]
 61%|██████▏   | 260/424 [02:57<01:08,  2.39it/s]
 62%|██████▏   | 261/424 [02:57<00:52,  3.09it/s]
 62%|██████▏   | 263/424 [02:58<01:06,  2.42it/s]
 62%|██████▏   | 264/424 [02:58<00:54,  2.96it/s]
 63%|██████▎   | 266/424 [02:59<00:47,  3.36it/s]
 63%|██████▎   | 267/424 [02:59<00:40,  3.91it/s]
 63%|██████▎   | 268/424 [02:59<00:34,  4.56it/s]
 63%|██████▎   | 269/424 [03:00<00:58,  2.64it/s]
 64%|██████▎   | 270/424 [03:00<00:46,  3.28it/s]
 64%|██████▍   | 272/424 [03:00<00:31,  4.90it/s]
 64%|██████▍   | 273/424 [03:00<00:30,  4.93it/s]
 65%|██████▍   | 275/424 [03:00<00:21,  6.91it/s]
 65%|██████▌   | 277/424 [03:00<00:17,  8.20it/s]
 66%|██████▌   | 279/424 [03:02<00:40,  3.59it/s]
 66%|██████▌   | 280/424 [03:02<00:43,  3.29it/s]
 66%|██████▋   | 281/424 [03:02<00:46,  3.09it/s]
 67%|██████▋   | 283/424 [03:06<01:55,  1.22it/s]
 67%|██████▋   | 284/424 [03:06<01:34,  1.49it/s]
 67%|██████▋   | 285/424 [03:06<01:15,  1.85it/s]
 68%|██████▊   | 287/424 [03:06<00:56,  2.43it/s]
 68%|██████▊   | 288/424 [03:07<00:53,  2.52it/s]
 68%|██████▊   | 289/424 [03:07<00:49,  2.71it/s]
 69%|██████▊   | 291/424 [03:07<00:36,  3.67it/s]
 69%|██████▉   | 292/424 [03:07<00:30,  4.27it/s]
 69%|██████▉   | 293/424 [03:11<02:06,  1.04it/s]
 70%|██████▉   | 295/424 [03:11<01:36,  1.34it/s]
 70%|██████▉   | 296/424 [03:12<01:17,  1.65it/s]
 70%|███████   | 297/424 [03:12<01:10,  1.81it/s]
 70%|███████   | 298/424 [03:12<00:59,  2.13it/s]
 71%|███████   | 299/424 [03:12<00:48,  2.56it/s]
 71%|███████   | 301/424 [03:13<00:35,  3.45it/s]
 71%|███████   | 302/424 [03:20<03:46,  1.86s/it]
 71%|███████▏  | 303/424 [03:20<03:00,  1.49s/it]
 72%|███████▏  | 304/424 [03:20<02:16,  1.14s/it]
 72%|███████▏  | 305/424 [03:20<01:49,  1.09it/s]
 72%|███████▏  | 306/424 [03:21<01:31,  1.29it/s]
 72%|███████▏  | 307/424 [03:21<01:08,  1.72it/s]
 73%|███████▎  | 308/424 [03:21<00:56,  2.06it/s]
 73%|███████▎  | 309/424 [03:22<00:57,  2.00it/s]
 73%|███████▎  | 310/424 [03:23<01:14,  1.54it/s]
 74%|███████▎  | 312/424 [03:23<00:45,  2.44it/s]
 74%|███████▍  | 313/424 [03:23<00:40,  2.75it/s]
 74%|███████▍  | 314/424 [03:24<00:41,  2.66it/s]
 74%|███████▍  | 315/424 [03:25<01:07,  1.60it/s]
 75%|███████▍  | 316/424 [03:25<00:51,  2.08it/s]
 75%|███████▍  | 317/424 [03:26<01:18,  1.37it/s]
 75%|███████▌  | 318/424 [03:28<01:36,  1.10it/s]
 75%|███████▌  | 319/424 [03:28<01:17,  1.35it/s]
 75%|███████▌  | 320/424 [03:28<01:00,  1.72it/s]
 76%|███████▌  | 322/424 [03:28<00:35,  2.84it/s]
 76%|███████▌  | 323/424 [03:29<00:31,  3.21it/s]
 76%|███████▋  | 324/424 [03:29<00:27,  3.65it/s]
 77%|███████▋  | 325/424 [03:29<00:24,  4.03it/s]
 77%|███████▋  | 326/424 [03:36<03:24,  2.09s/it]
 77%|███████▋  | 327/424 [03:37<03:01,  1.87s/it]
 77%|███████▋  | 328/424 [03:38<02:29,  1.56s/it]
 78%|███████▊  | 329/424 [03:38<01:55,  1.22s/it]
 78%|███████▊  | 330/424 [03:40<01:57,  1.25s/it]
 78%|███████▊  | 331/424 [03:40<01:25,  1.08it/s]
 79%|███████▊  | 333/424 [03:41<01:17,  1.18it/s]
 79%|███████▉  | 334/424 [03:42<01:06,  1.36it/s]
 79%|███████▉  | 335/424 [03:42<01:02,  1.41it/s]
 79%|███████▉  | 336/424 [03:44<01:32,  1.05s/it]
 79%|███████▉  | 337/424 [03:51<03:52,  2.67s/it]
 80%|███████▉  | 338/424 [03:52<02:55,  2.04s/it]
 80%|███████▉  | 339/424 [03:53<02:25,  1.72s/it]
 80%|████████  | 340/424 [03:59<04:30,  3.22s/it]
 80%|████████  | 341/424 [04:01<03:49,  2.77s/it]
 81%|████████  | 342/424 [04:03<03:19,  2.43s/it]
 81%|████████  | 343/424 [04:03<02:22,  1.76s/it]
 81%|████████  | 344/424 [04:04<01:55,  1.45s/it]
 81%|████████▏ | 345/424 [04:04<01:22,  1.05s/it]
 82%|████████▏ | 346/424 [04:04<01:06,  1.17it/s]
 82%|████████▏ | 347/424 [04:05<01:03,  1.22it/s]
 83%|████████▎ | 350/424 [04:06<00:39,  1.90it/s]
 83%|████████▎ | 352/424 [04:13<01:50,  1.53s/it]
 83%|████████▎ | 353/424 [04:13<01:34,  1.34s/it]
 83%|████████▎ | 354/424 [04:14<01:27,  1.26s/it]
 84%|████████▎ | 355/424 [04:14<01:08,  1.01it/s]
 84%|████████▍ | 356/424 [04:16<01:18,  1.16s/it]
 84%|████████▍ | 357/424 [04:17<01:13,  1.10s/it]
 84%|████████▍ | 358/424 [04:18<01:11,  1.08s/it]
 85%|████████▍ | 359/424 [04:19<01:09,  1.07s/it]
 85%|████████▍ | 360/424 [04:19<00:52,  1.21it/s]
 85%|████████▌ | 361/424 [04:19<00:40,  1.55it/s]
 85%|████████▌ | 362/424 [04:20<00:34,  1.78it/s]
 86%|████████▌ | 363/424 [04:26<02:25,  2.39s/it]
 86%|████████▌ | 364/424 [04:27<01:47,  1.80s/it]
 86%|████████▌ | 365/424 [04:27<01:18,  1.32s/it]
 86%|████████▋ | 366/424 [04:27<00:55,  1.04it/s]
 87%|████████▋ | 367/424 [04:27<00:40,  1.42it/s]
 87%|████████▋ | 368/424 [04:34<02:22,  2.55s/it]
 87%|████████▋ | 369/424 [04:34<01:43,  1.89s/it]
 87%|████████▋ | 370/424 [04:35<01:13,  1.35s/it]
 88%|████████▊ | 372/424 [04:35<00:40,  1.29it/s]
 88%|████████▊ | 373/424 [04:35<00:32,  1.56it/s]
 88%|████████▊ | 374/424 [04:36<00:36,  1.37it/s]
 89%|████████▊ | 376/424 [04:37<00:27,  1.72it/s]
 89%|████████▉ | 377/424 [04:38<00:35,  1.34it/s]
 89%|████████▉ | 378/424 [04:38<00:27,  1.67it/s]
 89%|████████▉ | 379/424 [04:39<00:26,  1.70it/s]
 90%|████████▉ | 380/424 [04:40<00:37,  1.17it/s]
 90%|█████████ | 382/424 [04:42<00:33,  1.25it/s]
 91%|█████████ | 384/424 [04:42<00:21,  1.83it/s]
 91%|█████████ | 385/424 [04:42<00:18,  2.12it/s]
 91%|█████████▏| 387/424 [04:42<00:11,  3.20it/s]
 92%|█████████▏| 388/424 [04:43<00:13,  2.67it/s]
 92%|█████████▏| 389/424 [04:47<00:45,  1.29s/it]
 92%|█████████▏| 390/424 [04:47<00:34,  1.01s/it]
 92%|█████████▏| 391/424 [04:48<00:25,  1.28it/s]
 92%|█████████▏| 392/424 [04:48<00:19,  1.66it/s]
 93%|█████████▎| 393/424 [04:48<00:19,  1.58it/s]
 93%|█████████▎| 394/424 [04:49<00:19,  1.56it/s]
 93%|█████████▎| 395/424 [04:51<00:27,  1.06it/s]
 93%|█████████▎| 396/424 [04:52<00:26,  1.04it/s]
 94%|█████████▎| 397/424 [04:53<00:28,  1.06s/it]
 94%|█████████▍| 398/424 [04:54<00:29,  1.13s/it]
 94%|█████████▍| 399/424 [04:55<00:22,  1.11it/s]
 94%|█████████▍| 400/424 [04:55<00:19,  1.22it/s]
 95%|█████████▍| 401/424 [04:56<00:14,  1.55it/s]
 95%|█████████▍| 402/424 [04:59<00:31,  1.41s/it]
 95%|█████████▌| 403/424 [05:01<00:37,  1.76s/it]
 95%|█████████▌| 404/424 [05:02<00:25,  1.30s/it]
 96%|█████████▌| 405/424 [05:02<00:19,  1.03s/it]
 96%|█████████▌| 406/424 [05:02<00:13,  1.32it/s]
 96%|█████████▌| 407/424 [05:03<00:15,  1.09it/s]
 96%|█████████▌| 408/424 [05:04<00:15,  1.05it/s]
 96%|█████████▋| 409/424 [05:07<00:21,  1.44s/it]
 97%|█████████▋| 410/424 [05:07<00:15,  1.11s/it]
 97%|█████████▋| 411/424 [05:08<00:13,  1.06s/it]
 97%|█████████▋| 412/424 [05:08<00:09,  1.27it/s]
 97%|█████████▋| 413/424 [05:10<00:11,  1.05s/it]
 98%|█████████▊| 415/424 [05:12<00:08,  1.08it/s]
 98%|█████████▊| 416/424 [05:12<00:06,  1.16it/s]
 98%|█████████▊| 417/424 [05:13<00:05,  1.25it/s]
 99%|█████████▊| 418/424 [05:17<00:10,  1.74s/it]
 99%|█████████▉| 419/424 [05:18<00:07,  1.43s/it]
 99%|█████████▉| 420/424 [05:19<00:05,  1.49s/it]
 99%|█████████▉| 421/424 [05:20<00:04,  1.34s/it]
100%|█████████▉| 422/424 [05:21<00:01,  1.01it/s]
100%|█████████▉| 423/424 [05:25<00:01,  1.92s/it]
100%|██████████| 424/424 [05:26<00:00,  1.65s/it]
100%|██████████| 424/424 [05:26<00:00,  1.30it/s]
	Running baseline: ['python', 'baselines.py', '--model_addr', 'Qwen/Qwen2.5-7B-Instruct', '--inputs_addr', 'data/processed/TEMP_sc_processed_test.json', '--output_addr', 'data/out/rag/full_profile/sc_rag_full_profile_test_2_output.json', '--temperature', '0.0', '--top_p', '0.95', '--max_tokens', '4096', '--num_generated_outputs', '1', '--num_contexts', '2', '--max_retries', '5', '--cache_dir', '/work/pi_hzamani_umass_edu/ozel_cache/', '--rag']
INFO 07-07 16:40:01 config.py:510] This model supports multiple tasks: {'generate', 'classify', 'reward', 'score', 'embed'}. Defaulting to 'generate'.
INFO 07-07 16:40:01 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-7B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-7B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768, download_dir='/work/pi_hzamani_umass_edu/ozel_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-7B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-07 16:40:02 selector.py:120] Using Flash Attention backend.
INFO 07-07 16:40:03 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-7B-Instruct...
INFO 07-07 16:40:03 weight_utils.py:251] Using model weights format ['*.safetensors']

Loading safetensors checkpoint shards:   0% Completed | 0/4 [00:00<?, ?it/s]

Loading safetensors checkpoint shards:  25% Completed | 1/4 [00:00<00:02,  1.25it/s]

Loading safetensors checkpoint shards:  50% Completed | 2/4 [00:01<00:01,  1.17it/s]

Loading safetensors checkpoint shards:  75% Completed | 3/4 [00:02<00:00,  1.18it/s]

Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:03<00:00,  1.23it/s]

Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:03<00:00,  1.21it/s]

INFO 07-07 16:40:07 model_runner.py:1099] Loading model weights took 14.2487 GB
INFO 07-07 16:40:09 worker.py:241] Memory profiling takes 2.11 seconds
INFO 07-07 16:40:09 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.90) = 71.33GiB
INFO 07-07 16:40:09 worker.py:241] model weights take 14.25GiB; non_torch_memory takes 0.14GiB; PyTorch activation peak memory takes 4.35GiB; the rest of the memory reserved for KV Cache is 52.59GiB.
INFO 07-07 16:40:09 gpu_executor.py:76] # GPU blocks: 61542, # CPU blocks: 4681
INFO 07-07 16:40:09 gpu_executor.py:80] Maximum concurrency for 32768 tokens per request: 30.05x
INFO 07-07 16:40:12 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.

Capturing CUDA graph shapes:   0%|          | 0/35 [00:00<?, ?it/s]
Capturing CUDA graph shapes:   3%|▎         | 1/35 [00:00<00:14,  2.29it/s]
Capturing CUDA graph shapes:   6%|▌         | 2/35 [00:00<00:11,  2.77it/s]
Capturing CUDA graph shapes:   9%|▊         | 3/35 [00:01<00:11,  2.87it/s]
Capturing CUDA graph shapes:  11%|█▏        | 4/35 [00:01<00:10,  3.04it/s]
Capturing CUDA graph shapes:  14%|█▍        | 5/35 [00:01<00:09,  3.02it/s]
Capturing CUDA graph shapes:  17%|█▋        | 6/35 [00:02<00:09,  3.02it/s]
Capturing CUDA graph shapes:  20%|██        | 7/35 [00:02<00:09,  3.07it/s]
Capturing CUDA graph shapes:  23%|██▎       | 8/35 [00:02<00:08,  3.16it/s]
Capturing CUDA graph shapes:  26%|██▌       | 9/35 [00:02<00:07,  3.25it/s]
Capturing CUDA graph shapes:  29%|██▊       | 10/35 [00:03<00:07,  3.14it/s]
Capturing CUDA graph shapes:  31%|███▏      | 11/35 [00:03<00:07,  3.20it/s]
Capturing CUDA graph shapes:  34%|███▍      | 12/35 [00:03<00:07,  3.08it/s]
Capturing CUDA graph shapes:  37%|███▋      | 13/35 [00:04<00:07,  3.10it/s]
Capturing CUDA graph shapes:  40%|████      | 14/35 [00:04<00:06,  3.20it/s]
Capturing CUDA graph shapes:  43%|████▎     | 15/35 [00:04<00:06,  3.29it/s]
Capturing CUDA graph shapes:  46%|████▌     | 16/35 [00:05<00:05,  3.35it/s]
Capturing CUDA graph shapes:  49%|████▊     | 17/35 [00:05<00:05,  3.42it/s]
Capturing CUDA graph shapes:  51%|█████▏    | 18/35 [00:05<00:05,  3.23it/s]
Capturing CUDA graph shapes:  54%|█████▍    | 19/35 [00:06<00:05,  3.13it/s]
Capturing CUDA graph shapes:  57%|█████▋    | 20/35 [00:06<00:04,  3.25it/s]
Capturing CUDA graph shapes:  60%|██████    | 21/35 [00:06<00:04,  3.35it/s]
Capturing CUDA graph shapes:  63%|██████▎   | 22/35 [00:06<00:03,  3.44it/s]
Capturing CUDA graph shapes:  66%|██████▌   | 23/35 [00:07<00:03,  3.50it/s]
Capturing CUDA graph shapes:  69%|██████▊   | 24/35 [00:07<00:03,  3.39it/s]
Capturing CUDA graph shapes:  71%|███████▏  | 25/35 [00:07<00:03,  3.31it/s]
Capturing CUDA graph shapes:  74%|███████▍  | 26/35 [00:08<00:02,  3.27it/s]
Capturing CUDA graph shapes:  77%|███████▋  | 27/35 [00:08<00:02,  3.34it/s]
Capturing CUDA graph shapes:  80%|████████  | 28/35 [00:08<00:02,  3.44it/s]
Capturing CUDA graph shapes:  83%|████████▎ | 29/35 [00:08<00:01,  3.53it/s]
Capturing CUDA graph shapes:  86%|████████▌ | 30/35 [00:09<00:01,  3.30it/s]
Capturing CUDA graph shapes:  89%|████████▊ | 31/35 [00:09<00:01,  3.28it/s]
Capturing CUDA graph shapes:  91%|█████████▏| 32/35 [00:09<00:00,  3.22it/s]
Capturing CUDA graph shapes:  94%|█████████▍| 33/35 [00:10<00:00,  3.06it/s]
Capturing CUDA graph shapes:  97%|█████████▋| 34/35 [00:10<00:00,  3.10it/s]
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:10<00:00,  3.27it/s]
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:10<00:00,  3.21it/s]
INFO 07-07 16:40:23 model_runner.py:1535] Graph capturing finished in 11 secs, took 0.22 GiB
INFO 07-07 16:40:23 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 16.38 seconds
RAG ON
EXAMPLE PROMPT
<|im_start|>system
You are a helpful assistant designed to generate personalized responses to user questions. Your task is to answer a user's question from a post in a personalized way by considering this user's past post questions and detailed descriptions of these questions.
# Your input:
    - The user's current question from a post.
    - The user's past post questions and detailed descriptions of these questions.
# Your task: Answer the user's current question in a personalized way by considering this user's past post questions and detailed descriptions of these questions, to learn about the user's preferences.
# Your output: You should generate personalized answer to the user's current question by considering this user's past post questions and detailed descriptions of these questions to learn about user's preferences. Your output should be a valid json object in ```json ``` block that contains the following fields:
    - personalized_answer: contains the personalized answer to the user's current question considering the this user's past post questions and detailed descriptions of these questions to learn about user's preferences.
<|im_end|>
<|im_start|>user

# Past post questions and detailed descriptions of these questions:
Shall I ask my agency to overturn negative client feedback? I work for a writing agency. A few days ago, a client asked us to do some work for his website. The client said it was 'proofreading'. I did the work, the agency approved it. It was sent to the client for final approval.The client wrote back to say that what he actually wanted was his text rewritten so the site sold better. I wrote back to the agency to say this pretty much constituted a new job. The agency agreed so I got on with the work.I resubmitted and the agency approved it - again! It was sent to the client for final approval. I waited a few days and the client rejected it. He wrote back to say that the work was low quality and he could have done a better job himself. My agency were very nice about it, I got paid regardless, but it left a blemish on my stats, it's the first time a client has rejected a piece of my work.I am considering writing to my agency and asking them to overturn the negative feedback because1 - the client was vague about what they wanted - and in the first place, they described what they wanted incorrectly;2 - it was a new client, so we had no previous examples of what the client liked to work from3 - it's clear that the client had something very specific in mind, but they were not able to articulate their needs or show us the kind of thing they had in mind.I kept to the description as much as I could - short, concise, selling the site, a bit humorous. There was nothing I could do save getting inside the client's head. Because of this one negative piece of feedback I am now nearly halfway down my agency's ladder of writers, whereas before I was at the top.Should I write to my agency about this or just swallow it? I could do the latter, but I still feel an injustice is being done somewhere. 

Article I wrote has been published under another name - should I raise this with the publisher? I do part-time copywriting work and over the weekend I wrote a ~1500 word paid article for an online publication. It was a lot of research and toil, I had half a day to do it and I finally submitted the thing at 2am on Sunday. It was a very tricky piece.Now I notice the article has been published, with some minor edits, but under a different name. The client has used one of their own employees as the author. I wasn't aware that I was ghostwriting. Should I raise this with the publisher? Should credit not be given where it is due - or should I remain quiet unless I irritate them? I'm quite new to this but should they not at least have said it would be credited to someone else?
# Current post question:
Bored with PhD - should I tell my supervisor?
<|im_end|>
<|im_start|>assistant

<|im_start|>system
You are a helpful assistant designed to generate personalized responses to user questions. Your task is to answer a user's question from a post in a personalized way by considering this user's past post questions and detailed descriptions of these questions.
# Your input:
    - The user's current question from a post.
    - The user's past post questions and detailed descriptions of these questions.
# Your task: Answer the user's current question in a personalized way by considering this user's past post questions and detailed descriptions of these questions, to learn about the user's preferences.
# Your output: You should generate personalized answer to the user's current question by considering this user's past post questions and detailed descriptions of these questions to learn about user's preferences. Your output should be a valid json object in ```json ``` block that contains the following fields:
    - personalized_answer: contains the personalized answer to the user's current question considering the this user's past post questions and detailed descriptions of these questions to learn about user's preferences.
<|im_end|>
<|im_start|>user

# Past post questions and detailed descriptions of these questions:
Grades vs. projects in job application I am teaching computer science undergraduates, who will most likely go to work in the software industry. They often ask me for career advice and I want to know what advice to give them. Specifically, suppose a student can choose between two elective courses:Course A has a relatively low average grade (60-70/100), but during the homework assignments, the students build an industry-level project.Course B has a relatively high average grade (80-90/100), the homework assignments are simple and not industry-level.On one hand, course A lowers the student's average grade, so there is more chance the student will be filtered out based on a low average, even before the interview.On the other hand, if the student does get to the interview stage, having a strong project to show is a big advantage.I know that each work-place is different, but I would still be happy if there is a general rule-of-thumb to help the student decide: what is more helpful for getting a job in the software industry - a high average grade, or a strong project?

Pandemic - reduced rule-set for beginners I have recently started playing pandemic, and was overwhelmed by the amount of rules.Is there a reduced set of rules, easier to learn and remember but still fun, that can be used by beginners until they get used to the game?EDIT: My goal is not to make the game easier to win - it is to make the game easier to learn how to play. Instead of learning all rules at once, the team can learn the rules one by one. For example, suppose there are 10 rules (just an arbitrary number). Then instead of remembering all these rules at once, we can start with 5 rules, then add a new rule each play, until we remember and play by all rules.
# Current post question:
How can I motivate the teaching assistants to grade more strictly?
<|im_end|>
<|im_start|>assistant

<|im_start|>system
You are a helpful assistant designed to generate personalized responses to user questions. Your task is to answer a user's question from a post in a personalized way by considering this user's past post questions and detailed descriptions of these questions.
# Your input:
    - The user's current question from a post.
    - The user's past post questions and detailed descriptions of these questions.
# Your task: Answer the user's current question in a personalized way by considering this user's past post questions and detailed descriptions of these questions, to learn about the user's preferences.
# Your output: You should generate personalized answer to the user's current question by considering this user's past post questions and detailed descriptions of these questions to learn about user's preferences. Your output should be a valid json object in ```json ``` block that contains the following fields:
    - personalized_answer: contains the personalized answer to the user's current question considering the this user's past post questions and detailed descriptions of these questions to learn about user's preferences.
<|im_end|>
<|im_start|>user

# Past post questions and detailed descriptions of these questions:
Tofu as a growing medium? I just had a strange idea of no actual significance, but I was just staring at a block of tofu and wondered if you could plant things in it. Has anyone tried this? How does/would tofu fair as a growing medium. How would plants grow differently in hard, medium, and soft tofu?

What is the functional role of the subtonic chord? In this chartthe subtonic major chord can come before the mediant and submedian chords. Does this imply that it has a tonic functionality? If so that seems counter-intuitive; it seems to share more in common with the dominant chord than the tonic. On the other hand, if it's a dominant function, why would you have a i-VII-III... progression? Wouldn't it make more sense for the VII to fall later, towards the end of the phrase.(Also I'm assuming that the VII actually refers to the bVII chord, but if I'm wrong please correct me on that)
# Current post question:
How narrow or broad should I look for undergraduate research?
<|im_end|>
<|im_start|>assistant

None

Processed prompts:   0%|          | 0/424 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts:   0%|          | 1/424 [00:11<1:21:28, 11.56s/it, est. speed input: 67.67 toks/s, output: 6.06 toks/s]
Processed prompts:   1%|          | 3/424 [00:12<23:37,  3.37s/it, est. speed input: 124.54 toks/s, output: 18.71 toks/s]
Processed prompts:   1%|          | 4/424 [00:12<15:41,  2.24s/it, est. speed input: 155.94 toks/s, output: 26.12 toks/s]
Processed prompts:   1%|▏         | 6/424 [00:13<08:26,  1.21s/it, est. speed input: 234.94 toks/s, output: 40.81 toks/s]
Processed prompts:   3%|▎         | 11/424 [00:13<03:14,  2.12it/s, est. speed input: 440.46 toks/s, output: 79.17 toks/s]
Processed prompts:   3%|▎         | 13/424 [00:13<02:31,  2.70it/s, est. speed input: 596.73 toks/s, output: 94.00 toks/s]
Processed prompts:   4%|▎         | 15/424 [00:13<02:10,  3.12it/s, est. speed input: 631.09 toks/s, output: 107.81 toks/s]
Processed prompts:   4%|▍         | 18/424 [00:14<01:32,  4.39it/s, est. speed input: 701.51 toks/s, output: 131.19 toks/s]
Processed prompts:   5%|▍         | 20/424 [00:14<01:17,  5.19it/s, est. speed input: 767.74 toks/s, output: 146.24 toks/s]
Processed prompts:   5%|▌         | 23/424 [00:14<00:58,  6.81it/s, est. speed input: 869.45 toks/s, output: 169.45 toks/s]
Processed prompts:   6%|▌         | 25/424 [00:14<00:52,  7.65it/s, est. speed input: 938.08 toks/s, output: 184.41 toks/s]
Processed prompts:   7%|▋         | 30/424 [00:14<00:36, 10.77it/s, est. speed input: 1098.56 toks/s, output: 223.26 toks/s]
Processed prompts:   8%|▊         | 34/424 [00:15<00:29, 13.33it/s, est. speed input: 1231.73 toks/s, output: 254.32 toks/s]
Processed prompts:   9%|▉         | 38/424 [00:15<00:26, 14.32it/s, est. speed input: 1385.41 toks/s, output: 283.68 toks/s]
Processed prompts:  10%|▉         | 41/424 [00:15<00:24, 15.79it/s, est. speed input: 1460.15 toks/s, output: 306.16 toks/s]
Processed prompts:  10%|█         | 43/424 [00:15<00:25, 15.18it/s, est. speed input: 1511.42 toks/s, output: 319.81 toks/s]
Processed prompts:  12%|█▏        | 49/424 [00:15<00:21, 17.20it/s, est. speed input: 1711.48 toks/s, output: 363.42 toks/s]
Processed prompts:  12%|█▎        | 53/424 [00:16<00:19, 19.26it/s, est. speed input: 1848.59 toks/s, output: 393.03 toks/s]
Processed prompts:  13%|█▎        | 56/424 [00:16<00:19, 18.42it/s, est. speed input: 1928.85 toks/s, output: 413.25 toks/s]
Processed prompts:  14%|█▍        | 60/424 [00:16<00:17, 20.94it/s, est. speed input: 2011.63 toks/s, output: 442.70 toks/s]
Processed prompts:  15%|█▌        | 65/424 [00:16<00:18, 19.65it/s, est. speed input: 2126.29 toks/s, output: 475.88 toks/s]
Processed prompts:  16%|█▌        | 68/424 [00:16<00:21, 16.64it/s, est. speed input: 2165.33 toks/s, output: 492.70 toks/s]
Processed prompts:  17%|█▋        | 72/424 [00:17<00:17, 19.63it/s, est. speed input: 2326.53 toks/s, output: 521.66 toks/s]
Processed prompts:  18%|█▊        | 75/424 [00:17<00:18, 18.53it/s, est. speed input: 2418.41 toks/s, output: 540.41 toks/s]
Processed prompts:  18%|█▊        | 78/424 [00:17<00:17, 19.71it/s, est. speed input: 2539.81 toks/s, output: 560.99 toks/s]
Processed prompts:  19%|█▉        | 81/424 [00:17<00:18, 18.63it/s, est. speed input: 2643.34 toks/s, output: 579.47 toks/s]
Processed prompts:  21%|██        | 87/424 [00:17<00:18, 17.95it/s, est. speed input: 2797.34 toks/s, output: 616.51 toks/s]
Processed prompts:  22%|██▏       | 92/424 [00:18<00:18, 17.63it/s, est. speed input: 2897.87 toks/s, output: 646.77 toks/s]
Processed prompts:  22%|██▏       | 95/424 [00:18<00:17, 19.28it/s, est. speed input: 2951.01 toks/s, output: 667.39 toks/s]
Processed prompts:  23%|██▎       | 98/424 [00:18<00:17, 18.65it/s, est. speed input: 3007.14 toks/s, output: 685.29 toks/s]
Processed prompts:  25%|██▍       | 104/424 [00:18<00:16, 18.96it/s, est. speed input: 3110.80 toks/s, output: 722.13 toks/s]
Processed prompts:  25%|██▌       | 108/424 [00:18<00:15, 20.37it/s, est. speed input: 3199.83 toks/s, output: 748.27 toks/s]
Processed prompts:  26%|██▌       | 111/424 [00:19<00:15, 19.70it/s, est. speed input: 3340.22 toks/s, output: 765.77 toks/s]
Processed prompts:  27%|██▋       | 114/424 [00:19<00:16, 18.94it/s, est. speed input: 3405.96 toks/s, output: 782.95 toks/s]
Processed prompts:  28%|██▊       | 117/424 [00:19<00:16, 18.30it/s, est. speed input: 3460.06 toks/s, output: 800.02 toks/s]
Processed prompts:  29%|██▉       | 122/424 [00:19<00:15, 19.21it/s, est. speed input: 3553.47 toks/s, output: 830.75 toks/s]
Processed prompts:  30%|██▉       | 126/424 [00:19<00:16, 18.11it/s, est. speed input: 3634.93 toks/s, output: 852.67 toks/s]
Processed prompts:  31%|███       | 131/424 [00:20<00:15, 19.44it/s, est. speed input: 3749.77 toks/s, output: 883.73 toks/s]
Processed prompts:  32%|███▏      | 135/424 [00:20<00:13, 21.11it/s, est. speed input: 3835.61 toks/s, output: 909.61 toks/s]
Processed prompts:  33%|███▎      | 141/424 [00:20<00:15, 17.90it/s, est. speed input: 4000.89 toks/s, output: 939.13 toks/s]
Processed prompts:  35%|███▌      | 149/424 [00:21<00:14, 19.02it/s, est. speed input: 4178.92 toks/s, output: 985.36 toks/s]
Processed prompts:  36%|███▌      | 153/424 [00:21<00:12, 20.95it/s, est. speed input: 4268.19 toks/s, output: 1011.22 toks/s]
Processed prompts:  37%|███▋      | 156/424 [00:21<00:14, 18.92it/s, est. speed input: 4309.16 toks/s, output: 1024.55 toks/s]
Processed prompts:  38%|███▊      | 159/424 [00:21<00:13, 19.79it/s, est. speed input: 4406.43 toks/s, output: 1042.22 toks/s]
Processed prompts:  38%|███▊      | 162/424 [00:21<00:14, 17.65it/s, est. speed input: 4467.86 toks/s, output: 1054.89 toks/s]
Processed prompts:  39%|███▉      | 165/424 [00:22<00:16, 15.50it/s, est. speed input: 4492.14 toks/s, output: 1065.87 toks/s]
Processed prompts:  40%|███▉      | 168/424 [00:22<00:15, 16.24it/s, est. speed input: 4542.76 toks/s, output: 1081.71 toks/s]
Processed prompts:  40%|████      | 170/424 [00:22<00:15, 16.63it/s, est. speed input: 4563.77 toks/s, output: 1092.16 toks/s]
Processed prompts:  42%|████▏     | 179/424 [00:22<00:08, 29.85it/s, est. speed input: 4752.37 toks/s, output: 1157.70 toks/s]
Processed prompts:  44%|████▍     | 186/424 [00:22<00:06, 37.08it/s, est. speed input: 4915.28 toks/s, output: 1207.87 toks/s]
Processed prompts:  46%|████▌     | 193/424 [00:22<00:05, 43.19it/s, est. speed input: 5079.32 toks/s, output: 1258.33 toks/s]
Processed prompts:  47%|████▋     | 199/424 [00:22<00:04, 45.85it/s, est. speed input: 5255.57 toks/s, output: 1301.11 toks/s]
Processed prompts:  48%|████▊     | 204/424 [00:22<00:04, 45.57it/s, est. speed input: 5392.99 toks/s, output: 1336.27 toks/s]
Processed prompts:  50%|█████     | 214/424 [00:23<00:03, 58.35it/s, est. speed input: 5657.76 toks/s, output: 1413.47 toks/s]
Processed prompts:  52%|█████▏    | 221/424 [00:23<00:03, 55.23it/s, est. speed input: 5834.82 toks/s, output: 1464.01 toks/s]
Processed prompts:  54%|█████▎    | 227/424 [00:23<00:04, 41.26it/s, est. speed input: 5912.42 toks/s, output: 1500.96 toks/s]
Processed prompts:  55%|█████▍    | 232/424 [00:23<00:04, 39.90it/s, est. speed input: 6037.64 toks/s, output: 1536.13 toks/s]
Processed prompts:  56%|█████▌    | 237/424 [00:23<00:04, 39.03it/s, est. speed input: 6133.46 toks/s, output: 1569.10 toks/s]
Processed prompts:  57%|█████▋    | 242/424 [00:23<00:05, 32.07it/s, est. speed input: 6290.43 toks/s, output: 1599.38 toks/s]
Processed prompts:  58%|█████▊    | 246/424 [00:24<00:06, 28.31it/s, est. speed input: 6350.56 toks/s, output: 1620.80 toks/s]
Processed prompts:  59%|█████▉    | 250/424 [00:24<00:07, 24.64it/s, est. speed input: 6376.11 toks/s, output: 1634.26 toks/s]
Processed prompts:  60%|█████▉    | 253/424 [00:24<00:07, 23.19it/s, est. speed input: 6389.85 toks/s, output: 1643.80 toks/s]
Processed prompts:  60%|██████    | 256/424 [00:24<00:07, 23.34it/s, est. speed input: 6437.75 toks/s, output: 1653.77 toks/s]
Processed prompts:  61%|██████    | 259/424 [00:24<00:07, 20.96it/s, est. speed input: 6463.33 toks/s, output: 1661.99 toks/s]
Processed prompts:  62%|██████▏   | 262/424 [00:24<00:07, 21.75it/s, est. speed input: 6499.71 toks/s, output: 1669.01 toks/s]
Processed prompts:  63%|██████▎   | 266/424 [00:25<00:06, 24.37it/s, est. speed input: 6598.84 toks/s, output: 1680.36 toks/s]
Processed prompts:  64%|██████▍   | 272/424 [00:25<00:04, 30.85it/s, est. speed input: 6698.06 toks/s, output: 1702.09 toks/s]
Processed prompts:  66%|██████▌   | 279/424 [00:25<00:03, 38.19it/s, est. speed input: 6835.31 toks/s, output: 1733.03 toks/s]
Processed prompts:  67%|██████▋   | 284/424 [00:25<00:03, 36.78it/s, est. speed input: 6903.18 toks/s, output: 1751.19 toks/s]
Processed prompts:  68%|██████▊   | 288/424 [00:25<00:04, 33.82it/s, est. speed input: 6947.86 toks/s, output: 1762.82 toks/s]
Processed prompts:  69%|██████▉   | 292/424 [00:25<00:03, 34.01it/s, est. speed input: 7009.57 toks/s, output: 1777.10 toks/s]
Processed prompts:  70%|███████   | 298/424 [00:25<00:03, 35.70it/s, est. speed input: 7116.46 toks/s, output: 1799.99 toks/s]
Processed prompts:  72%|███████▏  | 306/424 [00:25<00:02, 43.72it/s, est. speed input: 7280.64 toks/s, output: 1838.47 toks/s]
Processed prompts:  75%|███████▍  | 316/424 [00:26<00:01, 54.56it/s, est. speed input: 7476.75 toks/s, output: 1887.34 toks/s]
Processed prompts:  77%|███████▋  | 325/424 [00:26<00:01, 60.87it/s, est. speed input: 7640.84 toks/s, output: 1931.95 toks/s]
Processed prompts:  79%|███████▉  | 336/424 [00:26<00:01, 71.28it/s, est. speed input: 7858.06 toks/s, output: 1994.27 toks/s]
Processed prompts:  82%|████████▏ | 348/424 [00:26<00:00, 82.57it/s, est. speed input: 8099.62 toks/s, output: 2062.62 toks/s]
Processed prompts:  84%|████████▍ | 358/424 [00:26<00:00, 86.70it/s, est. speed input: 8250.24 toks/s, output: 2114.25 toks/s]
Processed prompts:  87%|████████▋ | 367/424 [00:26<00:00, 83.94it/s, est. speed input: 8388.78 toks/s, output: 2160.80 toks/s]
Processed prompts:  89%|████████▉ | 379/424 [00:26<00:00, 91.74it/s, est. speed input: 8676.02 toks/s, output: 2226.58 toks/s]
Processed prompts:  92%|█████████▏| 389/424 [00:26<00:00, 75.97it/s, est. speed input: 8924.84 toks/s, output: 2277.24 toks/s]
Processed prompts:  94%|█████████▍| 399/424 [00:27<00:00, 80.60it/s, est. speed input: 9197.34 toks/s, output: 2343.20 toks/s]
Processed prompts:  96%|█████████▌| 408/424 [00:27<00:00, 70.48it/s, est. speed input: 9354.74 toks/s, output: 2400.99 toks/s]
Processed prompts:  98%|█████████▊| 416/424 [00:27<00:00, 46.31it/s, est. speed input: 9531.38 toks/s, output: 2442.58 toks/s]
Processed prompts: 100%|█████████▉| 422/424 [00:28<00:00, 21.69it/s, est. speed input: 9467.02 toks/s, output: 2434.49 toks/s]
Processed prompts: 100%|██████████| 424/424 [00:28<00:00, 14.67it/s, est. speed input: 9359.43 toks/s, output: 2412.06 toks/s]
[rank0]:[W707 16:40:54.689161034 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
Experiment complete! Output can be found at data/out/rag/full_profile/sc_rag_full_profile_test_2_output.json
Cleaned temporary files.
