Keeping ['lp', 'sc'] in profile
Temp data file saved at data/processed/TEMP_2025-07-08 14:00:52.090985_ae_processed_test.json.
	Running Ranking: ['python', 'retrieval/rank_dataset.py', '--model_name', 'facebook/contriever-msmarco', '--input_dataset_addr', 'data/processed/TEMP_2025-07-08 14:00:52.090985_ae_processed_test.json', '--output_dataset_addr', 'data/processed/TEMP_2025-07-08 14:00:52.090985_ae_processed_test.json', '--batch_size', '4']

  0%|          | 0/401 [00:00<?, ?it/s]
  0%|          | 1/401 [00:00<01:36,  4.16it/s]
  1%|          | 3/401 [00:00<01:42,  3.87it/s]
  1%|          | 4/401 [00:01<03:05,  2.14it/s]
  1%|          | 5/401 [00:02<03:57,  1.67it/s]
  1%|▏         | 6/401 [00:03<04:27,  1.48it/s]
  2%|▏         | 7/401 [00:04<04:50,  1.36it/s]
  2%|▏         | 8/401 [00:05<05:04,  1.29it/s]
  2%|▏         | 9/401 [00:05<05:10,  1.26it/s]
  2%|▏         | 10/401 [00:06<03:51,  1.69it/s]
  3%|▎         | 11/401 [00:07<05:13,  1.24it/s]
  3%|▎         | 13/401 [00:08<04:43,  1.37it/s]
  3%|▎         | 14/401 [00:09<04:20,  1.49it/s]
  4%|▍         | 17/401 [00:09<02:14,  2.86it/s]
  4%|▍         | 18/401 [00:10<03:24,  1.87it/s]
  5%|▍         | 19/401 [00:11<04:25,  1.44it/s]
  5%|▍         | 20/401 [00:14<07:15,  1.14s/it]
  5%|▌         | 22/401 [00:17<07:40,  1.21s/it]
  6%|▌         | 23/401 [00:18<07:42,  1.22s/it]
  6%|▌         | 24/401 [00:20<09:43,  1.55s/it]
  6%|▋         | 26/401 [00:20<05:51,  1.07it/s]
  7%|▋         | 27/401 [00:23<08:07,  1.30s/it]
  7%|▋         | 29/401 [00:23<05:01,  1.23it/s]
  7%|▋         | 30/401 [00:23<04:07,  1.50it/s]
  8%|▊         | 31/401 [00:24<04:06,  1.50it/s]
  8%|▊         | 33/401 [00:25<03:16,  1.87it/s]
  8%|▊         | 34/401 [00:25<02:46,  2.21it/s]
  9%|▉         | 36/401 [00:25<01:49,  3.34it/s]
  9%|▉         | 38/401 [00:25<01:19,  4.59it/s]
 10%|▉         | 40/401 [00:25<01:03,  5.73it/s]
 10%|█         | 42/401 [00:26<01:02,  5.72it/s]
 11%|█         | 43/401 [00:26<01:03,  5.62it/s]
 11%|█         | 44/401 [00:26<00:58,  6.15it/s]
 11%|█▏        | 46/401 [00:26<00:54,  6.47it/s]
 12%|█▏        | 47/401 [00:26<00:55,  6.35it/s]
 12%|█▏        | 48/401 [00:27<01:03,  5.53it/s]
 12%|█▏        | 49/401 [00:27<01:02,  5.65it/s]
 13%|█▎        | 52/401 [00:27<00:35,  9.74it/s]
 13%|█▎        | 54/401 [00:27<00:35,  9.66it/s]
 14%|█▍        | 56/401 [00:28<01:02,  5.56it/s]
 14%|█▍        | 57/401 [00:28<00:57,  6.00it/s]
 15%|█▍        | 59/401 [00:28<01:11,  4.78it/s]
 15%|█▍        | 60/401 [00:29<01:06,  5.14it/s]
 15%|█▌        | 62/401 [00:29<00:59,  5.68it/s]
 16%|█▌        | 63/401 [00:29<00:59,  5.70it/s]
 16%|█▌        | 64/401 [00:29<00:58,  5.78it/s]
 16%|█▌        | 65/401 [00:29<00:57,  5.84it/s]
 16%|█▋        | 66/401 [00:29<00:55,  6.08it/s]
 17%|█▋        | 68/401 [00:30<00:39,  8.50it/s]
 17%|█▋        | 70/401 [00:30<00:34,  9.68it/s]
 18%|█▊        | 72/401 [00:30<00:33,  9.92it/s]
 18%|█▊        | 74/401 [00:30<00:30, 10.75it/s]
 19%|█▉        | 76/401 [00:30<00:31, 10.23it/s]
 19%|█▉        | 78/401 [00:30<00:29, 11.02it/s]
 20%|█▉        | 80/401 [00:31<00:30, 10.45it/s]
 20%|██        | 82/401 [00:31<00:28, 11.16it/s]
 21%|██        | 84/401 [00:31<00:29, 10.61it/s]
 21%|██▏       | 86/401 [00:31<00:27, 11.37it/s]
 22%|██▏       | 88/401 [00:32<00:49,  6.29it/s]
 22%|██▏       | 89/401 [00:32<00:48,  6.38it/s]
 23%|██▎       | 91/401 [00:32<00:38,  8.08it/s]
 23%|██▎       | 93/401 [00:32<00:35,  8.56it/s]
 24%|██▎       | 95/401 [00:33<00:39,  7.73it/s]
 24%|██▍       | 96/401 [00:33<00:38,  7.98it/s]
 24%|██▍       | 97/401 [00:33<00:37,  8.21it/s]
 24%|██▍       | 98/401 [00:33<00:36,  8.20it/s]
 25%|██▍       | 100/401 [00:33<00:28, 10.61it/s]
 25%|██▌       | 102/401 [00:33<00:23, 12.47it/s]
 26%|██▌       | 104/401 [00:34<00:34,  8.65it/s]
 26%|██▋       | 106/401 [00:34<00:29, 10.00it/s]
 27%|██▋       | 108/401 [00:34<00:31,  9.20it/s]
 27%|██▋       | 110/401 [00:34<00:27, 10.44it/s]
 28%|██▊       | 112/401 [00:34<00:28, 10.05it/s]
 28%|██▊       | 114/401 [00:34<00:28, 10.04it/s]
 29%|██▉       | 116/401 [00:35<00:26, 10.96it/s]
 29%|██▉       | 118/401 [00:35<00:28, 10.06it/s]
 30%|██▉       | 120/401 [00:35<00:26, 10.73it/s]
 30%|███       | 122/401 [00:35<00:24, 11.24it/s]
 31%|███       | 124/401 [00:35<00:29,  9.41it/s]
 31%|███▏      | 126/401 [00:36<00:34,  8.08it/s]
 32%|███▏      | 127/401 [00:36<00:34,  7.84it/s]
 32%|███▏      | 128/401 [00:36<00:35,  7.67it/s]
 32%|███▏      | 129/401 [00:36<00:33,  8.02it/s]
 32%|███▏      | 130/401 [00:36<00:35,  7.65it/s]
 33%|███▎      | 133/401 [00:37<00:43,  6.09it/s]
 33%|███▎      | 134/401 [00:37<00:40,  6.53it/s]
 34%|███▎      | 135/401 [00:37<00:38,  6.97it/s]
 34%|███▍      | 136/401 [00:37<00:35,  7.43it/s]
 34%|███▍      | 138/401 [00:37<00:30,  8.67it/s]
 35%|███▍      | 140/401 [00:38<00:24, 10.81it/s]
 35%|███▌      | 142/401 [00:38<00:30,  8.58it/s]
 36%|███▌      | 144/401 [00:38<00:35,  7.18it/s]
 36%|███▋      | 146/401 [00:38<00:29,  8.75it/s]
 37%|███▋      | 148/401 [00:39<00:40,  6.20it/s]
 37%|███▋      | 149/401 [00:39<00:37,  6.63it/s]
 37%|███▋      | 150/401 [00:39<00:35,  7.06it/s]
 38%|███▊      | 151/401 [00:39<00:35,  7.04it/s]
 38%|███▊      | 152/401 [00:39<00:33,  7.53it/s]
 38%|███▊      | 153/401 [00:40<00:40,  6.10it/s]
 38%|███▊      | 154/401 [00:40<00:39,  6.29it/s]
 39%|███▊      | 155/401 [00:40<00:38,  6.44it/s]
 39%|███▉      | 156/401 [00:40<00:37,  6.56it/s]
 39%|███▉      | 157/401 [00:40<00:36,  6.65it/s]
 40%|███▉      | 159/401 [00:40<00:26,  9.06it/s]
 40%|███▉      | 160/401 [00:41<00:33,  7.12it/s]
 40%|████      | 162/401 [00:41<00:27,  8.75it/s]
 41%|████      | 164/401 [00:41<00:22, 10.77it/s]
 41%|████▏     | 166/401 [00:41<00:22, 10.26it/s]
 42%|████▏     | 168/401 [00:41<00:22, 10.20it/s]
 42%|████▏     | 170/401 [00:41<00:23,  9.93it/s]
 43%|████▎     | 172/401 [00:42<00:29,  7.83it/s]
 43%|████▎     | 173/401 [00:42<00:28,  8.09it/s]
 43%|████▎     | 174/401 [00:42<00:27,  8.34it/s]
 44%|████▎     | 175/401 [00:42<00:26,  8.51it/s]
 44%|████▍     | 176/401 [00:42<00:25,  8.67it/s]
 44%|████▍     | 177/401 [00:42<00:27,  8.06it/s]
 44%|████▍     | 178/401 [00:42<00:26,  8.34it/s]
 45%|████▍     | 179/401 [00:43<00:25,  8.58it/s]
 45%|████▍     | 180/401 [00:43<00:24,  8.89it/s]
 45%|████▌     | 181/401 [00:43<00:24,  9.12it/s]
 45%|████▌     | 182/401 [00:43<00:23,  9.15it/s]
 46%|████▌     | 184/401 [00:43<00:19, 11.04it/s]
 46%|████▋     | 186/401 [00:43<00:17, 12.27it/s]
 47%|████▋     | 188/401 [00:43<00:18, 11.36it/s]
 47%|████▋     | 190/401 [00:43<00:17, 12.33it/s]
 48%|████▊     | 192/401 [00:44<00:41,  5.07it/s]
 48%|████▊     | 193/401 [00:45<00:38,  5.41it/s]
 48%|████▊     | 194/401 [00:45<00:41,  4.95it/s]
 49%|████▉     | 196/401 [00:45<00:45,  4.47it/s]
 49%|████▉     | 197/401 [00:47<01:58,  1.73it/s]
 50%|████▉     | 199/401 [00:48<01:32,  2.17it/s]
 50%|████▉     | 200/401 [00:48<01:31,  2.20it/s]
 50%|█████     | 201/401 [00:49<01:30,  2.20it/s]
 50%|█████     | 202/401 [00:49<01:29,  2.23it/s]
 51%|█████     | 203/401 [00:49<01:29,  2.22it/s]
 51%|█████     | 204/401 [00:50<01:28,  2.23it/s]
 51%|█████▏    | 206/401 [00:50<01:09,  2.80it/s]
 52%|█████▏    | 207/401 [00:51<01:13,  2.64it/s]
 52%|█████▏    | 208/401 [00:51<01:16,  2.52it/s]
 52%|█████▏    | 209/401 [00:52<01:16,  2.52it/s]
 52%|█████▏    | 210/401 [00:52<01:17,  2.46it/s]
 53%|█████▎    | 211/401 [00:53<01:25,  2.21it/s]
 53%|█████▎    | 212/401 [00:53<01:16,  2.49it/s]
 53%|█████▎    | 213/401 [00:54<01:24,  2.22it/s]
 53%|█████▎    | 214/401 [00:55<02:17,  1.36it/s]
 54%|█████▎    | 215/401 [00:55<01:47,  1.74it/s]
 54%|█████▍    | 216/401 [00:56<01:57,  1.57it/s]
 54%|█████▍    | 218/401 [00:56<01:13,  2.51it/s]
 55%|█████▍    | 219/401 [00:56<01:03,  2.85it/s]
 55%|█████▍    | 220/401 [00:57<00:56,  3.21it/s]
 55%|█████▌    | 221/401 [00:57<01:07,  2.69it/s]
 55%|█████▌    | 222/401 [00:57<00:58,  3.08it/s]
 56%|█████▌    | 224/401 [00:58<00:45,  3.85it/s]
 56%|█████▌    | 225/401 [00:58<00:39,  4.50it/s]
 56%|█████▋    | 226/401 [00:58<00:33,  5.24it/s]
 57%|█████▋    | 228/401 [00:59<00:43,  3.94it/s]
 57%|█████▋    | 229/401 [00:59<00:40,  4.24it/s]
 57%|█████▋    | 230/401 [00:59<00:39,  4.38it/s]
 58%|█████▊    | 231/401 [00:59<00:35,  4.82it/s]
 58%|█████▊    | 232/401 [00:59<00:38,  4.44it/s]
 58%|█████▊    | 234/401 [01:02<02:15,  1.23it/s]
 59%|█████▊    | 235/401 [01:03<01:54,  1.45it/s]
 59%|█████▉    | 236/401 [01:03<01:29,  1.84it/s]
 59%|█████▉    | 237/401 [01:03<01:17,  2.13it/s]
 59%|█████▉    | 238/401 [01:03<01:03,  2.59it/s]
 60%|█████▉    | 239/401 [01:04<00:54,  2.98it/s]
 60%|██████    | 241/401 [01:04<00:33,  4.77it/s]
 61%|██████    | 243/401 [01:04<00:39,  3.97it/s]
 61%|██████    | 244/401 [01:05<00:42,  3.74it/s]
 61%|██████▏   | 246/401 [01:05<00:32,  4.82it/s]
 62%|██████▏   | 247/401 [01:05<00:31,  4.84it/s]
 62%|██████▏   | 248/401 [01:05<00:27,  5.49it/s]
 62%|██████▏   | 249/401 [01:06<00:54,  2.80it/s]
 63%|██████▎   | 254/401 [01:06<00:20,  7.04it/s]
 64%|██████▍   | 256/401 [01:07<00:39,  3.66it/s]
 65%|██████▍   | 260/401 [01:08<00:23,  5.95it/s]
 65%|██████▌   | 262/401 [01:08<00:25,  5.43it/s]
 66%|██████▌   | 265/401 [01:08<00:18,  7.45it/s]
 67%|██████▋   | 268/401 [01:08<00:14,  9.41it/s]
 67%|██████▋   | 270/401 [01:09<00:21,  6.00it/s]
 68%|██████▊   | 273/401 [01:09<00:16,  7.91it/s]
 69%|██████▊   | 275/401 [01:09<00:14,  8.73it/s]
 69%|██████▉   | 277/401 [01:10<00:16,  7.30it/s]
 70%|██████▉   | 279/401 [01:10<00:15,  8.07it/s]
 70%|███████   | 281/401 [01:10<00:15,  7.71it/s]
 71%|███████   | 283/401 [01:11<00:17,  6.88it/s]
 71%|███████   | 285/401 [01:11<00:14,  7.79it/s]
 72%|███████▏  | 288/401 [01:11<00:10, 10.28it/s]
 73%|███████▎  | 291/401 [01:11<00:12,  8.52it/s]
 73%|███████▎  | 293/401 [01:12<00:22,  4.88it/s]
 73%|███████▎  | 294/401 [01:13<00:27,  3.89it/s]
 74%|███████▍  | 296/401 [01:13<00:21,  4.89it/s]
 75%|███████▍  | 299/401 [01:14<00:24,  4.20it/s]
 75%|███████▌  | 301/401 [01:14<00:18,  5.26it/s]
 76%|███████▌  | 304/401 [01:15<00:18,  5.11it/s]
 76%|███████▋  | 306/401 [01:15<00:15,  6.20it/s]
 77%|███████▋  | 308/401 [01:15<00:14,  6.48it/s]
 77%|███████▋  | 309/401 [01:15<00:17,  5.41it/s]
 78%|███████▊  | 311/401 [01:15<00:13,  6.47it/s]
 78%|███████▊  | 312/401 [01:16<00:12,  6.92it/s]
 78%|███████▊  | 314/401 [01:16<00:10,  8.48it/s]
 79%|███████▉  | 317/401 [01:16<00:07, 11.68it/s]
 80%|███████▉  | 319/401 [01:16<00:07, 10.36it/s]
 80%|████████  | 321/401 [01:16<00:09,  8.11it/s]
 81%|████████  | 323/401 [01:17<00:14,  5.31it/s]
 81%|████████  | 324/401 [01:18<00:18,  4.14it/s]
 81%|████████  | 325/401 [01:18<00:22,  3.40it/s]
 81%|████████▏ | 326/401 [01:18<00:20,  3.75it/s]
 82%|████████▏ | 328/401 [01:18<00:14,  5.13it/s]
 82%|████████▏ | 329/401 [01:20<00:30,  2.33it/s]
 82%|████████▏ | 330/401 [01:20<00:31,  2.25it/s]
 83%|████████▎ | 331/401 [01:20<00:25,  2.69it/s]
 83%|████████▎ | 332/401 [01:21<00:28,  2.46it/s]
 83%|████████▎ | 333/401 [01:21<00:29,  2.31it/s]
 84%|████████▎ | 335/401 [01:22<00:23,  2.76it/s]
 84%|████████▍ | 336/401 [01:22<00:25,  2.52it/s]
 84%|████████▍ | 338/401 [01:23<00:16,  3.79it/s]
 85%|████████▌ | 341/401 [01:23<00:10,  5.90it/s]
 86%|████████▌ | 343/401 [01:23<00:08,  6.91it/s]
 86%|████████▌ | 345/401 [01:23<00:07,  7.23it/s]
 86%|████████▋ | 346/401 [01:23<00:08,  6.61it/s]
 87%|████████▋ | 348/401 [01:24<00:09,  5.47it/s]
 87%|████████▋ | 350/401 [01:25<00:11,  4.45it/s]
 88%|████████▊ | 351/401 [01:25<00:13,  3.63it/s]
 89%|████████▊ | 355/401 [01:25<00:06,  6.61it/s]
 89%|████████▉ | 357/401 [01:26<00:09,  4.47it/s]
 90%|████████▉ | 359/401 [01:27<00:11,  3.68it/s]
 90%|████████▉ | 360/401 [01:28<00:14,  2.86it/s]
 90%|█████████ | 361/401 [01:28<00:12,  3.16it/s]
 91%|█████████ | 363/401 [01:28<00:08,  4.37it/s]
 91%|█████████ | 365/401 [01:28<00:06,  5.18it/s]
 92%|█████████▏| 367/401 [01:28<00:05,  5.96it/s]
 92%|█████████▏| 369/401 [01:29<00:05,  6.01it/s]
 92%|█████████▏| 370/401 [01:29<00:05,  5.86it/s]
 93%|█████████▎| 371/401 [01:29<00:05,  5.80it/s]
 93%|█████████▎| 373/401 [01:29<00:04,  6.59it/s]
 93%|█████████▎| 374/401 [01:29<00:04,  6.31it/s]
 94%|█████████▎| 375/401 [01:30<00:04,  6.16it/s]
 94%|█████████▍| 376/401 [01:30<00:06,  3.88it/s]
 94%|█████████▍| 378/401 [01:31<00:06,  3.55it/s]
 95%|█████████▍| 379/401 [01:31<00:07,  2.99it/s]
 95%|█████████▍| 380/401 [01:31<00:06,  3.37it/s]
 95%|█████████▌| 382/401 [01:32<00:05,  3.42it/s]
 96%|█████████▌| 383/401 [01:33<00:06,  2.87it/s]
 96%|█████████▌| 384/401 [01:33<00:06,  2.72it/s]
 96%|█████████▌| 385/401 [01:34<00:06,  2.49it/s]
 97%|█████████▋| 387/401 [01:34<00:05,  2.42it/s]
 97%|█████████▋| 389/401 [01:35<00:03,  3.40it/s]
 97%|█████████▋| 390/401 [01:35<00:03,  3.26it/s]
 98%|█████████▊| 393/401 [01:35<00:01,  5.50it/s]
 98%|█████████▊| 394/401 [01:35<00:01,  5.19it/s]
 99%|█████████▊| 395/401 [01:36<00:01,  4.52it/s]
 99%|█████████▉| 397/401 [01:36<00:00,  5.10it/s]
100%|█████████▉| 399/401 [01:36<00:00,  4.58it/s]
100%|██████████| 401/401 [01:37<00:00,  5.75it/s]
100%|██████████| 401/401 [01:37<00:00,  4.13it/s]
	Running baseline: ['python', 'baselines.py', '--model_addr', 'Qwen/Qwen2.5-7B-Instruct', '--inputs_addr', 'data/processed/TEMP_2025-07-08 14:00:52.090985_ae_processed_test.json', '--output_addr', 'data/out/rag/asym/test_ae_output.json', '--temperature', '0.0', '--top_p', '0.95', '--max_tokens', '4096', '--num_generated_outputs', '1', '--num_contexts', '2', '--max_retries', '10', '--cache_dir', '/work/pi_hzamani_umass_edu/ozel_cache/', '--rag']

Generating train split: 0 examples [00:00, ? examples/s]
Generating train split: 1 examples [00:00,  9.42 examples/s]
Generating train split: 401 examples [00:00, 1869.89 examples/s]
INFO 07-08 14:02:53 config.py:510] This model supports multiple tasks: {'embed', 'generate', 'score', 'reward', 'classify'}. Defaulting to 'generate'.
INFO 07-08 14:02:53 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-7B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-7B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768, download_dir='/work/pi_hzamani_umass_edu/ozel_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-7B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-08 14:02:55 selector.py:120] Using Flash Attention backend.
INFO 07-08 14:02:56 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-7B-Instruct...
INFO 07-08 14:02:56 weight_utils.py:251] Using model weights format ['*.safetensors']

Loading safetensors checkpoint shards:   0% Completed | 0/4 [00:00<?, ?it/s]

Loading safetensors checkpoint shards:  25% Completed | 1/4 [00:00<00:02,  1.27it/s]

Loading safetensors checkpoint shards:  50% Completed | 2/4 [00:01<00:01,  1.25it/s]

Loading safetensors checkpoint shards:  75% Completed | 3/4 [00:02<00:00,  1.29it/s]

Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:03<00:00,  1.34it/s]

Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:03<00:00,  1.32it/s]

INFO 07-08 14:02:59 model_runner.py:1099] Loading model weights took 14.2487 GB
INFO 07-08 14:03:01 worker.py:241] Memory profiling takes 2.11 seconds
INFO 07-08 14:03:01 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.90) = 71.33GiB
INFO 07-08 14:03:01 worker.py:241] model weights take 14.25GiB; non_torch_memory takes 0.14GiB; PyTorch activation peak memory takes 4.35GiB; the rest of the memory reserved for KV Cache is 52.59GiB.
INFO 07-08 14:03:02 gpu_executor.py:76] # GPU blocks: 61542, # CPU blocks: 4681
INFO 07-08 14:03:02 gpu_executor.py:80] Maximum concurrency for 32768 tokens per request: 30.05x
INFO 07-08 14:03:04 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.

Capturing CUDA graph shapes:   0%|          | 0/35 [00:00<?, ?it/s]
Capturing CUDA graph shapes:   3%|▎         | 1/35 [00:00<00:10,  3.13it/s]
Capturing CUDA graph shapes:   6%|▌         | 2/35 [00:00<00:09,  3.48it/s]
Capturing CUDA graph shapes:   9%|▊         | 3/35 [00:00<00:08,  3.61it/s]
Capturing CUDA graph shapes:  11%|█▏        | 4/35 [00:01<00:08,  3.67it/s]
Capturing CUDA graph shapes:  14%|█▍        | 5/35 [00:01<00:08,  3.71it/s]
Capturing CUDA graph shapes:  17%|█▋        | 6/35 [00:01<00:07,  3.73it/s]
Capturing CUDA graph shapes:  20%|██        | 7/35 [00:01<00:07,  3.75it/s]
Capturing CUDA graph shapes:  23%|██▎       | 8/35 [00:02<00:07,  3.77it/s]
Capturing CUDA graph shapes:  26%|██▌       | 9/35 [00:02<00:06,  3.76it/s]
Capturing CUDA graph shapes:  29%|██▊       | 10/35 [00:02<00:06,  3.76it/s]
Capturing CUDA graph shapes:  31%|███▏      | 11/35 [00:02<00:06,  3.77it/s]
Capturing CUDA graph shapes:  34%|███▍      | 12/35 [00:03<00:06,  3.78it/s]
Capturing CUDA graph shapes:  37%|███▋      | 13/35 [00:03<00:05,  3.79it/s]
Capturing CUDA graph shapes:  40%|████      | 14/35 [00:03<00:05,  3.80it/s]
Capturing CUDA graph shapes:  43%|████▎     | 15/35 [00:04<00:05,  3.82it/s]
Capturing CUDA graph shapes:  46%|████▌     | 16/35 [00:04<00:04,  3.82it/s]
Capturing CUDA graph shapes:  49%|████▊     | 17/35 [00:04<00:04,  3.88it/s]
Capturing CUDA graph shapes:  51%|█████▏    | 18/35 [00:04<00:04,  3.91it/s]
Capturing CUDA graph shapes:  54%|█████▍    | 19/35 [00:05<00:04,  3.83it/s]
Capturing CUDA graph shapes:  57%|█████▋    | 20/35 [00:05<00:03,  3.89it/s]
Capturing CUDA graph shapes:  60%|██████    | 21/35 [00:05<00:03,  3.93it/s]
Capturing CUDA graph shapes:  63%|██████▎   | 22/35 [00:05<00:03,  3.95it/s]
Capturing CUDA graph shapes:  66%|██████▌   | 23/35 [00:06<00:03,  3.97it/s]
Capturing CUDA graph shapes:  69%|██████▊   | 24/35 [00:06<00:02,  3.99it/s]
Capturing CUDA graph shapes:  71%|███████▏  | 25/35 [00:06<00:02,  4.01it/s]
Capturing CUDA graph shapes:  74%|███████▍  | 26/35 [00:06<00:02,  4.00it/s]
Capturing CUDA graph shapes:  77%|███████▋  | 27/35 [00:07<00:01,  4.02it/s]
Capturing CUDA graph shapes:  80%|████████  | 28/35 [00:07<00:01,  4.02it/s]
Capturing CUDA graph shapes:  83%|████████▎ | 29/35 [00:07<00:01,  4.00it/s]
Capturing CUDA graph shapes:  86%|████████▌ | 30/35 [00:07<00:01,  4.02it/s]
Capturing CUDA graph shapes:  89%|████████▊ | 31/35 [00:08<00:00,  4.03it/s]
Capturing CUDA graph shapes:  91%|█████████▏| 32/35 [00:08<00:00,  4.06it/s]
Capturing CUDA graph shapes:  94%|█████████▍| 33/35 [00:08<00:00,  3.97it/s]
Capturing CUDA graph shapes:  97%|█████████▋| 34/35 [00:08<00:00,  4.02it/s]
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:09<00:00,  4.05it/s]
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:09<00:00,  3.88it/s]
INFO 07-08 14:03:13 model_runner.py:1535] Graph capturing finished in 9 secs, took 0.22 GiB
INFO 07-08 14:03:13 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 14.05 seconds
RAG ON
EXAMPLE PROMPT
<|im_start|>system
You are a helpful assistant designed to generate personalized responses to user questions. Your task is to answer a user's question from a post in a personalized way by considering this user's past post questions and detailed descriptions of these questions.
# Your input:
    - The user's current question from a post.
    - The user's past post questions and detailed descriptions of these questions.
# Your task: Answer the user's current question in a personalized way by considering this user's past post questions and detailed descriptions of these questions, to learn about the user's preferences.
# Your output: You should generate personalized answer to the user's current question by considering this user's past post questions and detailed descriptions of these questions to learn about user's preferences. Your output should be a valid json object in ```json ``` block that contains the following fields:
    - personalized_answer: contains the personalized answer to the user's current question considering the this user's past post questions and detailed descriptions of these questions to learn about user's preferences.
<|im_end|>
<|im_start|>user

# Past post questions and detailed descriptions of these questions:
Writing rule which states that two causes for the same superpower is bad writing I've read somewhere that there is this writing rule stating that, for some superpower, it would be less believable if two completely different settings are present in order to obtain the same superpower. In the article, I remember it mentioned in the movie Spiderman (which I've not watched), the protagonist and another character gain the power through different means.What's this rule and does it have a name?

Is 'Sold Count' a good term I am writing a technical document, and in it I want to refer to the number of units sold for each product. I want to make it concise, and 'sold count' comes to mind. Does this term sound right? Are there better alternatives?
# Current post question:
Are the two music notes a reference?
<|im_end|>
<|im_start|>assistant

<|im_start|>system
You are a helpful assistant designed to generate personalized responses to user questions. Your task is to answer a user's question from a post in a personalized way by considering this user's past post questions and detailed descriptions of these questions.
# Your input:
    - The user's current question from a post.
    - The user's past post questions and detailed descriptions of these questions.
# Your task: Answer the user's current question in a personalized way by considering this user's past post questions and detailed descriptions of these questions, to learn about the user's preferences.
# Your output: You should generate personalized answer to the user's current question by considering this user's past post questions and detailed descriptions of these questions to learn about user's preferences. Your output should be a valid json object in ```json ``` block that contains the following fields:
    - personalized_answer: contains the personalized answer to the user's current question considering the this user's past post questions and detailed descriptions of these questions to learn about user's preferences.
<|im_end|>
<|im_start|>user

# Past post questions and detailed descriptions of these questions:
How to trick the reader into thinking they're following a redshirt instead of the protagonist? I'm currently planning a "magical girl" story, and I thought of an interesting way to start it, rather than launching straight into the backstory. It opens with a woman in her mid-thirties, complete with ponytail of death, walking through a city market while being stalked by a shadowy monster.What I want readers to expect is that the woman is either going to be killed by the monster, or saved from it in the nick of time by the heroine. What actually happens is that when the monster finally attacks, the woman transforms into a magical girl, beats the everloving crap out of the monster, and then destroys it with a magical laser beam. Surprise! She is the heroine.I want to try and preserve this surprise as best I can, and make the readers think they're following a redshirt or one-off character instead of the protagonist. Not referring to her by name until after the reveal will help, but it's probably not enough. What else can I do to achieve this?(I'm aware of answers on other questions to the effect of "don't trick your readers". In my case, this is supposed to be a pleasant surprise, so I feel like it's okay.)

How should my script refer to a character who's currently disguised as another character? I've recently resumed writing a series of scripts for an anime I've been planning. One of the characters has the ability to shape-shift, and there are several scenes in which she initially appears disguised as another character, before shape-shifting back into her normal self.So far, when writing these scenes, I've referred to the character using the name of the person she's disguised as, and only switched back to her real name after she transforms back again. However, the top answers to these questions suggest that I shouldn't do that; scripts are production documents, and it's imperative that the crew know exactly who's supposed to be in each scene, hence I should always refer to characters by their real names.But in the case of a character who's disguised as another character, how do I do this while also making it clear that they're pretending to be someone else right now?
# Current post question:
How come Neiru hasn't revived her sister yet?
<|im_end|>
<|im_start|>assistant

<|im_start|>system
You are a helpful assistant designed to generate personalized responses to user questions. Your task is to answer a user's question from a post in a personalized way by considering this user's past post questions and detailed descriptions of these questions.
# Your input:
    - The user's current question from a post.
    - The user's past post questions and detailed descriptions of these questions.
# Your task: Answer the user's current question in a personalized way by considering this user's past post questions and detailed descriptions of these questions, to learn about the user's preferences.
# Your output: You should generate personalized answer to the user's current question by considering this user's past post questions and detailed descriptions of these questions to learn about user's preferences. Your output should be a valid json object in ```json ``` block that contains the following fields:
    - personalized_answer: contains the personalized answer to the user's current question considering the this user's past post questions and detailed descriptions of these questions to learn about user's preferences.
<|im_end|>
<|im_start|>user

# Past post questions and detailed descriptions of these questions:
are what we translate as "adjectives", "nouns", etc, the same kind of words in no indo-european languages? This question comes from questions in japanese SE. Keiyōshi 形容詞 are translated as adjectives. Meishi 名詞 are translated as nouns. But are they really the same kind of words that we mean with nouns, adjectives, etc. in English? I've already found 3 examples that arises a lot of doubts in me if they are the same thing. The first is a japanese word that I can't remember right now but that I've seen used as a noun, adjective or verb. May be there are words like these in English or Spanish, but I'm not sure if they are the same. For example the word paddle can be a verb, a noun or an adjective in English. The second is japanese words that they see as a noun and that we see as adjectives. The word "next" for japaneses is a clear noun. They know that it can be used as an adjective, but when giving an example of when it is used as a noun (what it really is according to japanese), I got this "when is the next?" that is a sentence that could come in a conversation between 2 persons about events , and one of them ask the other "when is the next (event)?" . wouldnt it be for english speakers, still an adjective because it modifies an implicit noun (event)? And the third is the word "suki" and similar words, that they see as a verb and it's translated as "to like" but it is used next to the verb desu (to be) So my question is, are what we translate as adjectives, verbs, etc, from other non indoeuropean languages, really what we understand as verbs, adjectives, etc?

Did Maradona ever score a goal with his right foot? I was hearing one of Pele's declaration stating Maradona couldn't score goals with his right foot. I thought he was talking in general, but then I started to think about goals made by him with his right foot and I couldn't remember any. I made a little research about this and I couldn't find any goal scored by him with his right foot, even though I clearly didn't watch all 300+ goals he made in his career (I'm not sure if all of them were recorded on TV by the way).I also remembered he used to kick the ball to the center of the field with his left foot even when he was in the right side of the field, giving the pass with a "Rabona" instead of with his right foot, because he was too much of a left-footed player. So, did he ever score a goal with his right foot, or did he never score one this way?
# Current post question:
Was Saitama sweating with worry when he saw Garou in this scene?
<|im_end|>
<|im_start|>assistant

None

Processed prompts:   0%|          | 0/401 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts:   0%|          | 1/401 [00:12<1:23:52, 12.58s/it, est. speed input: 64.38 toks/s, output: 6.60 toks/s]
Processed prompts:   0%|          | 2/401 [00:13<36:57,  5.56s/it, est. speed input: 91.20 toks/s, output: 13.69 toks/s] 
Processed prompts:   1%|          | 3/401 [00:13<20:45,  3.13s/it, est. speed input: 119.43 toks/s, output: 21.09 toks/s]
Processed prompts:   1%|▏         | 6/401 [00:13<07:09,  1.09s/it, est. speed input: 231.56 toks/s, output: 43.71 toks/s]
Processed prompts:   2%|▏         | 8/401 [00:13<04:33,  1.43it/s, est. speed input: 287.43 toks/s, output: 58.55 toks/s]
Processed prompts:   2%|▏         | 10/401 [00:13<03:09,  2.07it/s, est. speed input: 370.66 toks/s, output: 73.23 toks/s]
Processed prompts:   3%|▎         | 12/401 [00:14<02:20,  2.76it/s, est. speed input: 440.69 toks/s, output: 87.45 toks/s]
Processed prompts:   3%|▎         | 14/401 [00:14<01:45,  3.68it/s, est. speed input: 495.20 toks/s, output: 102.10 toks/s]
Processed prompts:   4%|▍         | 16/401 [00:14<01:19,  4.86it/s, est. speed input: 550.41 toks/s, output: 117.08 toks/s]
Processed prompts:   4%|▍         | 18/401 [00:14<01:05,  5.84it/s, est. speed input: 641.04 toks/s, output: 131.44 toks/s]
Processed prompts:   6%|▌         | 25/401 [00:15<00:35, 10.48it/s, est. speed input: 952.04 toks/s, output: 183.64 toks/s]
Processed prompts:   8%|▊         | 31/401 [00:15<00:27, 13.30it/s, est. speed input: 1146.24 toks/s, output: 227.72 toks/s]
Processed prompts:   8%|▊         | 33/401 [00:15<00:27, 13.29it/s, est. speed input: 1198.95 toks/s, output: 241.42 toks/s]
Processed prompts:   9%|▊         | 35/401 [00:15<00:26, 13.58it/s, est. speed input: 1266.36 toks/s, output: 255.39 toks/s]
Processed prompts:   9%|▉         | 38/401 [00:15<00:24, 15.00it/s, est. speed input: 1388.88 toks/s, output: 277.06 toks/s]
Processed prompts:  10%|▉         | 40/401 [00:15<00:24, 14.49it/s, est. speed input: 1461.90 toks/s, output: 290.54 toks/s]
Processed prompts:  11%|█         | 44/401 [00:16<00:26, 13.43it/s, est. speed input: 1566.19 toks/s, output: 316.47 toks/s]
Processed prompts:  12%|█▏        | 49/401 [00:16<00:20, 17.26it/s, est. speed input: 1706.51 toks/s, output: 352.94 toks/s]
Processed prompts:  13%|█▎        | 51/401 [00:16<00:24, 14.37it/s, est. speed input: 1762.42 toks/s, output: 363.73 toks/s]
Processed prompts:  14%|█▎        | 55/401 [00:16<00:23, 14.50it/s, est. speed input: 1856.84 toks/s, output: 389.68 toks/s]
Processed prompts:  15%|█▍        | 60/401 [00:17<00:19, 17.79it/s, est. speed input: 1991.85 toks/s, output: 425.18 toks/s]
Processed prompts:  18%|█▊        | 71/401 [00:17<00:17, 19.39it/s, est. speed input: 2291.70 toks/s, output: 497.57 toks/s]
Processed prompts:  18%|█▊        | 74/401 [00:17<00:16, 19.27it/s, est. speed input: 2377.19 toks/s, output: 516.29 toks/s]
Processed prompts:  19%|█▉        | 77/401 [00:17<00:18, 18.00it/s, est. speed input: 2471.82 toks/s, output: 533.33 toks/s]
Processed prompts:  20%|█▉        | 80/401 [00:18<00:16, 19.10it/s, est. speed input: 2562.83 toks/s, output: 552.79 toks/s]
Processed prompts:  21%|██        | 83/401 [00:18<00:17, 18.25it/s, est. speed input: 2636.62 toks/s, output: 570.16 toks/s]
Processed prompts:  22%|██▏       | 90/401 [00:18<00:16, 18.59it/s, est. speed input: 2792.10 toks/s, output: 612.27 toks/s]
Processed prompts:  23%|██▎       | 94/401 [00:18<00:17, 18.02it/s, est. speed input: 2862.17 toks/s, output: 634.81 toks/s]
Processed prompts:  24%|██▍       | 97/401 [00:19<00:17, 17.73it/s, est. speed input: 2986.24 toks/s, output: 651.57 toks/s]
Processed prompts:  26%|██▌       | 103/401 [00:19<00:16, 18.19it/s, est. speed input: 3111.72 toks/s, output: 686.07 toks/s]
Processed prompts:  27%|██▋       | 108/401 [00:19<00:16, 17.53it/s, est. speed input: 3172.60 toks/s, output: 712.94 toks/s]
Processed prompts:  28%|██▊       | 113/401 [00:19<00:14, 19.51it/s, est. speed input: 3292.21 toks/s, output: 743.57 toks/s]
Processed prompts:  29%|██▉       | 116/401 [00:20<00:15, 17.91it/s, est. speed input: 3397.78 toks/s, output: 757.96 toks/s]
Processed prompts:  30%|██▉       | 120/401 [00:20<00:15, 18.43it/s, est. speed input: 3502.26 toks/s, output: 780.23 toks/s]
Processed prompts:  32%|███▏      | 128/401 [00:20<00:14, 19.16it/s, est. speed input: 3635.55 toks/s, output: 824.06 toks/s]
Processed prompts:  34%|███▎      | 135/401 [00:21<00:14, 18.22it/s, est. speed input: 3769.21 toks/s, output: 858.84 toks/s]
Processed prompts:  35%|███▌      | 141/401 [00:21<00:13, 18.80it/s, est. speed input: 3921.98 toks/s, output: 890.44 toks/s]
Processed prompts:  36%|███▌      | 143/401 [00:21<00:14, 17.97it/s, est. speed input: 3938.50 toks/s, output: 898.96 toks/s]
Processed prompts:  37%|███▋      | 148/401 [00:21<00:13, 19.40it/s, est. speed input: 4054.69 toks/s, output: 926.44 toks/s]
Processed prompts:  39%|███▉      | 157/401 [00:21<00:08, 28.95it/s, est. speed input: 4300.24 toks/s, output: 987.71 toks/s]
Processed prompts:  41%|████▏     | 166/401 [00:22<00:06, 38.14it/s, est. speed input: 4538.48 toks/s, output: 1049.69 toks/s]
Processed prompts:  44%|████▎     | 175/401 [00:22<00:04, 46.56it/s, est. speed input: 4799.89 toks/s, output: 1112.36 toks/s]
Processed prompts:  46%|████▌     | 183/401 [00:22<00:04, 51.95it/s, est. speed input: 4970.19 toks/s, output: 1168.00 toks/s]
Processed prompts:  48%|████▊     | 191/401 [00:22<00:03, 56.90it/s, est. speed input: 5190.16 toks/s, output: 1224.10 toks/s]
Processed prompts:  49%|████▉     | 198/401 [00:22<00:03, 58.77it/s, est. speed input: 5387.76 toks/s, output: 1273.23 toks/s]
Processed prompts:  52%|█████▏    | 209/401 [00:22<00:02, 70.31it/s, est. speed input: 5694.80 toks/s, output: 1354.74 toks/s]
Processed prompts:  55%|█████▍    | 220/401 [00:22<00:02, 80.21it/s, est. speed input: 6062.03 toks/s, output: 1436.91 toks/s]
Processed prompts:  57%|█████▋    | 229/401 [00:22<00:02, 65.46it/s, est. speed input: 6354.74 toks/s, output: 1498.04 toks/s]
Processed prompts:  59%|█████▉    | 237/401 [00:23<00:03, 50.47it/s, est. speed input: 6541.14 toks/s, output: 1548.65 toks/s]
Processed prompts:  62%|██████▏   | 248/401 [00:23<00:03, 50.48it/s, est. speed input: 6839.18 toks/s, output: 1618.84 toks/s]
Processed prompts:  63%|██████▎   | 254/401 [00:23<00:05, 26.03it/s, est. speed input: 6830.13 toks/s, output: 1625.28 toks/s]
Processed prompts:  65%|██████▍   | 259/401 [00:24<00:07, 18.99it/s, est. speed input: 6835.75 toks/s, output: 1622.03 toks/s]
Processed prompts:  66%|██████▌   | 263/401 [00:24<00:06, 20.09it/s, est. speed input: 6913.93 toks/s, output: 1635.95 toks/s]
Processed prompts:  67%|██████▋   | 267/401 [00:24<00:06, 21.97it/s, est. speed input: 6992.12 toks/s, output: 1648.70 toks/s]
Processed prompts:  68%|██████▊   | 271/401 [00:25<00:06, 21.34it/s, est. speed input: 7048.70 toks/s, output: 1654.63 toks/s]
Processed prompts:  69%|██████▉   | 278/401 [00:25<00:04, 28.37it/s, est. speed input: 7205.33 toks/s, output: 1686.40 toks/s]
Processed prompts:  70%|███████   | 282/401 [00:25<00:03, 30.35it/s, est. speed input: 7276.49 toks/s, output: 1701.38 toks/s]
Processed prompts:  71%|███████▏  | 286/401 [00:25<00:03, 32.24it/s, est. speed input: 7356.81 toks/s, output: 1715.76 toks/s]
Processed prompts:  73%|███████▎  | 292/401 [00:25<00:03, 34.75it/s, est. speed input: 7429.91 toks/s, output: 1739.96 toks/s]
Processed prompts:  74%|███████▍  | 298/401 [00:25<00:02, 38.61it/s, est. speed input: 7540.01 toks/s, output: 1764.68 toks/s]
Processed prompts:  76%|███████▌  | 305/401 [00:25<00:02, 38.09it/s, est. speed input: 7646.62 toks/s, output: 1793.47 toks/s]
Processed prompts:  78%|███████▊  | 312/401 [00:25<00:02, 43.50it/s, est. speed input: 7793.59 toks/s, output: 1827.70 toks/s]
Processed prompts:  80%|███████▉  | 320/401 [00:25<00:01, 50.39it/s, est. speed input: 7968.99 toks/s, output: 1868.14 toks/s]
Processed prompts:  82%|████████▏ | 330/401 [00:26<00:01, 60.98it/s, est. speed input: 8213.96 toks/s, output: 1922.74 toks/s]
Processed prompts:  84%|████████▍ | 337/401 [00:26<00:01, 62.64it/s, est. speed input: 8456.62 toks/s, output: 1959.30 toks/s]
Processed prompts:  87%|████████▋ | 348/401 [00:26<00:00, 68.19it/s, est. speed input: 8692.14 toks/s, output: 2022.17 toks/s]
Processed prompts:  90%|████████▉ | 360/401 [00:26<00:00, 79.04it/s, est. speed input: 8987.00 toks/s, output: 2096.63 toks/s]
Processed prompts:  92%|█████████▏| 370/401 [00:26<00:00, 84.47it/s, est. speed input: 9239.59 toks/s, output: 2161.51 toks/s]
Processed prompts:  95%|█████████▍| 379/401 [00:26<00:00, 55.86it/s, est. speed input: 9441.90 toks/s, output: 2210.08 toks/s]
Processed prompts:  96%|█████████▋| 386/401 [00:26<00:00, 58.56it/s, est. speed input: 9612.10 toks/s, output: 2257.42 toks/s]
Processed prompts:  98%|█████████▊| 393/401 [00:27<00:00, 48.55it/s, est. speed input: 9720.28 toks/s, output: 2299.42 toks/s]
Processed prompts: 100%|█████████▉| 399/401 [00:28<00:00, 13.38it/s, est. speed input: 9446.49 toks/s, output: 2244.80 toks/s]
Processed prompts: 100%|██████████| 401/401 [00:30<00:00, 13.32it/s, est. speed input: 9042.83 toks/s, output: 2167.54 toks/s]
{  "personalized_answer": "The formatting styles you see in Hebrew/Aramaic texts on Sefaria are often used to enhance readability and provide additional context. For example, the bold and big text (like <big><strong>ר' אהרן</strong></big>) is typically used to highlight names or important phrases. The small parenthesized sections (like <small>(תהלים ק\"ד, כ\"ד)</small>) are often references to other texts or sources. The quotes (like ' and ") are used to denote direct speech or specific references. The brackets and parentheses (like [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.] and (כֹּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.) are used to include additional information or notes. The italics and hyphens are used for emphasis and to separate words, respectively. While these modern formatting elements can be removed to make the text more natural, they do provide important context and are part of the original source material. If you want to remove them, you can do so, but it's important to understand that these elements are there for a reason. As for the font, the earliest Hebrew texts were written in the Paleo-Hebrew alphabet, which is a direct descendant of the Phoenician alphabet. Over time, this evolved into the Aramaic alphabet and eventually into the square script used in modern Hebrew. The font you see on Sefaria is likely the square script, which is the most common script used for Hebrew texts today. If you're interested in the original or earlier scripts, you might want to look into Paleo-Hebrew or Aramaic scripts."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:05<00:00,  5.04s/it, est. speed input: 648.83 toks/s, output: 81.10 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:05<00:00,  5.04s/it, est. speed input: 648.83 toks/s, output: 81.10 toks/s]
{  "personalized_answer": "The formatting styles you see in Hebrew/Aramaic texts from Sefaria are often used to enhance readability and provide additional context. For example, the bold and big text (like <big><strong>ר' אהרן</strong></big>) is typically used to highlight names or important phrases. The small parenthesized sections (like <small>(תהלים ק\"ד, כ\"ד)</small>) often indicate references to other texts or sources. The quotes (like ' and ") are used to denote direct speech or specific phrases. The brackets and parentheses (like [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.] and (כֹּל חָכְמָה מֵיהוָה וִעָמְוָה הִיא לְעוֹלָמִים) are used to include additional information or to clarify the text. The italics and hyphens are used for stylistic or editorial purposes. While these modern formatting elements can be removed or changed to make the text more natural, they do not represent the original text's script or font. The earliest Hebrew texts were written in the Paleo-Hebrew alphabet, which evolved into the modern Hebrew square script. The Samaritan script is a direct descendant of Paleo-Hebrew, and the Aramaic script developed later. The Torah, as we know it today, was likely written in the Paleo-Hebrew script, but over time, the square script became the standard. If you want to remove these modern elements, you can do so, but it's important to understand that they serve to clarify and enhance the text for modern readers."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.20s/it, est. speed input: 778.48 toks/s, output: 80.42 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.20s/it, est. speed input: 778.48 toks/s, output: 80.42 toks/s]
{  "personalized_answer": "The formatting styles you're seeing in Hebrew/Aramaic texts on Sefaria are primarily modern additions to make the texts more readable and accessible to contemporary readers. For example, the bold and big text (like <big><strong>ר' אהרן</strong></big>) is likely used to highlight names or important phrases. The small parenthesized sections (like <small>(תהלים ק\"ד, כ\"ד)</small>) and the brackets [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.] are used to provide references or additional information. The quotes (like ' and ") are modern additions to denote speech or quotations. The use of parentheses and brackets is often to include additional commentary or references. The hyphens between words are likely used for clarity or to separate words that might otherwise run together. The italics are used for emphasis or to denote foreign words or names. While these modern additions can be helpful, if you want to remove them to make the text more 'natural' and closer to the original, you can do so. However, it's important to note that some of these elements, like the references and commentary, are part of the scholarly tradition and can provide valuable context. If you want to remove them, you can use a text editor or script to strip out these elements, but be aware that you might lose some of the scholarly insights and context."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.63s/it, est. speed input: 707.24 toks/s, output: 80.62 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.63s/it, est. speed input: 707.24 toks/s, output: 80.62 toks/s]
{  "personalized_answer": "The formatting styles you're seeing in the Hebrew/Aramaic texts on Sefaria are modern additions that help with readability and provide context. The bold and italics are used to highlight specific names, phrases, or important sections. The large and small text sizes, such as <big><strong>ר' אהרן</strong></big>, are used to emphasize key figures or terms. Quotes, like ' and ", are used to denote speech or specific references. Parentheses and brackets, such as (תהלים ק\"ד, כ\"ד) and [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.], are used to provide additional information or references. Hyphens between words are used to clarify the meaning or pronunciation of certain terms. These modern additions are not part of the original texts and can be removed or changed to make the text more natural and closer to the original. For the earliest Hebrew texts, the script would have been Paleo-Hebrew, which is a direct descendant of the Phoenician alphabet. The Samaritan script and Aramaic script came later. The Torah, if written in its earliest form, would likely have been in Paleo-Hebrew. However, the exact script used for the Torah is a matter of tradition and interpretation, with some believing it to be Ktav Ashurith, the block script seen in modern Torah scrolls. To remove or change these modern additions, you can use text processing tools or scripts that identify and remove these formatting styles, making the text cleaner and more aligned with the original script."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.88s/it, est. speed input: 670.56 toks/s, output: 80.95 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.88s/it, est. speed input: 670.56 toks/s, output: 80.95 toks/s]
{  "personalized_answer": "The formatting styles you're seeing in Hebrew/Aramaic texts on Sefaria are modern additions meant to enhance readability and provide context. The bold and italics are used for emphasis, such as highlighting names or important phrases. The big text, like <big><strong>ר' אהרן</strong></big>, is often used to denote important figures or titles. The quotes, like ' and ", are used to indicate speech or quotations. The small parenthesized sections, like <small>(תהלים ק\"ד, כ\"ד)</small>, are references to other texts or passages. The brackets and parentheses, like [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.] and (כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.), are used to include additional information or citations. The hyphens between words are used for clarity, especially in cases where words run together. These elements are not part of the original texts and can be removed or modified to make the text more natural. As for the script of the earliest Hebrew texts, they were likely written in Paleo-Hebrew, which is a direct descendant of the Phoenician alphabet. The square script you see in modern Torah scrolls, known as Ktav Ashurith, is a later development that evolved from Aramaic script. So, while the original texts would have been written in Paleo-Hebrew, the script you see on Sefaria is a more modern adaptation."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:07<00:00,  7.48s/it, est. speed input: 437.30 toks/s, output: 82.33 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:07<00:00,  7.48s/it, est. speed input: 437.30 toks/s, output: 82.33 toks/s]
{  "personalized_answer": "The formatting styles you see in Hebrew/Aramaic texts from Sefaria are primarily there for readability and to provide context. The small parentheses and quotes, like 'הקדמה:' and <small>(תהלים ק\"ד, כ\"ד)</small>, are used to denote footnotes, references, or additional information. The bold text, such as <big><strong>ר' אהרן</strong></big>, highlights important names or terms. The brackets and parentheses, like [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.] and (בן אריאל), are used to indicate editorial notes, translations, or clarifications. The italics and hyphens are often used for stylistic or typographical reasons. While these elements can be seen as 'modern' or 'English' additions, they are not part of the original texts and can be removed or changed to make the text more natural. If you want a cleaner version of the text, you can strip out these formatting elements, keeping only the core text. For example, the original text without these modern additions would look more like: \n\nהקדמה: ואמו\"ר הצדיקים הקדושים, כי מן זמן התגלות הבעל שם טוב הקדוש התחיל התנוצצות המשיח, והענין בודאי הוא אמת לאמתו, על פי מה דאיתא בספר הקדוש תולדות יעקב יוסף פ' וישב רל\"ג ע\"א, ומובא לקמן בספר זה בפרשת לך אות ב', כי סוד המשיח הוא סוד הדעת, וע\"ש בהגה ג', וזה מובן על פי פשוטו גם כן, כי כן כתב הרמב\"ם בפרק ט' מהלכות תשובה הלכה ב', וזה לשונו, ומפני זה נתאוו כל ישראל נביאיהם וחכמיהם לימות המשיח וכו', לפי שבאותן הימים תרבה הדעה והחכמה והאמת, שנאמר (ישעיהו י\"א:ט׳) כי מלאה האם דעה את ה' וכו' ע\"ש, ולקמן פ' שמות אות ט"ז העתקתי מס' תולדות יעקב יוסף סוף פ' וישלח, שזה היה ענין גאולת מצרים, מה שנתגלה הדעת על ידי משה רבינו עליו השלום, ובגאולה העתידה יתגלה הדעת ביתר שאת ויתר עוז, כי זה הדעת שנתגלה במצרים נקרא דעת דנוקבא, ובגאולה העתידה במהרה בימינו יתגלה דעת דדכורא ע\"ש היטב."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:06<00:00,  6.25s/it, est. speed input: 523.92 toks/s, output: 81.82 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:06<00:00,  6.25s/it, est. speed input: 523.92 toks/s, output: 81.82 toks/s]
[rank0]:[W708 14:04:18.461321475 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
Experiment complete! Output can be found at data/out/rag/asym/test_ae_output.json
Cleaned temporary files.
Keeping ['ae', 'lp', 'sc'] in profile
Temp data file saved at data/processed/TEMP_2025-07-08 14:04:21.607623_ae_processed_test.json.
	Running Ranking: ['python', 'retrieval/rank_dataset.py', '--model_name', 'facebook/contriever-msmarco', '--input_dataset_addr', 'data/processed/TEMP_2025-07-08 14:04:21.607623_ae_processed_test.json', '--output_dataset_addr', 'data/processed/TEMP_2025-07-08 14:04:21.607623_ae_processed_test.json', '--batch_size', '4']

  0%|          | 0/401 [00:00<?, ?it/s]
  0%|          | 1/401 [00:00<02:06,  3.17it/s]
  0%|          | 2/401 [00:00<01:51,  3.57it/s]
  1%|          | 3/401 [00:02<08:16,  1.25s/it]
  1%|          | 4/401 [00:04<08:45,  1.32s/it]
  1%|          | 5/401 [00:05<09:00,  1.36s/it]
  1%|▏         | 6/401 [00:07<09:13,  1.40s/it]
  2%|▏         | 7/401 [00:08<09:22,  1.43s/it]
  2%|▏         | 8/401 [00:10<09:20,  1.43s/it]
  2%|▏         | 9/401 [00:11<09:23,  1.44s/it]
  2%|▏         | 10/401 [00:12<07:27,  1.14s/it]
  3%|▎         | 11/401 [00:13<08:31,  1.31s/it]
  3%|▎         | 13/401 [00:15<07:04,  1.09s/it]
  3%|▎         | 14/401 [00:18<10:44,  1.66s/it]
  4%|▎         | 15/401 [00:19<08:06,  1.26s/it]
  4%|▍         | 17/401 [00:19<04:58,  1.29it/s]
  4%|▍         | 18/401 [00:21<06:18,  1.01it/s]
  5%|▍         | 19/401 [00:22<07:21,  1.16s/it]
  5%|▍         | 20/401 [00:26<12:22,  1.95s/it]
  5%|▌         | 21/401 [00:27<09:22,  1.48s/it]
  5%|▌         | 22/401 [00:31<14:00,  2.22s/it]
  6%|▌         | 23/401 [00:32<12:58,  2.06s/it]
  6%|▌         | 24/401 [00:37<16:51,  2.68s/it]
  6%|▌         | 25/401 [00:37<12:06,  1.93s/it]
  6%|▋         | 26/401 [00:37<08:53,  1.42s/it]
  7%|▋         | 27/401 [00:41<13:56,  2.24s/it]
  7%|▋         | 28/401 [00:41<10:17,  1.66s/it]
  7%|▋         | 29/401 [00:41<07:24,  1.19s/it]
  7%|▋         | 30/401 [00:43<07:36,  1.23s/it]
  8%|▊         | 31/401 [00:44<07:24,  1.20s/it]
  8%|▊         | 32/401 [00:44<05:31,  1.11it/s]
  8%|▊         | 33/401 [00:45<05:56,  1.03it/s]
  8%|▊         | 34/401 [00:47<07:47,  1.27s/it]
  9%|▊         | 35/401 [00:47<05:38,  1.08it/s]
  9%|▉         | 37/401 [00:48<03:36,  1.68it/s]
 10%|▉         | 39/401 [00:49<03:39,  1.65it/s]
 10%|█         | 41/401 [00:50<03:51,  1.55it/s]
 10%|█         | 42/401 [00:51<03:22,  1.77it/s]
 11%|█         | 43/401 [00:51<02:59,  1.99it/s]
 11%|█         | 44/401 [00:52<03:40,  1.62it/s]
 11%|█▏        | 46/401 [00:52<02:45,  2.15it/s]
 12%|█▏        | 47/401 [00:54<04:50,  1.22it/s]
 12%|█▏        | 48/401 [00:55<04:15,  1.38it/s]
 12%|█▏        | 49/401 [00:55<03:42,  1.58it/s]
 12%|█▏        | 50/401 [00:56<03:56,  1.48it/s]
 13%|█▎        | 51/401 [00:56<03:30,  1.66it/s]
 13%|█▎        | 53/401 [00:57<02:37,  2.20it/s]
 13%|█▎        | 54/401 [00:57<02:15,  2.57it/s]
 14%|█▎        | 55/401 [01:00<05:44,  1.00it/s]
 14%|█▍        | 56/401 [01:01<06:13,  1.08s/it]
 14%|█▍        | 57/401 [01:02<06:01,  1.05s/it]
 14%|█▍        | 58/401 [01:02<04:30,  1.27it/s]
 15%|█▍        | 59/401 [01:05<07:41,  1.35s/it]
 15%|█▍        | 60/401 [01:06<06:32,  1.15s/it]
 15%|█▌        | 61/401 [01:06<05:19,  1.06it/s]
 15%|█▌        | 62/401 [01:06<04:15,  1.33it/s]
 16%|█▌        | 63/401 [01:07<03:48,  1.48it/s]
 16%|█▌        | 64/401 [01:07<03:27,  1.62it/s]
 16%|█▌        | 65/401 [01:08<03:15,  1.72it/s]
 16%|█▋        | 66/401 [01:09<04:25,  1.26it/s]
 17%|█▋        | 67/401 [01:09<03:32,  1.57it/s]
 17%|█▋        | 68/401 [01:10<02:49,  1.96it/s]
 17%|█▋        | 69/401 [01:10<02:08,  2.58it/s]
 17%|█▋        | 70/401 [01:11<03:17,  1.68it/s]
 18%|█▊        | 71/401 [01:11<02:51,  1.92it/s]
 18%|█▊        | 72/401 [01:12<03:37,  1.51it/s]
 18%|█▊        | 73/401 [01:13<03:04,  1.78it/s]
 18%|█▊        | 74/401 [01:14<03:43,  1.47it/s]
 19%|█▊        | 75/401 [01:15<04:12,  1.29it/s]
 19%|█▉        | 76/401 [01:15<04:30,  1.20it/s]
 19%|█▉        | 77/401 [01:16<04:44,  1.14it/s]
 19%|█▉        | 78/401 [01:17<03:33,  1.52it/s]
 20%|█▉        | 79/401 [01:18<04:02,  1.33it/s]
 20%|█▉        | 80/401 [01:19<04:22,  1.22it/s]
 20%|██        | 81/401 [01:19<04:16,  1.25it/s]
 20%|██        | 82/401 [01:20<04:33,  1.17it/s]
 21%|██        | 83/401 [01:21<04:44,  1.12it/s]
 21%|██        | 84/401 [01:22<04:52,  1.08it/s]
 21%|██        | 85/401 [01:23<03:59,  1.32it/s]
 21%|██▏       | 86/401 [01:24<04:18,  1.22it/s]
 22%|██▏       | 87/401 [01:26<07:20,  1.40s/it]
 22%|██▏       | 88/401 [01:27<06:39,  1.28s/it]
 22%|██▏       | 89/401 [01:29<06:41,  1.29s/it]
 22%|██▏       | 90/401 [01:29<04:59,  1.04it/s]
 23%|██▎       | 91/401 [01:29<03:43,  1.39it/s]
 23%|██▎       | 92/401 [01:30<04:05,  1.26it/s]
 23%|██▎       | 93/401 [01:30<03:11,  1.61it/s]
 23%|██▎       | 94/401 [01:32<05:16,  1.03s/it]
 24%|██▎       | 95/401 [01:34<05:40,  1.11s/it]
 24%|██▍       | 96/401 [01:34<05:26,  1.07s/it]
 24%|██▍       | 97/401 [01:35<05:16,  1.04s/it]
 24%|██▍       | 98/401 [01:36<04:17,  1.18it/s]
 25%|██▍       | 99/401 [01:36<03:15,  1.55it/s]
 25%|██▍       | 100/401 [01:36<02:41,  1.86it/s]
 25%|██▌       | 101/401 [01:37<03:02,  1.64it/s]
 25%|██▌       | 102/401 [01:37<02:19,  2.15it/s]
 26%|██▌       | 103/401 [01:38<02:14,  2.21it/s]
 26%|██▌       | 104/401 [01:39<03:00,  1.65it/s]
 26%|██▌       | 105/401 [01:40<03:32,  1.40it/s]
 27%|██▋       | 107/401 [01:40<02:30,  1.95it/s]
 27%|██▋       | 108/401 [01:40<02:04,  2.36it/s]
 27%|██▋       | 109/401 [01:41<02:45,  1.77it/s]
 27%|██▋       | 110/401 [01:41<02:07,  2.27it/s]
 28%|██▊       | 111/401 [01:42<02:49,  1.71it/s]
 28%|██▊       | 112/401 [01:43<03:20,  1.44it/s]
 28%|██▊       | 113/401 [01:44<03:17,  1.46it/s]
 28%|██▊       | 114/401 [01:45<03:09,  1.51it/s]
 29%|██▊       | 115/401 [01:45<02:33,  1.86it/s]
 29%|██▉       | 116/401 [01:46<03:08,  1.51it/s]
 29%|██▉       | 117/401 [01:46<02:52,  1.64it/s]
 29%|██▉       | 118/401 [01:46<02:17,  2.06it/s]
 30%|██▉       | 119/401 [01:48<03:15,  1.44it/s]
 30%|██▉       | 120/401 [01:48<02:32,  1.84it/s]
 30%|███       | 121/401 [01:48<02:04,  2.25it/s]
 30%|███       | 122/401 [01:49<02:17,  2.03it/s]
 31%|███       | 123/401 [01:50<03:24,  1.36it/s]
 31%|███       | 124/401 [01:51<04:11,  1.10it/s]
 31%|███       | 125/401 [01:53<04:44,  1.03s/it]
 31%|███▏      | 126/401 [01:53<03:37,  1.27it/s]
 32%|███▏      | 127/401 [01:54<04:19,  1.06it/s]
 32%|███▏      | 128/401 [01:55<04:48,  1.06s/it]
 32%|███▏      | 129/401 [01:56<04:40,  1.03s/it]
 32%|███▏      | 130/401 [01:58<05:02,  1.12s/it]
 33%|███▎      | 131/401 [01:58<04:33,  1.01s/it]
 33%|███▎      | 132/401 [01:59<03:32,  1.27it/s]
 33%|███▎      | 133/401 [02:01<06:10,  1.38s/it]
 33%|███▎      | 134/401 [02:02<05:36,  1.26s/it]
 34%|███▎      | 135/401 [02:03<05:14,  1.18s/it]
 34%|███▍      | 136/401 [02:04<04:56,  1.12s/it]
 34%|███▍      | 137/401 [02:05<03:38,  1.21it/s]
 34%|███▍      | 138/401 [02:06<03:48,  1.15it/s]
 35%|███▍      | 139/401 [02:06<03:39,  1.19it/s]
 35%|███▍      | 140/401 [02:07<02:50,  1.53it/s]
 35%|███▌      | 141/401 [02:08<04:15,  1.02it/s]
 35%|███▌      | 142/401 [02:10<04:40,  1.08s/it]
 36%|███▌      | 143/401 [02:10<03:48,  1.13it/s]
 36%|███▌      | 144/401 [02:11<03:53,  1.10it/s]
 36%|███▌      | 145/401 [02:11<03:04,  1.39it/s]
 36%|███▋      | 146/401 [02:12<03:23,  1.25it/s]
 37%|███▋      | 147/401 [02:13<03:35,  1.18it/s]
 37%|███▋      | 148/401 [02:14<03:01,  1.39it/s]
 37%|███▋      | 149/401 [02:15<03:18,  1.27it/s]
 37%|███▋      | 150/401 [02:16<03:31,  1.18it/s]
 38%|███▊      | 151/401 [02:17<04:06,  1.01it/s]
 38%|███▊      | 152/401 [02:18<04:04,  1.02it/s]
 38%|███▊      | 153/401 [02:18<03:22,  1.22it/s]
 38%|███▊      | 154/401 [02:19<02:56,  1.40it/s]
 39%|███▊      | 155/401 [02:20<03:39,  1.12it/s]
 39%|███▉      | 156/401 [02:21<04:09,  1.02s/it]
 39%|███▉      | 157/401 [02:23<04:28,  1.10s/it]
 40%|███▉      | 159/401 [02:24<03:19,  1.21it/s]
 40%|███▉      | 160/401 [02:24<02:54,  1.38it/s]
 40%|████      | 162/401 [02:25<02:42,  1.47it/s]
 41%|████      | 163/401 [02:26<02:49,  1.40it/s]
 41%|████      | 164/401 [02:27<02:52,  1.37it/s]
 41%|████      | 165/401 [02:28<03:07,  1.26it/s]
 41%|████▏     | 166/401 [02:29<03:18,  1.18it/s]
 42%|████▏     | 167/401 [02:29<02:32,  1.54it/s]
 42%|████▏     | 168/401 [02:30<02:52,  1.35it/s]
 42%|████▏     | 169/401 [02:31<03:06,  1.24it/s]
 42%|████▏     | 170/401 [02:32<03:17,  1.17it/s]
 43%|████▎     | 171/401 [02:33<03:24,  1.12it/s]
 43%|████▎     | 172/401 [02:33<02:52,  1.32it/s]
 43%|████▎     | 173/401 [02:34<03:08,  1.21it/s]
 43%|████▎     | 174/401 [02:35<03:18,  1.14it/s]
 44%|████▎     | 175/401 [02:36<03:24,  1.11it/s]
 44%|████▍     | 176/401 [02:37<03:27,  1.08it/s]
 44%|████▍     | 177/401 [02:39<03:54,  1.05s/it]
 44%|████▍     | 178/401 [02:40<03:47,  1.02s/it]
 45%|████▍     | 179/401 [02:41<03:42,  1.00s/it]
 45%|████▍     | 180/401 [02:42<03:39,  1.01it/s]
 45%|████▌     | 181/401 [02:42<03:37,  1.01it/s]
 45%|████▌     | 182/401 [02:43<03:36,  1.01it/s]
 46%|████▌     | 183/401 [02:47<06:27,  1.78s/it]
 46%|████▌     | 184/401 [02:51<08:22,  2.31s/it]
 46%|████▌     | 185/401 [02:54<09:45,  2.71s/it]
 46%|████▋     | 186/401 [02:58<10:41,  2.98s/it]
 47%|████▋     | 187/401 [03:02<11:19,  3.18s/it]
 47%|████▋     | 188/401 [03:02<08:07,  2.29s/it]
 47%|████▋     | 189/401 [03:05<09:33,  2.71s/it]
 47%|████▋     | 190/401 [03:09<10:28,  2.98s/it]
 48%|████▊     | 191/401 [03:11<09:11,  2.63s/it]
 48%|████▊     | 192/401 [03:13<08:17,  2.38s/it]
 48%|████▊     | 193/401 [03:13<05:58,  1.72s/it]
 48%|████▊     | 194/401 [03:13<04:26,  1.29s/it]
 49%|████▊     | 195/401 [03:17<06:50,  1.99s/it]
 49%|████▉     | 196/401 [03:19<06:36,  1.93s/it]
 49%|████▉     | 197/401 [03:21<06:38,  1.95s/it]
 49%|████▉     | 198/401 [03:24<08:15,  2.44s/it]
 50%|████▉     | 199/401 [03:26<07:34,  2.25s/it]
 50%|████▉     | 200/401 [03:28<07:05,  2.12s/it]
 50%|█████     | 201/401 [03:30<06:46,  2.03s/it]
 50%|█████     | 202/401 [03:31<06:30,  1.96s/it]
 51%|█████     | 203/401 [03:33<06:20,  1.92s/it]
 51%|█████     | 204/401 [03:35<06:11,  1.89s/it]
 51%|█████     | 205/401 [03:35<04:26,  1.36s/it]
 51%|█████▏    | 206/401 [03:37<04:52,  1.50s/it]
 52%|█████▏    | 207/401 [03:39<05:10,  1.60s/it]
 52%|█████▏    | 208/401 [03:41<05:19,  1.65s/it]
 52%|█████▏    | 209/401 [03:41<04:05,  1.28s/it]
 52%|█████▏    | 210/401 [03:43<04:35,  1.44s/it]
 53%|█████▎    | 211/401 [03:44<03:55,  1.24s/it]
 53%|█████▎    | 212/401 [03:44<03:17,  1.04s/it]
 53%|█████▎    | 213/401 [03:45<03:01,  1.04it/s]
 53%|█████▎    | 214/401 [03:47<03:47,  1.22s/it]
 54%|█████▎    | 215/401 [03:47<03:12,  1.04s/it]
 54%|█████▍    | 216/401 [03:49<03:27,  1.12s/it]
 54%|█████▍    | 218/401 [03:49<02:19,  1.31it/s]
 55%|█████▍    | 219/401 [03:50<02:12,  1.38it/s]
 55%|█████▍    | 220/401 [03:51<02:06,  1.43it/s]
 55%|█████▌    | 221/401 [03:53<03:46,  1.26s/it]
 55%|█████▌    | 222/401 [03:54<03:13,  1.08s/it]
 56%|█████▌    | 223/401 [03:54<02:23,  1.24it/s]
 56%|█████▌    | 224/401 [03:54<01:59,  1.48it/s]
 56%|█████▌    | 225/401 [03:55<01:31,  1.92it/s]
 56%|█████▋    | 226/401 [03:55<01:10,  2.47it/s]
 57%|█████▋    | 227/401 [03:55<01:00,  2.87it/s]
 57%|█████▋    | 228/401 [03:56<01:16,  2.27it/s]
 57%|█████▋    | 229/401 [03:56<01:02,  2.75it/s]
 57%|█████▋    | 230/401 [03:57<02:05,  1.37it/s]
 58%|█████▊    | 231/401 [03:58<01:35,  1.77it/s]
 58%|█████▊    | 232/401 [03:58<01:35,  1.77it/s]
 58%|█████▊    | 234/401 [04:02<03:13,  1.16s/it]
 59%|█████▊    | 235/401 [04:02<02:38,  1.05it/s]
 59%|█████▉    | 236/401 [04:02<02:02,  1.35it/s]
 59%|█████▉    | 237/401 [04:03<01:53,  1.44it/s]
 59%|█████▉    | 238/401 [04:03<01:42,  1.58it/s]
 60%|█████▉    | 239/401 [04:04<01:41,  1.60it/s]
 60%|█████▉    | 240/401 [04:04<01:20,  2.00it/s]
 60%|██████    | 242/401 [04:04<00:52,  3.04it/s]
 61%|██████    | 243/401 [04:05<01:08,  2.30it/s]
 61%|██████    | 244/401 [04:06<01:05,  2.39it/s]
 61%|██████    | 245/401 [04:06<00:53,  2.94it/s]
 61%|██████▏   | 246/401 [04:06<01:04,  2.40it/s]
 62%|██████▏   | 247/401 [04:07<01:13,  2.10it/s]
 62%|██████▏   | 248/401 [04:07<00:56,  2.71it/s]
 62%|██████▏   | 249/401 [04:08<01:44,  1.46it/s]
 63%|██████▎   | 251/401 [04:09<01:07,  2.21it/s]
 63%|██████▎   | 252/401 [04:09<00:55,  2.70it/s]
 63%|██████▎   | 254/401 [04:09<00:43,  3.40it/s]
 64%|██████▎   | 255/401 [04:11<01:27,  1.66it/s]
 64%|██████▍   | 256/401 [04:11<01:16,  1.88it/s]
 64%|██████▍   | 257/401 [04:12<01:09,  2.08it/s]
 64%|██████▍   | 258/401 [04:12<01:03,  2.26it/s]
 65%|██████▍   | 259/401 [04:12<00:58,  2.45it/s]
 65%|██████▌   | 261/401 [04:13<00:53,  2.60it/s]
 65%|██████▌   | 262/401 [04:13<00:51,  2.72it/s]
 66%|██████▌   | 263/401 [04:14<00:49,  2.79it/s]
 66%|██████▌   | 264/401 [04:14<00:43,  3.16it/s]
 66%|██████▌   | 265/401 [04:14<00:43,  3.11it/s]
 66%|██████▋   | 266/401 [04:14<00:43,  3.08it/s]
 67%|██████▋   | 267/401 [04:15<00:37,  3.62it/s]
 67%|██████▋   | 268/401 [04:15<00:33,  4.01it/s]
 67%|██████▋   | 269/401 [04:15<00:45,  2.90it/s]
 67%|██████▋   | 270/401 [04:16<00:55,  2.38it/s]
 68%|██████▊   | 272/401 [04:16<00:35,  3.68it/s]
 68%|██████▊   | 273/401 [04:16<00:30,  4.16it/s]
 68%|██████▊   | 274/401 [04:16<00:26,  4.77it/s]
 69%|██████▊   | 275/401 [04:17<00:23,  5.34it/s]
 69%|██████▉   | 276/401 [04:17<00:22,  5.60it/s]
 69%|██████▉   | 277/401 [04:17<00:33,  3.65it/s]
 69%|██████▉   | 278/401 [04:17<00:29,  4.22it/s]
 70%|██████▉   | 279/401 [04:18<00:24,  4.91it/s]
 70%|██████▉   | 280/401 [04:18<00:31,  3.87it/s]
 70%|███████   | 281/401 [04:18<00:26,  4.54it/s]
 70%|███████   | 282/401 [04:18<00:22,  5.31it/s]
 71%|███████   | 283/401 [04:19<00:35,  3.33it/s]
 71%|███████   | 284/401 [04:19<00:35,  3.29it/s]
 71%|███████   | 285/401 [04:19<00:31,  3.64it/s]
 71%|███████▏  | 286/401 [04:20<00:33,  3.46it/s]
 72%|███████▏  | 287/401 [04:20<00:33,  3.38it/s]
 72%|███████▏  | 288/401 [04:20<00:28,  3.99it/s]
 72%|███████▏  | 289/401 [04:20<00:26,  4.20it/s]
 73%|███████▎  | 291/401 [04:21<00:26,  4.22it/s]
 73%|███████▎  | 292/401 [04:22<00:58,  1.87it/s]
 73%|███████▎  | 293/401 [04:23<01:09,  1.55it/s]
 73%|███████▎  | 294/401 [04:26<02:18,  1.29s/it]
 74%|███████▎  | 295/401 [04:26<01:42,  1.04it/s]
 74%|███████▍  | 296/401 [04:27<01:40,  1.04it/s]
 74%|███████▍  | 297/401 [04:27<01:15,  1.37it/s]
 74%|███████▍  | 298/401 [04:28<01:04,  1.61it/s]
 75%|███████▍  | 299/401 [04:29<01:28,  1.16it/s]
 75%|███████▍  | 300/401 [04:30<01:26,  1.17it/s]
 75%|███████▌  | 301/401 [04:30<01:04,  1.55it/s]
 75%|███████▌  | 302/401 [04:30<00:48,  2.05it/s]
 76%|███████▌  | 303/401 [04:31<00:58,  1.68it/s]
 76%|███████▌  | 304/401 [04:32<00:59,  1.62it/s]
 76%|███████▌  | 305/401 [04:33<01:13,  1.31it/s]
 76%|███████▋  | 306/401 [04:34<01:14,  1.28it/s]
 77%|███████▋  | 307/401 [04:35<01:18,  1.19it/s]
 77%|███████▋  | 308/401 [04:35<01:06,  1.39it/s]
 77%|███████▋  | 309/401 [04:36<01:03,  1.45it/s]
 77%|███████▋  | 310/401 [04:36<00:54,  1.66it/s]
 78%|███████▊  | 311/401 [04:37<01:00,  1.50it/s]
 78%|███████▊  | 312/401 [04:37<00:51,  1.71it/s]
 78%|███████▊  | 313/401 [04:38<00:40,  2.15it/s]
 78%|███████▊  | 314/401 [04:38<00:38,  2.24it/s]
 79%|███████▊  | 315/401 [04:38<00:32,  2.61it/s]
 79%|███████▉  | 316/401 [04:38<00:26,  3.16it/s]
 79%|███████▉  | 317/401 [04:40<00:54,  1.54it/s]
 79%|███████▉  | 318/401 [04:40<00:50,  1.65it/s]
 80%|███████▉  | 319/401 [04:41<00:41,  1.98it/s]
 80%|███████▉  | 320/401 [04:41<00:40,  2.01it/s]
 80%|████████  | 321/401 [04:41<00:39,  2.05it/s]
 80%|████████  | 322/401 [04:42<00:38,  2.06it/s]
 81%|████████  | 323/401 [04:45<01:46,  1.37s/it]
 81%|████████  | 324/401 [04:49<02:30,  1.96s/it]
 81%|████████  | 325/401 [04:52<03:01,  2.39s/it]
 81%|████████▏ | 326/401 [04:53<02:26,  1.96s/it]
 82%|████████▏ | 327/401 [04:54<02:00,  1.62s/it]
 82%|████████▏ | 328/401 [04:54<01:34,  1.29s/it]
 82%|████████▏ | 329/401 [04:56<01:40,  1.40s/it]
 82%|████████▏ | 330/401 [04:59<02:21,  2.00s/it]
 83%|████████▎ | 331/401 [05:00<01:58,  1.69s/it]
 83%|████████▎ | 332/401 [05:04<02:32,  2.21s/it]
 83%|████████▎ | 333/401 [05:07<02:53,  2.56s/it]
 83%|████████▎ | 334/401 [05:08<02:06,  1.89s/it]
 84%|████████▎ | 335/401 [05:11<02:34,  2.35s/it]
 84%|████████▍ | 336/401 [05:14<02:53,  2.66s/it]
 84%|████████▍ | 337/401 [05:16<02:20,  2.20s/it]
 84%|████████▍ | 338/401 [05:16<01:47,  1.70s/it]
 85%|████████▍ | 339/401 [05:17<01:23,  1.35s/it]
 85%|████████▍ | 340/401 [05:17<01:00,  1.00it/s]
 85%|████████▌ | 341/401 [05:17<00:43,  1.37it/s]
 85%|████████▌ | 342/401 [05:17<00:35,  1.65it/s]
 86%|████████▌ | 343/401 [05:18<00:33,  1.73it/s]
 86%|████████▌ | 344/401 [05:18<00:28,  2.00it/s]
 86%|████████▌ | 345/401 [05:19<00:44,  1.27it/s]
 86%|████████▋ | 346/401 [05:20<00:36,  1.49it/s]
 87%|████████▋ | 347/401 [05:20<00:31,  1.73it/s]
 87%|████████▋ | 348/401 [05:21<00:28,  1.89it/s]
 87%|████████▋ | 349/401 [05:21<00:23,  2.24it/s]
 87%|████████▋ | 350/401 [05:24<01:03,  1.24s/it]
 88%|████████▊ | 351/401 [05:27<01:34,  1.88s/it]
 88%|████████▊ | 352/401 [05:28<01:07,  1.39s/it]
 88%|████████▊ | 353/401 [05:31<01:37,  2.02s/it]
 89%|████████▊ | 355/401 [05:32<00:54,  1.19s/it]
 89%|████████▉ | 356/401 [05:35<01:14,  1.66s/it]
 89%|████████▉ | 357/401 [05:35<01:01,  1.41s/it]
 89%|████████▉ | 358/401 [05:36<00:57,  1.33s/it]
 90%|████████▉ | 359/401 [05:37<00:51,  1.22s/it]
 90%|████████▉ | 360/401 [05:38<00:46,  1.14s/it]
 90%|█████████ | 361/401 [05:39<00:37,  1.06it/s]
 90%|█████████ | 362/401 [05:39<00:29,  1.33it/s]
 91%|█████████ | 363/401 [05:39<00:23,  1.63it/s]
 91%|█████████ | 364/401 [05:40<00:17,  2.06it/s]
 91%|█████████ | 365/401 [05:41<00:30,  1.17it/s]
 91%|█████████▏| 366/401 [05:41<00:23,  1.49it/s]
 92%|█████████▏| 367/401 [05:42<00:21,  1.61it/s]
 92%|█████████▏| 368/401 [05:42<00:15,  2.14it/s]
 92%|█████████▏| 369/401 [05:42<00:13,  2.43it/s]
 92%|█████████▏| 370/401 [05:44<00:24,  1.25it/s]
 93%|█████████▎| 371/401 [05:46<00:32,  1.07s/it]
 93%|█████████▎| 372/401 [05:46<00:23,  1.26it/s]
 93%|█████████▎| 373/401 [05:48<00:30,  1.07s/it]
 93%|█████████▎| 374/401 [05:49<00:34,  1.27s/it]
 94%|█████████▎| 375/401 [05:51<00:36,  1.40s/it]
 94%|█████████▍| 376/401 [05:54<00:47,  1.90s/it]
 94%|█████████▍| 377/401 [05:55<00:34,  1.46s/it]
 94%|█████████▍| 378/401 [05:58<00:45,  1.96s/it]
 95%|█████████▍| 379/401 [06:01<00:52,  2.39s/it]
 95%|█████████▍| 380/401 [06:03<00:46,  2.19s/it]
 95%|█████████▌| 382/401 [06:06<00:36,  1.90s/it]
 96%|█████████▌| 383/401 [06:09<00:39,  2.19s/it]
 96%|█████████▌| 384/401 [06:11<00:38,  2.24s/it]
 96%|█████████▌| 385/401 [06:15<00:40,  2.55s/it]
 96%|█████████▋| 386/401 [06:16<00:31,  2.08s/it]
 97%|█████████▋| 387/401 [06:17<00:25,  1.85s/it]
 97%|█████████▋| 388/401 [06:18<00:21,  1.64s/it]
 97%|█████████▋| 389/401 [06:19<00:15,  1.30s/it]
 97%|█████████▋| 390/401 [06:19<00:11,  1.08s/it]
 98%|█████████▊| 391/401 [06:19<00:08,  1.21it/s]
 98%|█████████▊| 392/401 [06:20<00:08,  1.09it/s]
 98%|█████████▊| 393/401 [06:21<00:05,  1.42it/s]
 98%|█████████▊| 394/401 [06:21<00:03,  1.75it/s]
 99%|█████████▊| 395/401 [06:21<00:03,  2.00it/s]
 99%|█████████▉| 396/401 [06:25<00:07,  1.40s/it]
 99%|█████████▉| 397/401 [06:25<00:04,  1.07s/it]
 99%|█████████▉| 398/401 [06:29<00:05,  1.82s/it]
100%|█████████▉| 399/401 [06:32<00:04,  2.30s/it]
100%|█████████▉| 400/401 [06:32<00:01,  1.67s/it]
100%|██████████| 401/401 [06:32<00:00,  1.21s/it]
100%|██████████| 401/401 [06:32<00:00,  1.02it/s]
	Running baseline: ['python', 'baselines.py', '--model_addr', 'Qwen/Qwen2.5-7B-Instruct', '--inputs_addr', 'data/processed/TEMP_2025-07-08 14:04:21.607623_ae_processed_test.json', '--output_addr', 'data/out/rag/full_profile/test_ae_output.json', '--temperature', '0.0', '--top_p', '0.95', '--max_tokens', '4096', '--num_generated_outputs', '1', '--num_contexts', '2', '--max_retries', '10', '--cache_dir', '/work/pi_hzamani_umass_edu/ozel_cache/', '--rag']

Generating train split: 0 examples [00:00, ? examples/s]
Generating train split: 1 examples [00:00,  3.11 examples/s]
Generating train split: 401 examples [00:00, 538.89 examples/s]
INFO 07-08 14:11:20 config.py:510] This model supports multiple tasks: {'reward', 'generate', 'score', 'embed', 'classify'}. Defaulting to 'generate'.
INFO 07-08 14:11:20 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-7B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-7B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768, download_dir='/work/pi_hzamani_umass_edu/ozel_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-7B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-08 14:11:22 selector.py:120] Using Flash Attention backend.
INFO 07-08 14:11:23 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-7B-Instruct...
INFO 07-08 14:11:23 weight_utils.py:251] Using model weights format ['*.safetensors']

Loading safetensors checkpoint shards:   0% Completed | 0/4 [00:00<?, ?it/s]

Loading safetensors checkpoint shards:  25% Completed | 1/4 [00:00<00:02,  1.27it/s]

Loading safetensors checkpoint shards:  50% Completed | 2/4 [00:01<00:01,  1.22it/s]

Loading safetensors checkpoint shards:  75% Completed | 3/4 [00:02<00:00,  1.23it/s]

Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:03<00:00,  1.27it/s]

Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:03<00:00,  1.26it/s]

INFO 07-08 14:11:26 model_runner.py:1099] Loading model weights took 14.2487 GB
INFO 07-08 14:11:29 worker.py:241] Memory profiling takes 2.11 seconds
INFO 07-08 14:11:29 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.90) = 71.33GiB
INFO 07-08 14:11:29 worker.py:241] model weights take 14.25GiB; non_torch_memory takes 0.14GiB; PyTorch activation peak memory takes 4.35GiB; the rest of the memory reserved for KV Cache is 52.59GiB.
INFO 07-08 14:11:29 gpu_executor.py:76] # GPU blocks: 61542, # CPU blocks: 4681
INFO 07-08 14:11:29 gpu_executor.py:80] Maximum concurrency for 32768 tokens per request: 30.05x
INFO 07-08 14:11:31 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.

Capturing CUDA graph shapes:   0%|          | 0/35 [00:00<?, ?it/s]
Capturing CUDA graph shapes:   3%|▎         | 1/35 [00:00<00:11,  3.09it/s]
Capturing CUDA graph shapes:   6%|▌         | 2/35 [00:00<00:09,  3.42it/s]
Capturing CUDA graph shapes:   9%|▊         | 3/35 [00:00<00:09,  3.54it/s]
Capturing CUDA graph shapes:  11%|█▏        | 4/35 [00:01<00:08,  3.60it/s]
Capturing CUDA graph shapes:  14%|█▍        | 5/35 [00:01<00:08,  3.60it/s]
Capturing CUDA graph shapes:  17%|█▋        | 6/35 [00:01<00:07,  3.64it/s]
Capturing CUDA graph shapes:  20%|██        | 7/35 [00:01<00:07,  3.66it/s]
Capturing CUDA graph shapes:  23%|██▎       | 8/35 [00:02<00:07,  3.68it/s]
Capturing CUDA graph shapes:  26%|██▌       | 9/35 [00:02<00:07,  3.67it/s]
Capturing CUDA graph shapes:  29%|██▊       | 10/35 [00:02<00:06,  3.70it/s]
Capturing CUDA graph shapes:  31%|███▏      | 11/35 [00:03<00:06,  3.72it/s]
Capturing CUDA graph shapes:  34%|███▍      | 12/35 [00:03<00:06,  3.73it/s]
Capturing CUDA graph shapes:  37%|███▋      | 13/35 [00:03<00:05,  3.74it/s]
Capturing CUDA graph shapes:  40%|████      | 14/35 [00:03<00:05,  3.74it/s]
Capturing CUDA graph shapes:  43%|████▎     | 15/35 [00:04<00:05,  3.75it/s]
Capturing CUDA graph shapes:  46%|████▌     | 16/35 [00:04<00:05,  3.75it/s]
Capturing CUDA graph shapes:  49%|████▊     | 17/35 [00:04<00:04,  3.80it/s]
Capturing CUDA graph shapes:  51%|█████▏    | 18/35 [00:04<00:04,  3.83it/s]
Capturing CUDA graph shapes:  54%|█████▍    | 19/35 [00:05<00:04,  3.85it/s]
Capturing CUDA graph shapes:  57%|█████▋    | 20/35 [00:05<00:03,  3.87it/s]
Capturing CUDA graph shapes:  60%|██████    | 21/35 [00:05<00:03,  3.79it/s]
Capturing CUDA graph shapes:  63%|██████▎   | 22/35 [00:05<00:03,  3.83it/s]
Capturing CUDA graph shapes:  66%|██████▌   | 23/35 [00:06<00:03,  3.86it/s]
Capturing CUDA graph shapes:  69%|██████▊   | 24/35 [00:06<00:02,  3.88it/s]
Capturing CUDA graph shapes:  71%|███████▏  | 25/35 [00:06<00:02,  3.90it/s]
Capturing CUDA graph shapes:  74%|███████▍  | 26/35 [00:06<00:02,  3.92it/s]
Capturing CUDA graph shapes:  77%|███████▋  | 27/35 [00:07<00:02,  3.94it/s]
Capturing CUDA graph shapes:  80%|████████  | 28/35 [00:07<00:01,  3.93it/s]
Capturing CUDA graph shapes:  83%|████████▎ | 29/35 [00:07<00:01,  3.95it/s]
Capturing CUDA graph shapes:  86%|████████▌ | 30/35 [00:07<00:01,  3.97it/s]
Capturing CUDA graph shapes:  89%|████████▊ | 31/35 [00:08<00:01,  3.98it/s]
Capturing CUDA graph shapes:  91%|█████████▏| 32/35 [00:08<00:00,  3.98it/s]
Capturing CUDA graph shapes:  94%|█████████▍| 33/35 [00:08<00:00,  3.92it/s]
Capturing CUDA graph shapes:  97%|█████████▋| 34/35 [00:08<00:00,  3.95it/s]
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:09<00:00,  3.98it/s]
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:09<00:00,  3.81it/s]
INFO 07-08 14:11:41 model_runner.py:1535] Graph capturing finished in 9 secs, took 0.22 GiB
INFO 07-08 14:11:41 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 14.21 seconds
RAG ON
EXAMPLE PROMPT
<|im_start|>system
You are a helpful assistant designed to generate personalized responses to user questions. Your task is to answer a user's question from a post in a personalized way by considering this user's past post questions and detailed descriptions of these questions.
# Your input:
    - The user's current question from a post.
    - The user's past post questions and detailed descriptions of these questions.
# Your task: Answer the user's current question in a personalized way by considering this user's past post questions and detailed descriptions of these questions, to learn about the user's preferences.
# Your output: You should generate personalized answer to the user's current question by considering this user's past post questions and detailed descriptions of these questions to learn about user's preferences. Your output should be a valid json object in ```json ``` block that contains the following fields:
    - personalized_answer: contains the personalized answer to the user's current question considering the this user's past post questions and detailed descriptions of these questions to learn about user's preferences.
<|im_end|>
<|im_start|>user

# Past post questions and detailed descriptions of these questions:
Is Boogiepop series connected to the Boogie music genre? Looking up the Oxford dictionary, the definition of "boogie" is:  A style of blues played on the piano with a strong, fast beat.From Wikipedia it is defined as:  Boogie (sometimes called post-disco) is a rhythm and blues genre of electronic dance music with close ties to the post-disco styleAs I am unfamiliar with the genre, I tried a few sample of boogie music. I don't really see it matches the atmosphere of the anime (neither the 2000 nor 2019 adaptation). Boogiepop himself "seems fond of whistling the prelude to Wagner's Die Meistersinger von Nürnberg" which is also not related to boogie genre.Also I don't see it too related to pop genre either.

Boogiepop and Others Promotional Trailer references 2019's "Boogiepop and Others" TV series has a promotional trailer. However the trailer is kind of "fake", because many footage are not present in the actual TV show.The main ones are:On Opera stageA man fighting a fire ability userBoogiepop walking closer to another girl, and the background switches with each swing from BoogiepopAre these referencing other unadapted stories in the series? If yes, which are those?
# Current post question:
Are the two music notes a reference?
<|im_end|>
<|im_start|>assistant

<|im_start|>system
You are a helpful assistant designed to generate personalized responses to user questions. Your task is to answer a user's question from a post in a personalized way by considering this user's past post questions and detailed descriptions of these questions.
# Your input:
    - The user's current question from a post.
    - The user's past post questions and detailed descriptions of these questions.
# Your task: Answer the user's current question in a personalized way by considering this user's past post questions and detailed descriptions of these questions, to learn about the user's preferences.
# Your output: You should generate personalized answer to the user's current question by considering this user's past post questions and detailed descriptions of these questions to learn about user's preferences. Your output should be a valid json object in ```json ``` block that contains the following fields:
    - personalized_answer: contains the personalized answer to the user's current question considering the this user's past post questions and detailed descriptions of these questions to learn about user's preferences.
<|im_end|>
<|im_start|>user

# Past post questions and detailed descriptions of these questions:
What happened to Hibiya and Hiyori after they broke out of the time loop? (It's been over four years since I watched Mekaku City Actors and it wasn't the most coherent anime, so please forgive me if I've gotten any details wrong or missed something obvious.)In the episode "Heat Haze Daze", Hibiya and Hiyori are trapped in an infinite time loop in which Hiyori keeps dying, and Hibiya keeps trying and failing to save her. They finally break out of the time loop (I presume) when   Hibiya sacrifices himself to save Hiyori's life.The next time we see them is when Haruka breaks open the back of a van to find them bound and gagged inside. I don't recall there ever being an explanation of how they got there.What happened to Hibiya and Hiyori between them breaking out of the time loop and Haruka finding them in the van? Who put them there, and why?

Why didn't Roberta kill these characters? In Part 4 of Black Lagoon: Roberta's Blood Trail, Shenhua attacks Roberta and is swiftly backed up by Sawyer and Rotton. Roberta breaks Sawyer's chainsaw and one of Shenhua's kukris, has the two held at gunpoint... then just kicks Rotton in the balls and walks away, sparing all three of them.I haven't watched Part 5 yet, but so far this is the only time Roberta has shown mercy in the entire OVA. Later on in Part 4, she reacts to Eda helping her by promising to kill her painlessly, yet here she spares three random strangers who were trying to kill her, two-thirds of whom were still armed in some capacity. I don't understand why.It could be that Roberta's just trying to catch up to the American soldiers and/or Garcia, and doesn't want to waste time killing them, but she doesn't seem to be in that much of a hurry - as I noted, she walks away from the incident in question. It could also just be that she's gone completely insane at this point, and trying to analyse her actions is a waste of time. But I'd like to try anyway.Why didn't Roberta kill Shenhua, Sawyer, and Rotton?To repeat: I haven't seen Part 5 yet, so I don't want to Google anything in case I stumble across any spoilers. If the answer is "watch Part 5", so be it.
# Current post question:
How come Neiru hasn't revived her sister yet?
<|im_end|>
<|im_start|>assistant

<|im_start|>system
You are a helpful assistant designed to generate personalized responses to user questions. Your task is to answer a user's question from a post in a personalized way by considering this user's past post questions and detailed descriptions of these questions.
# Your input:
    - The user's current question from a post.
    - The user's past post questions and detailed descriptions of these questions.
# Your task: Answer the user's current question in a personalized way by considering this user's past post questions and detailed descriptions of these questions, to learn about the user's preferences.
# Your output: You should generate personalized answer to the user's current question by considering this user's past post questions and detailed descriptions of these questions to learn about user's preferences. Your output should be a valid json object in ```json ``` block that contains the following fields:
    - personalized_answer: contains the personalized answer to the user's current question considering the this user's past post questions and detailed descriptions of these questions to learn about user's preferences.
<|im_end|>
<|im_start|>user

# Past post questions and detailed descriptions of these questions:
Who was able to resist more punches from Saitama, Boros or Garou? It's known few characteres can resist punches from Saitama when he's half serious (probably only Boros, Garou and Orochi until now)Who was able to resist more punches from Saitama, Boros or Garou?

Was Suiryu or Garou who defeated Saitama in Virtual Reality? In OVA #4 season 2, Saitama is defeating playing Virtual Reality and Genos says the one who defeated might be able to defeat Saitama in real life. Then we see those moving to the finals of the competition are Suiryu and Garou.Was Suiryu or Garou who defeated Saitama in Virtual Reality?
# Current post question:
Was Saitama sweating with worry when he saw Garou in this scene?
<|im_end|>
<|im_start|>assistant

None

Processed prompts:   0%|          | 0/401 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts:   0%|          | 1/401 [00:12<1:20:24, 12.06s/it, est. speed input: 37.97 toks/s, output: 7.21 toks/s]
Processed prompts:   0%|          | 2/401 [00:12<34:23,  5.17s/it, est. speed input: 67.93 toks/s, output: 14.58 toks/s] 
Processed prompts:   1%|          | 3/401 [00:12<19:35,  2.95s/it, est. speed input: 107.99 toks/s, output: 22.16 toks/s]
Processed prompts:   1%|▏         | 6/401 [00:12<06:54,  1.05s/it, est. speed input: 195.34 toks/s, output: 45.46 toks/s]
Processed prompts:   2%|▏         | 10/401 [00:13<03:32,  1.84it/s, est. speed input: 301.08 toks/s, output: 74.79 toks/s]
Processed prompts:   3%|▎         | 14/401 [00:13<02:10,  2.97it/s, est. speed input: 449.72 toks/s, output: 105.33 toks/s]
Processed prompts:   4%|▍         | 17/401 [00:14<01:35,  4.02it/s, est. speed input: 523.19 toks/s, output: 128.36 toks/s]
Processed prompts:   5%|▍         | 19/401 [00:14<01:22,  4.65it/s, est. speed input: 569.93 toks/s, output: 142.83 toks/s]
Processed prompts:   5%|▌         | 21/401 [00:14<01:06,  5.70it/s, est. speed input: 633.20 toks/s, output: 158.42 toks/s]
Processed prompts:   6%|▌         | 23/401 [00:14<00:59,  6.37it/s, est. speed input: 675.28 toks/s, output: 172.82 toks/s]
Processed prompts:   6%|▋         | 26/401 [00:14<00:49,  7.62it/s, est. speed input: 752.65 toks/s, output: 194.73 toks/s]
Processed prompts:   8%|▊         | 32/401 [00:15<00:34, 10.77it/s, est. speed input: 907.82 toks/s, output: 240.27 toks/s]
Processed prompts:   9%|▉         | 36/401 [00:15<00:28, 12.97it/s, est. speed input: 1005.55 toks/s, output: 270.68 toks/s]
Processed prompts:  10%|▉         | 39/401 [00:15<00:27, 13.30it/s, est. speed input: 1079.76 toks/s, output: 291.82 toks/s]
Processed prompts:  10%|█         | 42/401 [00:15<00:24, 14.89it/s, est. speed input: 1172.96 toks/s, output: 314.04 toks/s]
Processed prompts:  11%|█         | 44/401 [00:15<00:25, 13.76it/s, est. speed input: 1211.35 toks/s, output: 326.76 toks/s]
Processed prompts:  11%|█▏        | 46/401 [00:15<00:24, 14.31it/s, est. speed input: 1256.40 toks/s, output: 340.94 toks/s]
Processed prompts:  12%|█▏        | 49/401 [00:16<00:22, 15.78it/s, est. speed input: 1374.23 toks/s, output: 362.57 toks/s]
Processed prompts:  13%|█▎        | 53/401 [00:16<00:21, 16.37it/s, est. speed input: 1444.90 toks/s, output: 390.30 toks/s]
Processed prompts:  15%|█▍        | 59/401 [00:16<00:19, 17.28it/s, est. speed input: 1615.29 toks/s, output: 431.69 toks/s]
Processed prompts:  16%|█▌        | 65/401 [00:17<00:19, 17.19it/s, est. speed input: 1816.03 toks/s, output: 471.38 toks/s]
Processed prompts:  18%|█▊        | 73/401 [00:17<00:17, 18.90it/s, est. speed input: 2061.38 toks/s, output: 525.39 toks/s]
Processed prompts:  19%|█▊        | 75/401 [00:17<00:18, 17.63it/s, est. speed input: 2103.30 toks/s, output: 536.50 toks/s]
Processed prompts:  19%|█▉        | 78/401 [00:17<00:18, 17.86it/s, est. speed input: 2183.36 toks/s, output: 555.57 toks/s]
Processed prompts:  20%|██        | 81/401 [00:17<00:19, 16.45it/s, est. speed input: 2249.09 toks/s, output: 572.30 toks/s]
Processed prompts:  21%|██        | 85/401 [00:18<00:18, 16.75it/s, est. speed input: 2325.36 toks/s, output: 596.59 toks/s]
Processed prompts:  22%|██▏       | 89/401 [00:18<00:20, 15.08it/s, est. speed input: 2394.61 toks/s, output: 617.32 toks/s]
Processed prompts:  23%|██▎       | 92/401 [00:18<00:20, 15.20it/s, est. speed input: 2465.66 toks/s, output: 634.26 toks/s]
Processed prompts:  23%|██▎       | 94/401 [00:18<00:21, 14.15it/s, est. speed input: 2503.82 toks/s, output: 643.75 toks/s]
Processed prompts:  24%|██▍       | 98/401 [00:19<00:19, 15.42it/s, est. speed input: 2591.54 toks/s, output: 667.49 toks/s]
Processed prompts:  26%|██▌       | 103/401 [00:19<00:17, 16.91it/s, est. speed input: 2686.07 toks/s, output: 697.41 toks/s]
Processed prompts:  27%|██▋       | 107/401 [00:19<00:19, 14.94it/s, est. speed input: 2774.21 toks/s, output: 715.95 toks/s]
Processed prompts:  28%|██▊       | 111/401 [00:19<00:18, 15.61it/s, est. speed input: 2848.36 toks/s, output: 738.06 toks/s]
Processed prompts:  28%|██▊       | 114/401 [00:20<00:19, 14.53it/s, est. speed input: 2898.36 toks/s, output: 751.61 toks/s]
Processed prompts:  29%|██▉       | 118/401 [00:20<00:16, 17.01it/s, est. speed input: 2986.89 toks/s, output: 776.43 toks/s]
Processed prompts:  30%|██▉       | 120/401 [00:20<00:17, 15.64it/s, est. speed input: 3004.20 toks/s, output: 785.06 toks/s]
Processed prompts:  31%|███       | 123/401 [00:20<00:16, 16.52it/s, est. speed input: 3076.95 toks/s, output: 801.84 toks/s]
Processed prompts:  32%|███▏      | 128/401 [00:20<00:15, 17.51it/s, est. speed input: 3182.10 toks/s, output: 829.45 toks/s]
Processed prompts:  33%|███▎      | 131/401 [00:21<00:14, 18.73it/s, est. speed input: 3241.83 toks/s, output: 846.99 toks/s]
Processed prompts:  34%|███▍      | 137/401 [00:21<00:15, 17.47it/s, est. speed input: 3360.12 toks/s, output: 876.75 toks/s]
Processed prompts:  35%|███▌      | 142/401 [00:21<00:14, 18.18it/s, est. speed input: 3483.61 toks/s, output: 903.50 toks/s]
Processed prompts:  36%|███▌      | 144/401 [00:21<00:15, 17.10it/s, est. speed input: 3512.29 toks/s, output: 911.96 toks/s]
Processed prompts:  38%|███▊      | 154/401 [00:21<00:08, 28.30it/s, est. speed input: 3759.14 toks/s, output: 979.76 toks/s]
Processed prompts:  41%|████      | 165/401 [00:22<00:05, 41.40it/s, est. speed input: 4037.40 toks/s, output: 1056.86 toks/s]
Processed prompts:  43%|████▎     | 172/401 [00:22<00:05, 45.50it/s, est. speed input: 4232.53 toks/s, output: 1104.47 toks/s]
Processed prompts:  45%|████▌     | 182/401 [00:22<00:03, 55.34it/s, est. speed input: 4443.70 toks/s, output: 1175.55 toks/s]
Processed prompts:  47%|████▋     | 189/401 [00:22<00:04, 52.66it/s, est. speed input: 4576.79 toks/s, output: 1222.29 toks/s]
Processed prompts:  49%|████▊     | 195/401 [00:22<00:03, 53.09it/s, est. speed input: 4782.06 toks/s, output: 1263.71 toks/s]
Processed prompts:  51%|█████     | 204/401 [00:22<00:03, 60.80it/s, est. speed input: 5048.91 toks/s, output: 1329.49 toks/s]
Processed prompts:  53%|█████▎    | 211/401 [00:22<00:03, 57.04it/s, est. speed input: 5252.12 toks/s, output: 1378.19 toks/s]
Processed prompts:  54%|█████▍    | 218/401 [00:22<00:03, 55.16it/s, est. speed input: 5454.15 toks/s, output: 1427.50 toks/s]
Processed prompts:  56%|█████▌    | 224/401 [00:23<00:03, 45.17it/s, est. speed input: 5635.83 toks/s, output: 1465.31 toks/s]
Processed prompts:  57%|█████▋    | 230/401 [00:23<00:04, 35.81it/s, est. speed input: 5766.27 toks/s, output: 1500.09 toks/s]
Processed prompts:  59%|█████▊    | 235/401 [00:24<00:08, 20.23it/s, est. speed input: 5775.05 toks/s, output: 1508.80 toks/s]
Processed prompts:  60%|█████▉    | 239/401 [00:24<00:08, 19.01it/s, est. speed input: 5846.56 toks/s, output: 1530.35 toks/s]
Processed prompts:  60%|██████    | 242/401 [00:24<00:08, 18.28it/s, est. speed input: 5872.60 toks/s, output: 1542.13 toks/s]
Processed prompts:  61%|██████    | 245/401 [00:24<00:08, 17.69it/s, est. speed input: 5929.98 toks/s, output: 1551.35 toks/s]
Processed prompts:  62%|██████▏   | 248/401 [00:24<00:09, 15.32it/s, est. speed input: 5944.57 toks/s, output: 1558.88 toks/s]
Processed prompts:  62%|██████▏   | 250/401 [00:25<00:10, 14.80it/s, est. speed input: 5959.41 toks/s, output: 1560.01 toks/s]
Processed prompts:  63%|██████▎   | 252/401 [00:25<00:11, 12.62it/s, est. speed input: 5954.98 toks/s, output: 1560.67 toks/s]
Processed prompts:  64%|██████▍   | 257/401 [00:25<00:08, 17.82it/s, est. speed input: 6107.50 toks/s, output: 1580.41 toks/s]
Processed prompts:  66%|██████▌   | 263/401 [00:25<00:05, 23.17it/s, est. speed input: 6230.90 toks/s, output: 1612.61 toks/s]
Processed prompts:  67%|██████▋   | 269/401 [00:25<00:04, 27.53it/s, est. speed input: 6353.34 toks/s, output: 1638.16 toks/s]
Processed prompts:  68%|██████▊   | 274/401 [00:25<00:04, 31.03it/s, est. speed input: 6457.35 toks/s, output: 1661.55 toks/s]
Processed prompts:  70%|██████▉   | 280/401 [00:25<00:03, 37.04it/s, est. speed input: 6589.29 toks/s, output: 1688.04 toks/s]
Processed prompts:  72%|███████▏  | 287/401 [00:26<00:02, 44.54it/s, est. speed input: 6761.04 toks/s, output: 1721.70 toks/s]
Processed prompts:  73%|███████▎  | 292/401 [00:26<00:02, 40.80it/s, est. speed input: 6864.95 toks/s, output: 1743.87 toks/s]
Processed prompts:  74%|███████▍  | 298/401 [00:26<00:02, 43.13it/s, est. speed input: 7037.21 toks/s, output: 1778.32 toks/s]
Processed prompts:  77%|███████▋  | 309/401 [00:26<00:01, 57.07it/s, est. speed input: 7306.51 toks/s, output: 1838.24 toks/s]
Processed prompts:  79%|███████▉  | 317/401 [00:26<00:01, 57.52it/s, est. speed input: 7475.19 toks/s, output: 1884.00 toks/s]
Processed prompts:  81%|████████  | 325/401 [00:26<00:01, 58.37it/s, est. speed input: 7730.92 toks/s, output: 1922.22 toks/s]
Processed prompts:  84%|████████▎ | 335/401 [00:26<00:00, 67.40it/s, est. speed input: 7969.63 toks/s, output: 1983.50 toks/s]
Processed prompts:  86%|████████▌ | 343/401 [00:26<00:00, 70.44it/s, est. speed input: 8179.13 toks/s, output: 2038.88 toks/s]
Processed prompts:  88%|████████▊ | 353/401 [00:27<00:00, 71.43it/s, est. speed input: 8458.22 toks/s, output: 2102.61 toks/s]
Processed prompts:  90%|█████████ | 361/401 [00:27<00:00, 65.52it/s, est. speed input: 8638.96 toks/s, output: 2148.28 toks/s]
Processed prompts:  92%|█████████▏| 368/401 [00:27<00:00, 57.25it/s, est. speed input: 8769.58 toks/s, output: 2185.58 toks/s]
Processed prompts:  93%|█████████▎| 374/401 [00:27<00:00, 45.68it/s, est. speed input: 8863.39 toks/s, output: 2222.97 toks/s]
Processed prompts:  95%|█████████▍| 380/401 [00:27<00:00, 48.21it/s, est. speed input: 9072.42 toks/s, output: 2266.40 toks/s]
Processed prompts:  96%|█████████▋| 386/401 [00:28<00:00, 30.15it/s, est. speed input: 9177.30 toks/s, output: 2296.94 toks/s]
Processed prompts:  98%|█████████▊| 391/401 [00:28<00:00, 19.13it/s, est. speed input: 9217.48 toks/s, output: 2308.91 toks/s]
Processed prompts:  99%|█████████▊| 395/401 [00:29<00:00, 11.04it/s, est. speed input: 9071.17 toks/s, output: 2289.35 toks/s]
Processed prompts:  99%|█████████▉| 398/401 [00:29<00:00, 10.35it/s, est. speed input: 9042.81 toks/s, output: 2301.19 toks/s]
Processed prompts: 100%|█████████▉| 400/401 [00:30<00:00, 10.71it/s, est. speed input: 9055.78 toks/s, output: 2317.53 toks/s]
Processed prompts: 100%|██████████| 401/401 [00:31<00:00, 12.82it/s, est. speed input: 8759.06 toks/s, output: 2247.37 toks/s]
{  "personalized_answer": "The formatting styles you see in Hebrew/Aramaic texts on Sefaria are often used to enhance readability and provide additional context. For example, the bold and big text (like <big><strong>ר' אהרן</strong></big>) is typically used to highlight names or important phrases. The small parenthesized sections (like <small>(תהלים ק\"ד, כ\"ד)</small>) are often references to other texts or sources. The quotes (like ' and ") are used to denote direct speech or specific references. The brackets and parentheses (like [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.] and (כֹּל חָכְמָה מֵיהוָה וִעָמְוָה הִיא לְעוֹלָמִים) are used to include additional information or to clarify the text. The hyphens between words are used to separate parts of a compound word. The italics are used to emphasize certain words or phrases. While these modern formatting elements can be removed to make the text more natural, they do provide important context and should be retained if you want to preserve the original meaning and structure of the text. As for the font, the earliest Hebrew texts were written in the Paleo-Hebrew alphabet, which is a direct descendant of the Phoenician alphabet. The square script you see in modern Hebrew texts, known as Ktav Ashurith, evolved from the Aramaic script and was adopted by the Jews during the Babylonian captivity. So, while the Torah could have been written in Paleo-Hebrew, the square script is the most common and recognizable form used today."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:05<00:00,  5.04s/it, est. speed input: 649.05 toks/s, output: 81.13 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:05<00:00,  5.04s/it, est. speed input: 649.05 toks/s, output: 81.13 toks/s]
{  "personalized_answer": "The formatting styles you see in Hebrew/Aramaic texts from Sefaria are often used to enhance readability and provide additional context. For example, the bold and big text (like <big><strong>ר' אהרן</strong></big>) is typically used to highlight names or important phrases. The small parenthesized sections (like <small>(תהלים ק\"ד, כ\"ד)</small>) often indicate references to other texts or sources. The quotes (like ' and ") are used to denote direct speech or specific phrases. The brackets and parentheses (like [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.] and (כֹּל חָכְמָה מֵיהוָה וִעָמְוָה הִיא לְעוֹלָמִים) are used to include additional information or to clarify the text. The italics and hyphens are used for stylistic or editorial purposes. While these modern formatting elements can be removed or changed to make the text more natural, they do not represent the original text's script or font. The earliest Hebrew texts were written in the Paleo-Hebrew alphabet, which evolved into the modern Hebrew square script. The Samaritan script is a direct descendant of Paleo-Hebrew, and the Aramaic script developed later. The Torah, as we know it today, was likely written in the Paleo-Hebrew script, but over time, the square script became the standard. If you want to remove these modern elements, you can do so, but it's important to understand that they serve to clarify and enhance the text for modern readers."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.20s/it, est. speed input: 778.43 toks/s, output: 80.41 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.20s/it, est. speed input: 778.43 toks/s, output: 80.41 toks/s]
{  "personalized_answer": "The formatting styles you're seeing in Hebrew/Aramaic texts on Sefaria are primarily modern additions to make the texts more readable and accessible to contemporary readers. For example, the bold and big text (like <big><strong>ר' אהרן</strong></big>) is likely used to highlight names or important phrases. The small parenthesized sections (like <small>(תהלים ק\"ד, כ\"ד)</small>) and the brackets [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.] are used to provide references or additional information. The quotes (like ' and ") are modern additions to denote speech or quotations. The use of parentheses and brackets is often to include additional commentary or references. The hyphens between words are likely used for clarity or to separate words that might otherwise run together. The italics are used for emphasis or to denote foreign words or names. While these modern additions can be helpful, if you want to remove them to make the text more 'natural' and closer to the original, you can do so. However, it's important to note that some of these elements, like the references and commentary, are part of the scholarly tradition and can provide valuable context. If you want to remove them, you can use a text editor or script to strip out these elements, but be aware that you might lose some of the scholarly insights and context."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.63s/it, est. speed input: 707.27 toks/s, output: 80.63 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.63s/it, est. speed input: 707.27 toks/s, output: 80.63 toks/s]
{  "personalized_answer": "The formatting styles you're seeing in the Hebrew/Aramaic texts on Sefaria are modern additions that help with readability and provide context. The bold and italics are used to highlight specific names, phrases, or important sections. The large and small text sizes, such as <big><strong>ר' אהרן</strong></big>, are used to emphasize key figures or terms. Quotes, like ' and ", are used to denote speech or specific references. Parentheses and brackets, such as (תהלים ק\"ד, כ\"ד) and [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.], are used to provide additional information or references. Hyphens between words are used to clarify the meaning or pronunciation of certain terms. These modern additions are not part of the original texts and can be removed or changed to make the text more natural and closer to the original. For the earliest Hebrew texts, the script would have been Paleo-Hebrew, which is a direct descendant of the Phoenician alphabet. The Samaritan script and Aramaic script came later. The Torah, if written in its earliest form, would likely have been in Paleo-Hebrew. However, the exact script used for the Torah is a matter of tradition and interpretation, with some believing it to be Ktav Ashurith, the block script seen in modern Torah scrolls. To remove or change these modern additions, you can use text processing tools or scripts that identify and remove these formatting styles, making the text cleaner and more aligned with the original script."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.88s/it, est. speed input: 670.65 toks/s, output: 80.96 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:04<00:00,  4.88s/it, est. speed input: 670.65 toks/s, output: 80.96 toks/s]
{  "personalized_answer": "The formatting styles you're seeing in Hebrew/Aramaic texts on Sefaria are modern additions meant to enhance readability and provide context. The bold and italics are used for emphasis, such as highlighting names or important phrases. The big text, like <big><strong>ר' אהרן</strong></big>, is often used to denote important figures or titles. The quotes, like ' and ", are used to indicate speech or quotations. The small parenthesized sections, like <small>(תהלים ק\"ד, כ\"ד)</small>, are references to other texts or passages. The brackets and parentheses, like [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.] and (כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.), are used to include additional information or citations. The hyphens between words are used for clarity, especially in cases where words run together. These elements are not part of the original texts and can be removed or modified to make the text more natural. As for the script of the earliest Hebrew texts, they were likely written in Paleo-Hebrew, which is a direct descendant of the Phoenician alphabet. The square script you see in modern Torah scrolls, known as Ktav Ashurith, is a later development that evolved from Aramaic script. So, while the original texts would have been written in Paleo-Hebrew, the script you see on Sefaria is a more modern adaptation."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:07<00:00,  7.48s/it, est. speed input: 437.28 toks/s, output: 82.32 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:07<00:00,  7.48s/it, est. speed input: 437.28 toks/s, output: 82.32 toks/s]
{  "personalized_answer": "The formatting styles you see in Hebrew/Aramaic texts from Sefaria are primarily there for readability and to provide context. The small parentheses and quotes, like 'הקדמה:' and <small>(תהלים ק\"ד, כ\"ד)</small>, are used to denote footnotes, references, or additional information. The bold text, such as <big><strong>ר' אהרן</strong></big>, highlights important names or terms. The brackets and parentheses, like [כָּל חָכְמָה מֵיהֹוָה, וִעמּוֹ הִיא לְעוֹלָמִים.] and (בן אריאל), are used to indicate editorial notes, translations, or clarifications. The italics and hyphens are often used for stylistic or typographical reasons. While these elements can be seen as 'modern' or 'English' additions, they are not part of the original texts and can be removed or changed to make the text more natural. If you want a cleaner version of the text, you can strip out these formatting elements, keeping only the core text. For example, the original text without these modern additions would look more like: \n\nהקדמה: ואמו\"ר הצדיקים הקדושים, כי מן זמן התגלות הבעל שם טוב הקדוש התחיל התנוצצות המשיח, והענין בודאי הוא אמת לאמתו, על פי מה דאיתא בספר הקדוש תולדות יעקב יוסף פ' וישב רל\"ג ע\"א, ומובא לקמן בספר זה בפרשת לך אות ב', כי סוד המשיח הוא סוד הדעת, וע\"ש בהגה ג', וזה מובן על פי פשוטו גם כן, כי כן כתב הרמב\"ם בפרק ט' מהלכות תשובה הלכה ב', וזה לשונו, ומפני זה נתאוו כל ישראל נביאיהם וחכמיהם לימות המשיח וכו', לפי שבאותן הימים תרבה הדעה והחכמה והאמת, שנאמר (ישעיהו י\"א:ט׳) כי מלאה האם דעה את ה' וכו' ע\"ש, ולקמן פ' שמות אות ט"ז העתקתי מס' תולדות יעקב יוסף סוף פ' וישלח, שזה היה ענין גאולת מצרים, מה שנתגלה הדעת על ידי משה רבינו עליו השלום, ובגאולה העתידה יתגלה הדעת ביתר שאת ויתר עוז, כי זה הדעת שנתגלה במצרים נקרא דעת דנוקבא, ובגאולה העתידה במהרה בימינו יתגלה דעת דדכורא ע\"ש היטב."}
Invalid JSON
None

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:06<00:00,  6.24s/it, est. speed input: 524.52 toks/s, output: 81.92 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:06<00:00,  6.24s/it, est. speed input: 524.52 toks/s, output: 81.92 toks/s]
[rank0]:[W708 14:12:46.963684609 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
Experiment complete! Output can be found at data/out/rag/full_profile/test_ae_output.json
Cleaned temporary files.
