INFO 07-09 16:22:51 config.py:510] This model supports multiple tasks: {'reward', 'embed', 'classify', 'generate', 'score'}. Defaulting to 'generate'.
INFO 07-09 16:22:51 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-09 16:22:52 selector.py:120] Using Flash Attention backend.
INFO 07-09 16:22:53 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-09 16:22:53 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-09 16:37:13 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-09 16:37:20 worker.py:241] Memory profiling takes 7.79 seconds
INFO 07-09 16:37:20 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-09 16:37:20 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-09 16:37:21 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-09 16:37:21 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-09 16:37:22 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-09 16:37:35 model_runner.py:1535] Graph capturing finished in 13 secs, took 0.37 GiB
INFO 07-09 16:37:35 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 22.37 seconds
WARNING 07-09 16:38:16 scheduler.py:1555] Sequence group 166 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-09 16:44:36 config.py:510] This model supports multiple tasks: {'classify', 'reward', 'generate', 'score', 'embed'}. Defaulting to 'generate'.
INFO 07-09 16:44:36 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-09 16:44:37 selector.py:120] Using Flash Attention backend.
INFO 07-09 16:44:38 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-09 16:44:38 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-09 16:59:02 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-09 16:59:10 worker.py:241] Memory profiling takes 7.84 seconds
INFO 07-09 16:59:10 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-09 16:59:10 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-09 16:59:10 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-09 16:59:10 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-09 16:59:12 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-09 16:59:25 model_runner.py:1535] Graph capturing finished in 12 secs, took 0.37 GiB
INFO 07-09 16:59:25 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 22.14 seconds
WARNING 07-09 17:00:03 scheduler.py:1555] Sequence group 178 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-09 17:08:59 config.py:510] This model supports multiple tasks: {'generate', 'embed', 'classify', 'score', 'reward'}. Defaulting to 'generate'.
INFO 07-09 17:08:59 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-09 17:09:00 selector.py:120] Using Flash Attention backend.
INFO 07-09 17:09:01 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-09 17:09:01 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-09 17:10:44 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-09 17:10:52 worker.py:241] Memory profiling takes 7.86 seconds
INFO 07-09 17:10:52 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-09 17:10:52 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-09 17:10:52 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-09 17:10:52 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-09 17:10:53 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-09 17:11:06 model_runner.py:1535] Graph capturing finished in 13 secs, took 0.37 GiB
INFO 07-09 17:11:06 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 22.30 seconds
WARNING 07-09 17:11:17 scheduler.py:1555] Sequence group 41 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-09 17:18:25 config.py:510] This model supports multiple tasks: {'reward', 'classify', 'generate', 'embed', 'score'}. Defaulting to 'generate'.
INFO 07-09 17:18:25 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-09 17:18:27 selector.py:120] Using Flash Attention backend.
INFO 07-09 17:18:28 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-09 17:18:28 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-09 17:19:09 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-09 17:19:17 worker.py:241] Memory profiling takes 7.82 seconds
INFO 07-09 17:19:17 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-09 17:19:17 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-09 17:19:17 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-09 17:19:17 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-09 17:19:18 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-09 17:19:31 model_runner.py:1535] Graph capturing finished in 13 secs, took 0.37 GiB
INFO 07-09 17:19:31 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 22.51 seconds
WARNING 07-09 17:19:51 scheduler.py:1555] Sequence group 87 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-09 17:26:37 config.py:510] This model supports multiple tasks: {'score', 'reward', 'generate', 'classify', 'embed'}. Defaulting to 'generate'.
INFO 07-09 17:26:37 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-09 17:26:38 selector.py:120] Using Flash Attention backend.
INFO 07-09 17:26:39 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-09 17:26:39 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-09 17:27:18 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-09 17:27:26 worker.py:241] Memory profiling takes 7.82 seconds
INFO 07-09 17:27:26 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-09 17:27:26 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-09 17:27:26 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-09 17:27:26 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-09 17:27:27 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-09 17:27:40 model_runner.py:1535] Graph capturing finished in 13 secs, took 0.37 GiB
INFO 07-09 17:27:41 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 22.67 seconds
WARNING 07-09 17:28:02 scheduler.py:1555] Sequence group 81 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-09 17:37:19 config.py:510] This model supports multiple tasks: {'classify', 'reward', 'embed', 'score', 'generate'}. Defaulting to 'generate'.
INFO 07-09 17:37:19 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-09 17:37:20 selector.py:120] Using Flash Attention backend.
INFO 07-09 17:37:21 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-09 17:37:22 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-09 17:45:09 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-09 17:45:17 worker.py:241] Memory profiling takes 7.87 seconds
INFO 07-09 17:45:17 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-09 17:45:17 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-09 17:45:17 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-09 17:45:17 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-09 17:45:19 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-09 17:45:32 model_runner.py:1535] Graph capturing finished in 13 secs, took 0.37 GiB
INFO 07-09 17:45:32 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 22.40 seconds
WARNING 07-09 17:45:43 scheduler.py:1555] Sequence group 40 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
