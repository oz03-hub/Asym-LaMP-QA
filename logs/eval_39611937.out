INFO 07-09 18:56:54 config.py:510] This model supports multiple tasks: {'score', 'embed', 'reward', 'generate', 'classify'}. Defaulting to 'generate'.
INFO 07-09 18:56:54 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-09 18:56:55 selector.py:120] Using Flash Attention backend.
INFO 07-09 18:56:56 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-09 18:56:57 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-09 18:59:34 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-09 18:59:42 worker.py:241] Memory profiling takes 8.24 seconds
INFO 07-09 18:59:42 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-09 18:59:42 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-09 18:59:43 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-09 18:59:43 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-09 18:59:44 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-09 18:59:58 model_runner.py:1535] Graph capturing finished in 14 secs, took 0.37 GiB
INFO 07-09 18:59:58 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 23.67 seconds
WARNING 07-09 19:01:09 scheduler.py:1555] Sequence group 358 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-09 19:06:54 config.py:510] This model supports multiple tasks: {'embed', 'generate', 'reward', 'score', 'classify'}. Defaulting to 'generate'.
INFO 07-09 19:06:54 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-09 19:06:55 selector.py:120] Using Flash Attention backend.
INFO 07-09 19:06:56 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-09 19:06:56 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-09 19:07:08 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-09 19:07:15 worker.py:241] Memory profiling takes 7.83 seconds
INFO 07-09 19:07:15 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-09 19:07:15 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-09 19:07:15 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-09 19:07:15 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-09 19:07:17 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-09 19:07:30 model_runner.py:1535] Graph capturing finished in 13 secs, took 0.37 GiB
INFO 07-09 19:07:30 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 22.61 seconds
WARNING 07-09 19:08:00 scheduler.py:1555] Sequence group 127 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-09 19:17:04 config.py:510] This model supports multiple tasks: {'embed', 'generate', 'classify', 'reward', 'score'}. Defaulting to 'generate'.
INFO 07-09 19:17:04 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-09 19:17:05 selector.py:120] Using Flash Attention backend.
INFO 07-09 19:17:06 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-09 19:17:07 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-09 19:17:18 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-09 19:17:26 worker.py:241] Memory profiling takes 7.82 seconds
INFO 07-09 19:17:26 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-09 19:17:26 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-09 19:17:26 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-09 19:17:26 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-09 19:17:27 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-09 19:17:40 model_runner.py:1535] Graph capturing finished in 13 secs, took 0.37 GiB
INFO 07-09 19:17:40 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 22.49 seconds
WARNING 07-09 19:17:51 scheduler.py:1555] Sequence group 41 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-09 19:24:55 config.py:510] This model supports multiple tasks: {'reward', 'score', 'embed', 'classify', 'generate'}. Defaulting to 'generate'.
INFO 07-09 19:24:55 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-09 19:24:56 selector.py:120] Using Flash Attention backend.
INFO 07-09 19:24:58 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-09 19:24:58 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-09 19:25:09 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-09 19:25:17 worker.py:241] Memory profiling takes 7.86 seconds
INFO 07-09 19:25:17 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-09 19:25:17 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-09 19:25:17 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-09 19:25:17 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-09 19:25:19 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-09 19:25:32 model_runner.py:1535] Graph capturing finished in 14 secs, took 0.37 GiB
INFO 07-09 19:25:32 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 23.68 seconds
WARNING 07-09 19:26:01 scheduler.py:1555] Sequence group 126 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-09 19:32:39 config.py:510] This model supports multiple tasks: {'generate', 'classify', 'embed', 'reward', 'score'}. Defaulting to 'generate'.
INFO 07-09 19:32:39 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-09 19:32:40 selector.py:120] Using Flash Attention backend.
INFO 07-09 19:32:41 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-09 19:32:42 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-09 19:32:53 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-09 19:33:00 worker.py:241] Memory profiling takes 7.80 seconds
INFO 07-09 19:33:00 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-09 19:33:00 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-09 19:33:00 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-09 19:33:00 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-09 19:33:02 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-09 19:33:16 model_runner.py:1535] Graph capturing finished in 14 secs, took 0.37 GiB
INFO 07-09 19:33:16 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 23.51 seconds
WARNING 07-09 19:33:29 scheduler.py:1555] Sequence group 43 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-09 19:42:57 config.py:510] This model supports multiple tasks: {'classify', 'score', 'reward', 'generate', 'embed'}. Defaulting to 'generate'.
INFO 07-09 19:42:57 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-09 19:42:58 selector.py:120] Using Flash Attention backend.
INFO 07-09 19:42:59 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-09 19:42:59 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-09 19:43:10 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-09 19:43:18 worker.py:241] Memory profiling takes 7.86 seconds
INFO 07-09 19:43:18 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-09 19:43:18 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-09 19:43:18 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-09 19:43:18 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-09 19:43:20 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-09 19:43:33 model_runner.py:1535] Graph capturing finished in 13 secs, took 0.37 GiB
INFO 07-09 19:43:33 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 22.88 seconds
WARNING 07-09 19:44:19 scheduler.py:1555] Sequence group 202 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
