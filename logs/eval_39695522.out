INFO 07-11 15:27:02 config.py:510] This model supports multiple tasks: {'embed', 'classify', 'reward', 'score', 'generate'}. Defaulting to 'generate'.
INFO 07-11 15:27:02 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-11 15:27:04 selector.py:120] Using Flash Attention backend.
INFO 07-11 15:27:05 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-11 15:27:05 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-11 15:28:41 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-11 15:28:49 worker.py:241] Memory profiling takes 7.89 seconds
INFO 07-11 15:28:49 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-11 15:28:49 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-11 15:28:49 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-11 15:28:49 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-11 15:28:51 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-11 15:29:10 model_runner.py:1535] Graph capturing finished in 19 secs, took 0.37 GiB
INFO 07-11 15:29:10 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 29.28 seconds
WARNING 07-11 15:29:19 scheduler.py:1555] Sequence group 42 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-11 15:31:13 config.py:510] This model supports multiple tasks: {'classify', 'score', 'reward', 'embed', 'generate'}. Defaulting to 'generate'.
INFO 07-11 15:31:13 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-11 15:31:14 selector.py:120] Using Flash Attention backend.
INFO 07-11 15:31:16 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-11 15:31:16 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-11 15:31:29 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-11 15:31:37 worker.py:241] Memory profiling takes 7.90 seconds
INFO 07-11 15:31:37 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-11 15:31:37 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-11 15:31:37 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-11 15:31:37 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-11 15:31:40 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-11 15:31:59 model_runner.py:1535] Graph capturing finished in 19 secs, took 0.37 GiB
INFO 07-11 15:31:59 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 29.59 seconds
WARNING 07-11 15:32:25 scheduler.py:1555] Sequence group 129 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-11 15:34:41 config.py:510] This model supports multiple tasks: {'classify', 'generate', 'embed', 'reward', 'score'}. Defaulting to 'generate'.
INFO 07-11 15:34:41 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-11 15:34:42 selector.py:120] Using Flash Attention backend.
INFO 07-11 15:34:43 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-11 15:34:44 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-11 15:34:57 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-11 15:35:05 worker.py:241] Memory profiling takes 7.92 seconds
INFO 07-11 15:35:05 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-11 15:35:05 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-11 15:35:05 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-11 15:35:05 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-11 15:35:07 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-11 15:35:27 model_runner.py:1535] Graph capturing finished in 19 secs, took 0.37 GiB
INFO 07-11 15:35:27 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 29.58 seconds
WARNING 07-11 15:35:36 scheduler.py:1555] Sequence group 42 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-11 15:37:42 config.py:510] This model supports multiple tasks: {'embed', 'score', 'reward', 'generate', 'classify'}. Defaulting to 'generate'.
INFO 07-11 15:37:42 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-11 15:37:44 selector.py:120] Using Flash Attention backend.
INFO 07-11 15:37:45 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-11 15:37:45 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-11 15:37:58 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-11 15:38:06 worker.py:241] Memory profiling takes 7.93 seconds
INFO 07-11 15:38:06 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-11 15:38:06 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-11 15:38:06 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-11 15:38:06 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-11 15:38:09 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-11 15:38:29 model_runner.py:1535] Graph capturing finished in 20 secs, took 0.37 GiB
INFO 07-11 15:38:29 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 30.32 seconds
WARNING 07-11 15:38:38 scheduler.py:1555] Sequence group 42 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-11 15:40:34 config.py:510] This model supports multiple tasks: {'classify', 'reward', 'embed', 'score', 'generate'}. Defaulting to 'generate'.
INFO 07-11 15:40:34 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-11 15:40:36 selector.py:120] Using Flash Attention backend.
INFO 07-11 15:40:37 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-11 15:40:37 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-11 15:40:50 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-11 15:40:58 worker.py:241] Memory profiling takes 7.92 seconds
INFO 07-11 15:40:58 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-11 15:40:58 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-11 15:40:58 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-11 15:40:58 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-11 15:41:01 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-11 15:41:20 model_runner.py:1535] Graph capturing finished in 19 secs, took 0.37 GiB
INFO 07-11 15:41:20 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 29.36 seconds
WARNING 07-11 15:41:47 scheduler.py:1555] Sequence group 130 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-11 15:44:05 config.py:510] This model supports multiple tasks: {'classify', 'generate', 'score', 'reward', 'embed'}. Defaulting to 'generate'.
INFO 07-11 15:44:05 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-11 15:44:06 selector.py:120] Using Flash Attention backend.
INFO 07-11 15:44:07 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-11 15:44:07 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-11 15:44:20 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-11 15:44:28 worker.py:241] Memory profiling takes 7.94 seconds
INFO 07-11 15:44:28 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-11 15:44:28 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-11 15:44:29 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-11 15:44:29 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-11 15:44:31 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-11 15:44:50 model_runner.py:1535] Graph capturing finished in 19 secs, took 0.37 GiB
INFO 07-11 15:44:50 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 29.52 seconds
WARNING 07-11 15:45:16 scheduler.py:1555] Sequence group 121 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
