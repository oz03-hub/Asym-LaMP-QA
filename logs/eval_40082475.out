INFO 07-18 11:18:11 config.py:510] This model supports multiple tasks: {'classify', 'reward', 'embed', 'score', 'generate'}. Defaulting to 'generate'.
INFO 07-18 11:18:11 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-18 11:18:12 selector.py:120] Using Flash Attention backend.
INFO 07-18 11:18:14 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-18 11:18:16 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-18 11:19:12 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-18 11:19:20 worker.py:241] Memory profiling takes 7.89 seconds
INFO 07-18 11:19:20 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-18 11:19:20 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-18 11:19:20 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-18 11:19:20 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-18 11:19:22 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-18 11:19:38 model_runner.py:1535] Graph capturing finished in 16 secs, took 0.37 GiB
INFO 07-18 11:19:38 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 25.62 seconds
WARNING 07-18 11:20:12 scheduler.py:1555] Sequence group 164 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-18 11:20:41 config.py:510] This model supports multiple tasks: {'classify', 'generate', 'score', 'embed', 'reward'}. Defaulting to 'generate'.
INFO 07-18 11:20:41 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-18 11:20:42 selector.py:120] Using Flash Attention backend.
INFO 07-18 11:20:43 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-18 11:20:44 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-18 11:21:15 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-18 11:21:23 worker.py:241] Memory profiling takes 7.91 seconds
INFO 07-18 11:21:23 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-18 11:21:23 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-18 11:21:23 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-18 11:21:23 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-18 11:21:25 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-18 11:21:41 model_runner.py:1535] Graph capturing finished in 16 secs, took 0.37 GiB
INFO 07-18 11:21:41 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 25.69 seconds
WARNING 07-18 11:21:50 scheduler.py:1555] Sequence group 46 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-18 11:22:57 config.py:510] This model supports multiple tasks: {'generate', 'reward', 'score', 'classify', 'embed'}. Defaulting to 'generate'.
INFO 07-18 11:22:57 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-18 11:22:58 selector.py:120] Using Flash Attention backend.
INFO 07-18 11:22:59 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-18 11:23:00 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-18 11:23:43 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-18 11:23:51 worker.py:241] Memory profiling takes 7.91 seconds
INFO 07-18 11:23:51 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-18 11:23:51 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-18 11:23:51 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-18 11:23:51 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-18 11:23:53 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-18 11:24:09 model_runner.py:1535] Graph capturing finished in 16 secs, took 0.37 GiB
INFO 07-18 11:24:09 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 25.67 seconds
WARNING 07-18 11:24:43 scheduler.py:1555] Sequence group 160 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-18 11:25:14 config.py:510] This model supports multiple tasks: {'reward', 'classify', 'score', 'embed', 'generate'}. Defaulting to 'generate'.
INFO 07-18 11:25:14 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-18 11:25:15 selector.py:120] Using Flash Attention backend.
INFO 07-18 11:25:16 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-18 11:25:17 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-18 11:25:46 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-18 11:25:54 worker.py:241] Memory profiling takes 7.92 seconds
INFO 07-18 11:25:54 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-18 11:25:54 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-18 11:25:54 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-18 11:25:54 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-18 11:25:56 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-18 11:26:12 model_runner.py:1535] Graph capturing finished in 17 secs, took 0.37 GiB
INFO 07-18 11:26:12 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 26.34 seconds
WARNING 07-18 11:26:38 scheduler.py:1555] Sequence group 120 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-18 11:27:13 config.py:510] This model supports multiple tasks: {'classify', 'score', 'embed', 'generate', 'reward'}. Defaulting to 'generate'.
INFO 07-18 11:27:13 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-18 11:27:15 selector.py:120] Using Flash Attention backend.
INFO 07-18 11:27:16 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-18 11:27:16 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-18 11:28:20 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-18 11:28:28 worker.py:241] Memory profiling takes 7.93 seconds
INFO 07-18 11:28:28 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-18 11:28:28 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-18 11:28:28 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-18 11:28:28 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-18 11:28:30 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-18 11:28:46 model_runner.py:1535] Graph capturing finished in 16 secs, took 0.37 GiB
INFO 07-18 11:28:46 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 25.56 seconds
WARNING 07-18 11:29:12 scheduler.py:1555] Sequence group 123 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-18 11:30:00 config.py:510] This model supports multiple tasks: {'score', 'reward', 'generate', 'classify', 'embed'}. Defaulting to 'generate'.
INFO 07-18 11:30:00 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-18 11:30:01 selector.py:120] Using Flash Attention backend.
INFO 07-18 11:30:02 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-18 11:30:03 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-18 11:32:18 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-18 11:32:26 worker.py:241] Memory profiling takes 7.91 seconds
INFO 07-18 11:32:26 worker.py:241] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.95) = 75.29GiB
INFO 07-18 11:32:26 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.10GiB; PyTorch activation peak memory takes 6.17GiB; the rest of the memory reserved for KV Cache is 7.98GiB.
INFO 07-18 11:32:27 gpu_executor.py:76] # GPU blocks: 2042, # CPU blocks: 1024
INFO 07-18 11:32:27 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.02x
INFO 07-18 11:32:28 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-18 11:32:45 model_runner.py:1535] Graph capturing finished in 16 secs, took 0.37 GiB
INFO 07-18 11:32:45 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 26.04 seconds
WARNING 07-18 11:33:02 scheduler.py:1555] Sequence group 76 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
