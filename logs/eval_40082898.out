INFO 07-18 12:01:37 config.py:510] This model supports multiple tasks: {'reward', 'embed', 'score', 'generate', 'classify'}. Defaulting to 'generate'.
INFO 07-18 12:01:37 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-18 12:01:38 selector.py:120] Using Flash Attention backend.
INFO 07-18 12:01:39 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-18 12:01:40 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-18 12:01:51 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-18 12:01:55 worker.py:241] Memory profiling takes 3.52 seconds
INFO 07-18 12:01:55 worker.py:241] the current vLLM instance can use total_gpu_memory (79.19GiB) x gpu_memory_utilization (0.95) = 75.23GiB
INFO 07-18 12:01:55 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.17GiB; PyTorch activation peak memory takes 6.20GiB; the rest of the memory reserved for KV Cache is 7.83GiB.
INFO 07-18 12:01:55 gpu_executor.py:76] # GPU blocks: 2003, # CPU blocks: 1024
INFO 07-18 12:01:55 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.00x
INFO 07-18 12:01:56 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-18 12:02:06 model_runner.py:1535] Graph capturing finished in 10 secs, took 0.42 GiB
INFO 07-18 12:02:06 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 15.39 seconds
WARNING 07-18 12:02:18 scheduler.py:1555] Sequence group 119 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-18 12:02:53 config.py:510] This model supports multiple tasks: {'embed', 'score', 'classify', 'reward', 'generate'}. Defaulting to 'generate'.
INFO 07-18 12:02:53 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-18 12:02:54 selector.py:120] Using Flash Attention backend.
INFO 07-18 12:02:55 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-18 12:02:56 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-18 12:03:07 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-18 12:03:11 worker.py:241] Memory profiling takes 3.52 seconds
INFO 07-18 12:03:11 worker.py:241] the current vLLM instance can use total_gpu_memory (79.19GiB) x gpu_memory_utilization (0.95) = 75.23GiB
INFO 07-18 12:03:11 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.17GiB; PyTorch activation peak memory takes 6.20GiB; the rest of the memory reserved for KV Cache is 7.83GiB.
INFO 07-18 12:03:11 gpu_executor.py:76] # GPU blocks: 2003, # CPU blocks: 1024
INFO 07-18 12:03:11 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.00x
INFO 07-18 12:03:12 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-18 12:03:23 model_runner.py:1535] Graph capturing finished in 11 secs, took 0.42 GiB
INFO 07-18 12:03:23 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 15.69 seconds
WARNING 07-18 12:03:41 scheduler.py:1555] Sequence group 212 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-18 12:04:17 config.py:510] This model supports multiple tasks: {'score', 'reward', 'classify', 'embed', 'generate'}. Defaulting to 'generate'.
INFO 07-18 12:04:17 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-18 12:04:18 selector.py:120] Using Flash Attention backend.
INFO 07-18 12:04:20 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-18 12:04:20 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-18 12:04:31 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-18 12:04:35 worker.py:241] Memory profiling takes 3.49 seconds
INFO 07-18 12:04:35 worker.py:241] the current vLLM instance can use total_gpu_memory (79.19GiB) x gpu_memory_utilization (0.95) = 75.23GiB
INFO 07-18 12:04:35 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.17GiB; PyTorch activation peak memory takes 6.20GiB; the rest of the memory reserved for KV Cache is 7.83GiB.
INFO 07-18 12:04:35 gpu_executor.py:76] # GPU blocks: 2003, # CPU blocks: 1024
INFO 07-18 12:04:35 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.00x
INFO 07-18 12:04:36 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-18 12:04:47 model_runner.py:1535] Graph capturing finished in 11 secs, took 0.42 GiB
INFO 07-18 12:04:47 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 15.61 seconds
WARNING 07-18 12:05:05 scheduler.py:1555] Sequence group 200 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-18 12:05:33 config.py:510] This model supports multiple tasks: {'embed', 'score', 'reward', 'generate', 'classify'}. Defaulting to 'generate'.
INFO 07-18 12:05:33 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-18 12:05:34 selector.py:120] Using Flash Attention backend.
INFO 07-18 12:05:35 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-18 12:05:36 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-18 12:05:47 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-18 12:05:50 worker.py:241] Memory profiling takes 3.52 seconds
INFO 07-18 12:05:50 worker.py:241] the current vLLM instance can use total_gpu_memory (79.19GiB) x gpu_memory_utilization (0.95) = 75.23GiB
INFO 07-18 12:05:50 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.17GiB; PyTorch activation peak memory takes 6.20GiB; the rest of the memory reserved for KV Cache is 7.83GiB.
INFO 07-18 12:05:51 gpu_executor.py:76] # GPU blocks: 2003, # CPU blocks: 1024
INFO 07-18 12:05:51 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.00x
INFO 07-18 12:05:52 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-18 12:06:02 model_runner.py:1535] Graph capturing finished in 10 secs, took 0.42 GiB
INFO 07-18 12:06:02 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 15.41 seconds
WARNING 07-18 12:06:10 scheduler.py:1555] Sequence group 77 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-18 12:06:54 config.py:510] This model supports multiple tasks: {'reward', 'score', 'embed', 'generate', 'classify'}. Defaulting to 'generate'.
INFO 07-18 12:06:54 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-18 12:06:55 selector.py:120] Using Flash Attention backend.
INFO 07-18 12:06:56 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-18 12:06:57 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-18 12:07:08 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-18 12:07:11 worker.py:241] Memory profiling takes 3.51 seconds
INFO 07-18 12:07:11 worker.py:241] the current vLLM instance can use total_gpu_memory (79.19GiB) x gpu_memory_utilization (0.95) = 75.23GiB
INFO 07-18 12:07:11 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.17GiB; PyTorch activation peak memory takes 6.20GiB; the rest of the memory reserved for KV Cache is 7.83GiB.
INFO 07-18 12:07:12 gpu_executor.py:76] # GPU blocks: 2003, # CPU blocks: 1024
INFO 07-18 12:07:12 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.00x
INFO 07-18 12:07:13 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-18 12:07:23 model_runner.py:1535] Graph capturing finished in 10 secs, took 0.42 GiB
INFO 07-18 12:07:23 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 15.34 seconds
WARNING 07-18 12:07:27 scheduler.py:1555] Sequence group 43 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
INFO 07-18 12:08:23 config.py:510] This model supports multiple tasks: {'embed', 'classify', 'reward', 'generate', 'score'}. Defaulting to 'generate'.
INFO 07-18 12:08:23 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 07-18 12:08:24 selector.py:120] Using Flash Attention backend.
INFO 07-18 12:08:25 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 07-18 12:08:26 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 07-18 12:08:37 model_runner.py:1099] Loading model weights took 61.0372 GB
INFO 07-18 12:08:40 worker.py:241] Memory profiling takes 3.51 seconds
INFO 07-18 12:08:40 worker.py:241] the current vLLM instance can use total_gpu_memory (79.19GiB) x gpu_memory_utilization (0.95) = 75.23GiB
INFO 07-18 12:08:40 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.17GiB; PyTorch activation peak memory takes 6.20GiB; the rest of the memory reserved for KV Cache is 7.83GiB.
INFO 07-18 12:08:41 gpu_executor.py:76] # GPU blocks: 2003, # CPU blocks: 1024
INFO 07-18 12:08:41 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.00x
INFO 07-18 12:08:42 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 07-18 12:08:52 model_runner.py:1535] Graph capturing finished in 10 secs, took 0.42 GiB
INFO 07-18 12:08:52 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 15.41 seconds
WARNING 07-18 12:09:15 scheduler.py:1555] Sequence group 239 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
