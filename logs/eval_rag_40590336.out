python evaluate_responses.py --cache_dir /scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/ --evaluator_llm Qwen/Qwen2.5-32B-Instruct --inputs_addr data/processed/ae_processed_test.json --response_addr data/out/rag/full_profile/ae_rag_full_profile_test_10_limit_0_output.json --score_addr data/scores/rag/full_profile/ae_rag_full_profile_test_10_limit_0_scores.json
INFO 08-04 18:01:29 config.py:510] This model supports multiple tasks: {'score', 'generate', 'reward', 'embed', 'classify'}. Defaulting to 'generate'.
INFO 08-04 18:01:29 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 08-04 18:01:30 selector.py:120] Using Flash Attention backend.
INFO 08-04 18:01:31 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 08-04 18:01:31 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 08-04 18:04:40 model_runner.py:1099] Loading model weights took 61.0353 GB
INFO 08-04 18:04:44 worker.py:241] Memory profiling takes 3.64 seconds
INFO 08-04 18:04:44 worker.py:241] the current vLLM instance can use total_gpu_memory (79.19GiB) x gpu_memory_utilization (0.95) = 75.23GiB
INFO 08-04 18:04:44 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.17GiB; PyTorch activation peak memory takes 6.20GiB; the rest of the memory reserved for KV Cache is 7.83GiB.
INFO 08-04 18:04:44 gpu_executor.py:76] # GPU blocks: 2004, # CPU blocks: 1024
INFO 08-04 18:04:44 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.00x
INFO 08-04 18:04:45 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 08-04 18:04:58 model_runner.py:1535] Graph capturing finished in 13 secs, took 0.45 GiB
INFO 08-04 18:04:58 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 18.09 seconds
WARNING 08-04 18:05:06 scheduler.py:1555] Sequence group 44 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
python evaluate_responses.py --cache_dir /scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/ --evaluator_llm Qwen/Qwen2.5-32B-Instruct --inputs_addr data/processed/lp_processed_test.json --response_addr data/out/rag/full_profile/lp_rag_full_profile_test_10_limit_0_output.json --score_addr data/scores/rag/full_profile/lp_rag_full_profile_test_10_limit_0_scores.json
INFO 08-04 18:09:20 config.py:510] This model supports multiple tasks: {'embed', 'generate', 'score', 'reward', 'classify'}. Defaulting to 'generate'.
INFO 08-04 18:09:20 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 08-04 18:09:21 selector.py:120] Using Flash Attention backend.
INFO 08-04 18:09:22 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 08-04 18:09:23 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 08-04 18:09:34 model_runner.py:1099] Loading model weights took 61.0353 GB
INFO 08-04 18:09:38 worker.py:241] Memory profiling takes 3.68 seconds
INFO 08-04 18:09:38 worker.py:241] the current vLLM instance can use total_gpu_memory (79.19GiB) x gpu_memory_utilization (0.95) = 75.23GiB
INFO 08-04 18:09:38 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.17GiB; PyTorch activation peak memory takes 6.20GiB; the rest of the memory reserved for KV Cache is 7.83GiB.
INFO 08-04 18:09:38 gpu_executor.py:76] # GPU blocks: 2004, # CPU blocks: 1024
INFO 08-04 18:09:38 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.00x
INFO 08-04 18:09:40 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 08-04 18:09:52 model_runner.py:1535] Graph capturing finished in 13 secs, took 0.45 GiB
INFO 08-04 18:09:52 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 17.90 seconds
WARNING 08-04 18:10:16 scheduler.py:1555] Sequence group 174 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
python evaluate_responses.py --cache_dir /scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/ --evaluator_llm Qwen/Qwen2.5-32B-Instruct --inputs_addr data/processed/sc_processed_test.json --response_addr data/out/rag/full_profile/sc_rag_full_profile_test_10_limit_0_output.json --score_addr data/scores/rag/full_profile/sc_rag_full_profile_test_10_limit_0_scores.json
INFO 08-04 18:15:47 config.py:510] This model supports multiple tasks: {'reward', 'score', 'classify', 'embed', 'generate'}. Defaulting to 'generate'.
INFO 08-04 18:15:47 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='Qwen/Qwen2.5-32B-Instruct', speculative_config=None, tokenizer='Qwen/Qwen2.5-32B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32000, download_dir='/scratch3/workspace/oyilmazel_umass_edu-lampqa_cache/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=Qwen/Qwen2.5-32B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 08-04 18:15:48 selector.py:120] Using Flash Attention backend.
INFO 08-04 18:15:49 model_runner.py:1094] Starting to load model Qwen/Qwen2.5-32B-Instruct...
INFO 08-04 18:15:50 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 08-04 18:16:00 model_runner.py:1099] Loading model weights took 61.0353 GB
INFO 08-04 18:16:04 worker.py:241] Memory profiling takes 3.72 seconds
INFO 08-04 18:16:04 worker.py:241] the current vLLM instance can use total_gpu_memory (79.19GiB) x gpu_memory_utilization (0.95) = 75.23GiB
INFO 08-04 18:16:04 worker.py:241] model weights take 61.04GiB; non_torch_memory takes 0.17GiB; PyTorch activation peak memory takes 6.20GiB; the rest of the memory reserved for KV Cache is 7.83GiB.
INFO 08-04 18:16:04 gpu_executor.py:76] # GPU blocks: 2004, # CPU blocks: 1024
INFO 08-04 18:16:04 gpu_executor.py:80] Maximum concurrency for 32000 tokens per request: 1.00x
INFO 08-04 18:16:06 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 08-04 18:16:19 model_runner.py:1535] Graph capturing finished in 13 secs, took 0.45 GiB
INFO 08-04 18:16:19 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 18.26 seconds
WARNING 08-04 18:16:26 scheduler.py:1555] Sequence group 41 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
